
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.13.0.56.2

// ldbanno -n Verilog -o CS_project_CS_implementation_vo.vo -w -neg -gui -msgset C:/Users/Denisa/Desktop/GITHUB/Incercari/Implementare/diamond/promote.xml CS_project_CS_implementation.ncd 
// Netlist created on Fri Jun 21 03:28:03 2024
// Netlist written on Fri Jun 21 03:29:54 2024
// Design is for device LCMXO3D-9400HC
// Design is for package CABGA256
// Design is for performance grade 5

`timescale 1 ns / 1 ps

module CS ( clk, rst_n, btnHS, btnVS, btnUART, btnVGA, in, out, HSYNC, VSYNC, 
            LEDS, RED, GREEN, BLUE );
  input  clk, rst_n, btnHS, btnVS, btnUART, btnVGA, in;
  output out, HSYNC, VSYNC;
  output [7:0] LEDS;
  output [3:0] RED;
  output [3:0] GREEN;
  output [3:0] BLUE;
  wire   H_left_margin_4, Count_h_4, H_left_margin_3, Count_h_3, n6178, n6179, 
         Count_h_2, H_left_margin_2, Count_h_1, H_left_margin_1, n6177, 
         Count_h_6, H_left_margin_6, H_left_margin_5, Count_h_5, n6180, 
         Count_h_8, H_left_margin_8, Count_h_7, H_left_margin_7, n6181, 
         \cm/counterV/n6240 , \cm/counterV/n1455 , 
         \cm/counterV/Count_intern_reg_9 , \cm/H_BackPorch_4 , 
         \cm/H_BackPorch_5 , \cm/counterV/Count_intern_reg_8 , 
         \cm/counterV/n6239 , \cm/counterV/Count_intern_reg_7 , 
         \cm/H_BackPorch_3 , \cm/counterV/Count_intern_reg_6 , 
         \cm/counterV/n6238 , \cm/counterV/Count_intern_reg_5 , 
         \cm/H_BackPorch_7 , \cm/counterV/Count_intern_reg_4 , 
         \cm/counterV/n6237 , \cm/counterV/Count_intern_reg_3 , 
         \cm/counterV/Count_intern_reg_2 , \cm/counterV/n6236 , 
         \cm/counterV/Count_intern_reg_1 , \cm/counterV/Count_intern_reg_0 , 
         \cm/counterV/n6186 , \cm/counterV/n1468 , \cm/counterV/n6185 , 
         \cm/counterV/n6184 , \cm/counterV/n6183 , \cm/V_BackPorch_1 , 
         \cm/counterV/n6182 , \cm/counterV/n46_adj_1135 , VSYNC_c, clk_c, 
         \cm/counterV/n6274 , \cm/counterV/n47_adj_1134 , 
         \cm/counterV/n48_adj_1133 , \cm/counterV/n6273 , 
         \cm/counterV/n49_adj_1132 , \cm/counterV/n50_adj_1131 , 
         \cm/counterV/n6272 , \cm/counterV/n51_adj_1130 , 
         \cm/counterV/n52_adj_1129 , \cm/counterV/n6271 , 
         \cm/counterV/n53_adj_1128 , \cm/counterV/n54_adj_1127 , 
         \cm/counterV/n6270 , \cm/counterV/n55 , \cm/Counter_Y_9 , 
         \cm/counterV/n46 , \cm/counterV/n3043 , \cm/counterV/n6269 , 
         \cm/Counter_Y_8 , \cm/Counter_Y_7 , \cm/counterV/n47 , 
         \cm/counterV/n48 , \cm/counterV/n6268 , \cm/Counter_Y_6 , 
         \cm/Counter_Y_5 , \cm/counterV/n49 , \cm/counterV/n50 , 
         \cm/counterV/n6267 , \cm/Counter_Y_4 , \cm/Counter_Y_3 , 
         \cm/counterV/n51 , \cm/counterV/n52 , \cm/counterV/n6266 , 
         \cm/Counter_Y_2 , \cm/Counter_Y_1 , \cm/counterV/n53 , 
         \cm/counterV/n54 , \cm/counterV/n6265 , \cm/Counter_Y_0 , 
         \cm/counterV/n55_adj_1126 , \cm/counterH/Count_intern_reg_5 , 
         \cm/counterH/Count_intern_reg_4 , \cm/counterH/n6173 , 
         \cm/counterH/n6174 , \cm/counterH/Count_intern_reg_3 , 
         \cm/counterH/Count_intern_reg_2 , \cm/configCM/State_nxt_2 , 
         \cm/counterH/n6172 , \cm/configCM/State_reg_2 , 
         \cm/counterH/Count_intern_reg_1 , \cm/counterH/Count_intern_reg_0 , 
         \cm/configCM/State_nxt_1 , \cm/configCM/State_nxt_0 , 
         \cm/configCM/State_reg_0 , \cm/configCM/State_reg_1 , 
         \cm/counterH/n6176 , \cm/counterH/n1429 , \cm/counterH/n6195 , 
         \cm/counterH/n1442 , \cm/counterH/Count_intern_reg_9 , 
         \cm/counterH/Count_intern_reg_8 , \cm/counterH/n6194 , 
         \cm/counterH/Count_intern_reg_7 , \cm/counterH/Count_intern_reg_6 , 
         \cm/H_BackPorch_6 , \cm/counterH/n6193 , \cm/counterH/n6175 , 
         \cm/counterH/n6192 , \cm/configCM/RXD_Data_reg_9 , 
         \cm/configCM/clk_c_enable_45 , \cm/c_data_9 , 
         \cm/counterH/n46_adj_1124 , HSYNC_c, \cm/counterH/n6284 , 
         \cm/counterH/n47_adj_1123 , \cm/counterH/n48_adj_1122 , 
         \cm/counterH/n6283 , \cm/counterH/n49_adj_1121 , 
         \cm/counterH/n50_adj_1120 , \cm/counterH/n6282 , 
         \cm/counterH/n51_adj_1119 , \cm/counterH/n52_adj_1118 , 
         \cm/counterH/n6281 , \cm/counterH/n53_adj_1117 , 
         \cm/counterH/n54_adj_1116 , \cm/counterH/n6280 , 
         \cm/counterH/n55_adj_1115 , \cm/Counter_X_9 , \cm/counterH/n46 , 
         \cm/counterH/n3045 , \cm/counterH/n6279 , \cm/Counter_X_8 , 
         \cm/Counter_X_7 , \cm/counterH/n47 , \cm/counterH/n48 , 
         \cm/counterH/n6278 , \cm/Counter_X_6 , \cm/Counter_X_5 , 
         \cm/counterH/n49 , \cm/counterH/n50 , \cm/counterH/n6277 , 
         \cm/Counter_X_4 , \cm/Counter_X_3 , \cm/counterH/n51 , 
         \cm/counterH/n52 , \cm/counterH/n6276 , \cm/Counter_X_2 , 
         \cm/Counter_X_1 , \cm/counterH/n53 , \cm/counterH/n54 , 
         \cm/counterH/n6275 , \cm/Counter_X_0 , \cm/counterH/n55 , 
         \cm/c_data_3 , c_data_2, \cm/assignCM/clk_c_enable_101 , 
         \cm/assignCM/n6203 , \cm/assignCM/Right_DOWN_reg_2 , 
         \cm/assignCM/Right_DOWN_reg_3 , \cm/assignCM/n6204 , \cm/c_data_11 , 
         \cm/c_data_10 , \cm/assignCM/n6202 , \cm/assignCM/Right_DOWN_reg_10 , 
         \cm/assignCM/Right_DOWN_reg_11 , c_data_1, c_data_0, 
         \cm/assignCM/n6201 , \cm/assignCM/Right_DOWN_reg_0 , 
         \cm/assignCM/Right_DOWN_reg_1 , \cm/c_data_8 , 
         \cm/assignCM/clk_c_enable_139 , \cm/assignCM/Left_UP_reg_8 , 
         \cm/assignCM/Left_UP_reg_9 , \cm/c_data_5 , \cm/c_data_4 , 
         \cm/assignCM/clk_c_enable_112 , \cm/assignCM/n6200 , 
         \cm/assignCM/n521 , \cm/assignCM/Right_UP_reg_4 , 
         \cm/assignCM/Right_UP_reg_5 , \cm/c_data_7 , \cm/c_data_6 , 
         \cm/assignCM/n6199 , \cm/assignCM/Right_DOWN_reg_6 , 
         \cm/assignCM/Right_DOWN_reg_7 , \cm/assignCM/n6198 , 
         \cm/assignCM/Right_UP_reg_2 , \cm/assignCM/Right_UP_reg_3 , 
         \cm/assignCM/n6197 , \cm/assignCM/Right_UP_reg_10 , 
         \cm/assignCM/Right_UP_reg_11 , \cm/assignCM/n6196 , 
         \cm/assignCM/Right_UP_reg_0 , \cm/assignCM/Right_UP_reg_1 , 
         \cm/assignCM/Right_DOWN_reg_8 , \cm/assignCM/Right_DOWN_reg_9 , 
         \cm/assignCM/n6205 , \cm/assignCM/n523 , 
         \cm/assignCM/Right_DOWN_reg_4 , \cm/assignCM/Right_DOWN_reg_5 , 
         \cm/assignCM/Left_UP_reg_6 , \cm/assignCM/Left_UP_reg_7 , 
         counter_23_N_178_9, counter_23, n6229, n1553, counter_22, counter_21, 
         n6228, counter_20, counter_19, n6227, counter_18, counter_17, n6226, 
         counter_16, counter_15, n6225, counter_14, counter_13, n6224, 
         counter_12, counter_11, n6223, counter_10, counter_9, n6222, 
         counter_8, counter_23_N_178_8, counter_7, counter_23_N_178_7, n6221, 
         counter_6, counter_23_N_178_6, counter_5, counter_23_N_178_5, n6220, 
         counter_4, counter_23_N_178_4, counter_3, counter_23_N_178_3, n6219, 
         counter_2, counter_23_N_178_2, counter_1, counter_23_N_178_1, n6218, 
         counter_0, counter_23_N_178_0, Count_h_0, H_left_margin_0, n1417, 
         Count_h_11, \vga/assgncolor/n6246 , 
         \vga/assgncolor/Active_nxt_N_1065 , \vga/H_right_margin_10 , 
         Count_h_10, \vga/H_right_margin_9 , Count_h_9, \vga/assgncolor/n6245 , 
         \vga/H_right_margin_8 , H_right_margin_7, \vga/assgncolor/n6244 , 
         H_right_margin_6, H_right_margin_5, \vga/assgncolor/n6243 , 
         \vga/H_right_margin_4 , H_right_margin_3, \vga/assgncolor/n6242 , 
         \vga/H_right_margin_2 , \vga/H_right_margin_1 , 
         \vga/assgncolor/n6241 , \vga/H_right_margin_0 , Count_v_11, 
         \vga/assgncolor/n6235 , \vga/assgncolor/Active_nxt_N_1067 , 
         Count_v_10, Count_v_9, \vga/V_right_margin_9 , \vga/assgncolor/n6234 , 
         \vga/V_right_margin_8 , Count_v_8, \vga/V_right_margin_7 , Count_v_7, 
         \vga/assgncolor/n6233 , V_right_margin_6, Count_v_6, V_right_margin_5, 
         Count_v_5, \vga/assgncolor/n6232 , V_right_margin_4, Count_v_4, 
         \vga/V_right_margin_3 , Count_v_3, \vga/assgncolor/n6231 , Count_v_2, 
         \vga/V_right_margin_2 , Count_v_1, V_right_margin_1, 
         \vga/assgncolor/n6230 , Count_v_0, \vga/V_right_margin_0 , 
         \vga/CounterV/n6258 , \vga/CounterV/n54 , \vga/CounterV/n6257 , 
         \vga/CounterV/n56 , \vga/CounterV/n55 , \vga/CounterV/n6256 , 
         \vga/CounterV/n58 , \vga/CounterV/n57 , \vga/CounterV/n6255 , 
         \vga/CounterV/n60 , \vga/CounterV/n59 , \vga/CounterV/n6254 , 
         \vga/CounterV/n62 , \vga/CounterV/n61 , \vga/CounterV/n6253 , 
         \vga/CounterV/n64 , \vga/CounterV/n63 , \vga/CounterV/n65 , 
         \vga/V_count_max_11 , \vga/CounterV/n6252 , \vga/CounterV/n1498 , 
         \vga/V_count_max_10 , \vga/V_count_max_9 , \vga/CounterV/n6251 , 
         \vga/V_count_max_8 , \vga/V_count_max_7 , \vga/CounterV/n6250 , 
         V_count_max_6, V_count_max_5, \vga/CounterV/n6249 , V_count_max_4, 
         \vga/V_count_max_3 , \vga/CounterV/n6248 , \vga/V_count_max_2 , 
         \vga/V_count_max_1 , \vga/CounterV/n6247 , \vga/V_count_max_0 , 
         \vga/CounterH/n6261 , \vga/CounterH/n60 , \vga/CounterH/n59 , 
         \vga/CounterH/n6262 , \vga/CounterH/n6260 , \vga/CounterH/n62 , 
         \vga/CounterH/n61 , \vga/H_count_max_11 , \vga/CounterH/n6171 , 
         \vga/CounterH/n1483 , H_count_max_10, \vga/H_count_max_9 , 
         \vga/CounterH/n6170 , \vga/CounterH/n6259 , \vga/CounterH/n64 , 
         \vga/CounterH/n63 , \vga/CounterH/n65 , \vga/H_count_max_8 , 
         \vga/H_count_max_7 , \vga/CounterH/n6169 , \vga/H_count_max_6 , 
         \vga/H_count_max_5 , \vga/CounterH/n6168 , \vga/H_count_max_4 , 
         \vga/H_count_max_3 , \vga/CounterH/n6167 , \vga/H_count_max_2 , 
         \vga/H_count_max_1 , \vga/CounterH/n6166 , \vga/H_count_max_0 , 
         \vga/CounterH/n6264 , \vga/CounterH/n54 , \vga/CounterH/n6263 , 
         \vga/CounterH/n56 , \vga/CounterH/n55 , \vga/CounterH/n58 , 
         \vga/CounterH/n57 , \cd/CNT_UART/n6191 , \cd/baudrate_7 , 
         \cd/CNT_UART/n6190 , \cd/baudrate_6 , \cd/CNT_UART/n6189 , 
         \cd/baudrate_4 , \cd/baudrate_3 , \cd/CNT_UART/n6188 , 
         \cd/baudrate_2 , \cd/baudrate_1 , \cd/CNT_UART/n6187 , 
         \cd/baudrate_0 , \vga/config1/V_Sync_Pulse_nxt_7 , 
         \cd/CNT_UART/n6217 , n102, V_sync_pulse_7, 
         \vga/config1/V_Sync_Pulse_nxt_6 , \vga/config1/V_Sync_Pulse_nxt_5 , 
         \cd/CNT_UART/n6216 , n104, V_sync_pulse_5, n103, V_sync_pulse_6, 
         \vga/config1/V_Sync_Pulse_nxt_4 , \vga/config1/V_Sync_Pulse_nxt_3 , 
         \cd/CNT_UART/n6215 , n106, V_sync_pulse_3, n105, V_sync_pulse_4, 
         \vga/config1/V_Sync_Pulse_nxt_2 , \vga/config1/V_Sync_Pulse_nxt_1 , 
         \cd/CNT_UART/n6214 , n108, V_sync_pulse_1, n107, V_sync_pulse_2, 
         \vga/config1/V_Sync_Pulse_nxt_0 , \vga/config1/V_Right_Margin_nxt_9 , 
         \cd/CNT_UART/n6213 , n110, n109, V_sync_pulse_0, 
         \vga/config1/V_Right_Margin_nxt_8 , 
         \vga/config1/V_Right_Margin_nxt_7 , \cd/CNT_UART/n6212 , n112, n111, 
         \vga/config1/V_Right_Margin_nxt_6 , 
         \vga/config1/V_Right_Margin_nxt_5 , \cd/CNT_UART/n6211 , n114, n113, 
         \vga/config1/V_Right_Margin_nxt_4 , 
         \vga/config1/V_Right_Margin_nxt_3 , \cd/CNT_UART/n6210 , n116, n115, 
         \cd/CNT_UART/n6209 , n118, n117, \cd/CNT_UART/n6208 , n120, n119, 
         \cd/CNT_UART/n6207 , n122, n121, \cd/CNT_UART/n6206 , n124, n123, 
         \vga/config1/V_Right_Margin_nxt_2 , 
         \vga/config1/V_Right_Margin_nxt_1 , n125, \cd/CNT_LM/counter_31 , 
         \vga/config1/V_Count_Max_nxt_9 , \vga/config1/V_Count_Max_nxt_8 , 
         \cd/CNT_LM/n6346 , counter_31__N_85, \cd/CNT_LM/counter_30 , 
         \cd/CNT_LM/counter_29 , \vga/config1/V_Count_Max_nxt_7 , 
         \vga/config1/V_Count_Max_nxt_6 , \cd/CNT_LM/n6345 , 
         \cd/CNT_LM/counter_28 , \cd/CNT_LM/counter_27 , 
         \vga/config1/V_Count_Max_nxt_5 , \vga/config1/V_Count_Max_nxt_4 , 
         \cd/CNT_LM/n6344 , \cd/CNT_LM/counter_26 , \cd/CNT_LM/counter_25 , 
         \vga/config1/V_Count_Max_nxt_3 , \vga/config1/V_Count_Max_nxt_2 , 
         \cd/CNT_LM/n6343 , \cd/CNT_LM/counter_24 , \cd/CNT_LM/counter_23 , 
         \vga/config1/V_Count_Max_nxt_11 , \vga/config1/V_Count_Max_nxt_10 , 
         \cd/CNT_LM/n6342 , \cd/CNT_LM/counter_22 , \cd/CNT_LM/counter_21 , 
         \vga/config1/V_Count_Max_nxt_1 , \vga/config1/V_Count_Max_nxt_0 , 
         \cd/CNT_LM/n6341 , \cd/CNT_LM/counter_20 , \cd/CNT_LM/counter_19 , 
         V_left_margin_2, n7362, \vga/config1/H_Left_Margin_nxt_8__N_967 , 
         \cd/CNT_LM/n6340 , \vga/config1/V_Left_Margin_nxt_2 , 
         \cd/CNT_LM/counter_18 , \cd/CNT_LM/counter_17 , 
         \vga/config1/Load_nxt , \vga/config1/H_Sync_Pulse_nxt_7 , 
         \cd/CNT_LM/n6339 , H_sync_pulse_7, Load_config, 
         \cd/CNT_LM/counter_16 , \cd/CNT_LM/counter_15 , 
         \vga/config1/H_Sync_Pulse_nxt_6 , \vga/config1/H_Sync_Pulse_nxt_5 , 
         \cd/CNT_LM/n6338 , H_sync_pulse_5, H_sync_pulse_6, 
         \cd/CNT_LM/counter_14 , \cd/CNT_LM/counter_13 , 
         \vga/config1/H_Sync_Pulse_nxt_4 , \vga/config1/H_Sync_Pulse_nxt_3 , 
         \cd/CNT_LM/n6337 , H_sync_pulse_3, H_sync_pulse_4, 
         \cd/CNT_LM/counter_12 , \cd/CNT_LM/counter_11 , 
         \vga/config1/H_Sync_Pulse_nxt_2 , \vga/config1/H_Sync_Pulse_nxt_1 , 
         \cd/CNT_LM/n6336 , H_sync_pulse_1, H_sync_pulse_2, 
         \cd/CNT_LM/counter_10 , \cd/CNT_LM/counter_9 , H_sync_pulse_0, 
         \cd/CNT_LM/n6335 , \vga/config1/H_Sync_Pulse_nxt_0 , 
         \cd/CNT_LM/counter_8 , \cd/CNT_LM/counter_7 , 
         \vga/config1/V_Left_Margin_nxt_5 , \vga/config1/V_Left_Margin_nxt_4 , 
         \cd/CNT_LM/n6334 , V_left_margin_4, V_left_margin_5, 
         \cd/CNT_LM/counter_6 , \cd/CNT_LM/counter_5 , 
         \vga/config1/V_Left_Margin_nxt_3 , \cd/CNT_LM/n6333 , V_left_margin_3, 
         \cd/CNT_LM/counter_4 , \cd/CNT_LM/counter_3 , 
         \vga/config1/V_Left_Margin_nxt_1 , \vga/config1/V_Left_Margin_nxt_0 , 
         \cd/CNT_LM/n6332 , V_left_margin_0, V_left_margin_1, 
         \cd/CNT_LM/counter_2 , \cd/CNT_LM/counter_1 , \cd/CNT_LM/counter_0 , 
         \cd/CNT_LM/n134 , \cd/CNT_LM/n6316 , \cd/CNT_LM/n135 , 
         \cd/CNT_LM/n136 , \cd/CNT_LM/n6315 , \cd/CNT_LM/n137 , 
         \cd/CNT_LM/n138 , \cd/CNT_LM/n6314 , \cd/CNT_LM/n139 , 
         \cd/CNT_LM/n140 , \cd/CNT_LM/n6313 , \cd/CNT_LM/n141 , 
         \cd/CNT_LM/n142 , \cd/CNT_LM/n6312 , \cd/CNT_LM/n143 , 
         \cd/CNT_LM/n144 , \cd/CNT_LM/n6311 , \cd/CNT_LM/n145 , 
         \cd/CNT_LM/n146 , \cd/CNT_LM/n6310 , \cd/CNT_LM/n147 , 
         \cd/CNT_LM/n148 , \cd/CNT_LM/n6309 , \cd/CNT_LM/n149 , 
         \cd/CNT_LM/n150 , \cd/CNT_LM/n6308 , \cd/CNT_LM/n151 , 
         \cd/CNT_LM/n152 , \cd/CNT_LM/n6307 , \cd/CNT_LM/n153 , 
         \cd/CNT_LM/n154 , \cd/CNT_LM/n6306 , \cd/CNT_LM/n155 , 
         \cd/CNT_LM/n156 , \cd/CNT_LM/n6305 , \cd/CNT_LM/n157 , 
         \cd/CNT_LM/n158 , \cd/CNT_LM/n6304 , \cd/CNT_LM/n159 , 
         \cd/CNT_LM/n160 , \cd/CNT_LM/n6303 , \cd/CNT_LM/n161 , 
         \cd/CNT_LM/n162 , \cd/CNT_LM/n6302 , \cd/CNT_LM/n163 , 
         \cd/CNT_LM/n164 , \cd/CNT_LM/n6301 , \cd/CNT_LM/n165 , 
         \cd/CNT_DB/counter_31 , \vga/config1/H_Right_Margin_nxt_3 , 
         \vga/config1/H_Right_Margin_nxt_2 , \cd/CNT_DB/n6331 , 
         counter_31__N_85_adj_1144, \cd/CNT_DB/counter_30 , 
         \cd/CNT_DB/counter_29 , \vga/config1/H_Right_Margin_nxt_10 , 
         \vga/config1/H_Right_Margin_nxt_1 , \cd/CNT_DB/n6330 , 
         \cd/CNT_DB/counter_28 , \cd/CNT_DB/counter_27 , \cd/CNT_DB/n6329 , 
         \cd/CNT_DB/counter_26 , \cd/CNT_DB/counter_25 , 
         \vga/config1/H_Right_Margin_nxt_0 , \vga/config1/H_Left_Margin_nxt_8 , 
         \cd/CNT_DB/n6328 , \cd/CNT_DB/counter_24 , \cd/CNT_DB/counter_23 , 
         \vga/config1/H_Left_Margin_nxt_7 , \vga/config1/H_Left_Margin_nxt_6 , 
         \cd/CNT_DB/n6327 , \cd/CNT_DB/counter_22 , \cd/CNT_DB/counter_21 , 
         \vga/config1/H_Left_Margin_nxt_5 , \vga/config1/H_Left_Margin_nxt_4 , 
         \cd/CNT_DB/n6326 , \cd/CNT_DB/counter_20 , \cd/CNT_DB/counter_19 , 
         \vga/config1/H_Left_Margin_nxt_3 , \vga/config1/H_Left_Margin_nxt_2 , 
         \cd/CNT_DB/n6325 , \cd/CNT_DB/counter_18 , \cd/CNT_DB/counter_17 , 
         \cd/CNT_DB/n6324 , \vga/config1/H_Left_Margin_nxt_1 , 
         \cd/CNT_DB/counter_16 , \cd/CNT_DB/counter_15 , 
         \vga/config1/H_Count_Max_nxt_9 , \vga/config1/H_Count_Max_nxt_8 , 
         \cd/CNT_DB/n6323 , \cd/CNT_DB/counter_14 , \cd/CNT_DB/counter_13 , 
         \vga/config1/H_Count_Max_nxt_7 , \vga/config1/H_Count_Max_nxt_6 , 
         \cd/CNT_DB/n6322 , \cd/CNT_DB/counter_12 , \cd/CNT_DB/counter_11 , 
         \vga/config1/H_Count_Max_nxt_5 , \vga/config1/H_Count_Max_nxt_4 , 
         \cd/CNT_DB/n6321 , \cd/CNT_DB/counter_10 , \cd/CNT_DB/counter_9 , 
         \vga/config1/H_Count_Max_nxt_3 , \vga/config1/H_Count_Max_nxt_2 , 
         \cd/CNT_DB/n6320 , \cd/CNT_DB/counter_8 , \cd/CNT_DB/counter_7 , 
         \vga/config1/H_Right_Margin_nxt_9 , 
         \vga/config1/H_Right_Margin_nxt_8 , \cd/CNT_DB/n6319 , 
         \cd/CNT_DB/counter_6 , \cd/CNT_DB/counter_5 , 
         \vga/config1/H_Right_Margin_nxt_7 , 
         \vga/config1/H_Right_Margin_nxt_6 , \cd/CNT_DB/n6318 , 
         \cd/CNT_DB/counter_4 , \cd/CNT_DB/counter_3 , 
         \vga/config1/H_Right_Margin_nxt_5 , 
         \vga/config1/H_Right_Margin_nxt_4 , \cd/CNT_DB/n6317 , 
         \cd/CNT_DB/counter_2 , \cd/CNT_DB/counter_1 , \cd/CNT_DB/counter_0 , 
         \vga/config1/H_Left_Margin_nxt_0 , \cd/CNT_DB/n134 , 
         \cd/CNT_DB/n6300 , \cd/CNT_DB/n135 , \cd/CNT_DB/n136 , 
         \cd/CNT_DB/n6299 , \cd/CNT_DB/n137 , \cd/CNT_DB/n138 , 
         \cd/CNT_DB/n6298 , \cd/CNT_DB/n139 , \cd/CNT_DB/n140 , 
         \cd/CNT_DB/n6297 , \cd/CNT_DB/n141 , \cd/CNT_DB/n142 , 
         \cd/CNT_DB/n6296 , \cd/CNT_DB/n143 , \cd/CNT_DB/n144 , 
         \cd/CNT_DB/n6295 , \cd/CNT_DB/n145 , \cd/CNT_DB/n146 , 
         \cd/CNT_DB/n6294 , \cd/CNT_DB/n147 , \cd/CNT_DB/n148 , 
         \cd/CNT_DB/n6293 , \cd/CNT_DB/n149 , \cd/CNT_DB/n150 , 
         \cd/CNT_DB/n6292 , \cd/CNT_DB/n151 , \cd/CNT_DB/n152 , 
         \cd/CNT_DB/n6291 , \cd/CNT_DB/n153 , \cd/CNT_DB/n154 , 
         \cd/CNT_DB/n6290 , \cd/CNT_DB/n155 , \cd/CNT_DB/n156 , 
         \cd/CNT_DB/n6289 , \cd/CNT_DB/n157 , \cd/CNT_DB/n158 , 
         \cd/CNT_DB/n6288 , \cd/CNT_DB/n159 , \cd/CNT_DB/n160 , 
         \cd/CNT_DB/n6287 , \cd/CNT_DB/n161 , \cd/CNT_DB/n162 , 
         \cd/CNT_DB/n6286 , \cd/CNT_DB/n163 , \cd/CNT_DB/n164 , 
         \cd/CNT_DB/n6285 , \cd/CNT_DB/n165 , \vga/CounterH/n78 , 
         \vga/CounterH/n79 , \vga/Count_h_11__N_948 , \vga/CounterH/n76 , 
         \vga/CounterH/n77 , \vga/CounterH/n74 , \vga/CounterH/n75 , 
         \vga/CounterH/n72 , \vga/CounterH/n73 , \vga/CounterH/n70 , 
         \vga/CounterH/n71 , \vga/CounterH/n68 , \vga/CounterH/n69 , 
         \vga/CounterV/n78 , \vga/CounterV/n79 , \vga/CounterV/n76 , 
         \vga/CounterV/n77 , \vga/CounterV/n74 , \vga/CounterV/n75 , 
         \vga/CounterV/n72 , \vga/CounterV/n73 , \vga/CounterV/n70 , 
         \vga/CounterV/n71 , \vga/CounterV/n68 , \vga/CounterV/n69 , 
         \cm/assignCM/n1092 , \cm/assignCM/Left_UP_reg_0 , \cm/assignCM/n993 , 
         \cm/assignCM/n1078 , \cm/assignCM/Left_DOWN_reg_0 , 
         \cm/assignCM/n922 , \cm/assignCM/n6881 , 
         \cm/assignCM/clk_c_enable_79 , Data_VGA_0, \cm/assignCM/n7332 , 
         \cm/assignCM/n991 , \cm/assignCM/Left_UP_reg_2 , \cm/assignCM/n992 , 
         \cm/assignCM/Left_UP_reg_1 , \cm/assignCM/n920 , \cm/assignCM/n921 , 
         Data_VGA_1, Data_VGA_2, \cm/assignCM/n990 , 
         \cm/assignCM/Left_UP_reg_3 , \cm/assignCM/Left_DOWN_reg_3 , 
         \cm/assignCM/n919 , Data_VGA_3, \cm/assignCM/Left_UP_reg_4 , 
         \cm/assignCM/n7305 , \cm/assignCM/Left_DOWN_reg_4 , 
         \cm/assignCM/n6458 , Data_VGA_4, \cm/assignCM/n987 , 
         \cm/assignCM/n988 , \cm/assignCM/Left_UP_reg_5 , \cm/assignCM/n916 , 
         \cm/assignCM/n917 , Data_VGA_5, Data_VGA_6, \cm/assignCM/n12 , 
         \cm/assignCM/Left_DOWN_reg_7 , \cm/assignCM/Right_UP_reg_7 , 
         \cm/assignCM/n6460 , Data_VGA_7, \cm/assignCM/n984 , 
         \cm/assignCM/n985 , \cm/assignCM/n913 , \cm/assignCM/n914 , 
         Data_VGA_8, Data_VGA_9, \cm/Counter_X_Valid , button_signal_DEBUG_VGA, 
         \cm/Counter_Y_Valid , \cm/assignCM/Left_UP_reg_10 , 
         \cm/assignCM/n983 , \cm/assignCM/n912 , Data_VGA_10, \cm/assignCM/n9 , 
         \cm/assignCM/Left_UP_reg_11 , \cm/assignCM/Left_DOWN_reg_11 , 
         \cm/assignCM/n911 , Data_VGA_11, clk_UART, \FIFO_UART_CM/n7357 , 
         button_signal_DEBUG_UART, UART_valid_out, \FIFO_UART_CM/w_empty_reg , 
         \FIFO_UART_CM/clk_c_enable_61 , n6758, n1112, \vga/CounterH/n1769 , 
         \uart/clk_c_enable_67 , n7345, \uart/UART_STATE/n376 , UART_out_1, 
         UART_out_0, \uart/UART_STATE/n3073 , \uart/UART_STATE/n3071 , 
         clk_c_enable_155, \uart/UART_STATE/error_1__N_334 , UART_out_2, 
         UART_out_3, \uart/UART_STATE/n3077 , \uart/UART_STATE/n3075 , 
         UART_out_4, UART_out_5, \uart/UART_STATE/n3081 , 
         \uart/UART_STATE/n3079 , UART_out_6, valid_data, 
         \uart/UART_STATE/n3083 , \uart/data , UART_out_7, 
         \uart/UART_STATE/wait_iteration_step_reg_0 , 
         \uart/UART_STATE/wait_iteration_step_reg_1 , n374, 
         \uart/UART_STATE/n7349 , \uart/UART_STATE/n6370 , 
         \uart/UART_STATE/clk_UART_enable_5 , n6752, n1115, 
         \vga/CounterV/n1767 , c_valid, \cd/CLOCK_DIVIDER_CONFIG/n7327 , 
         c_addr_3, c_addr_0, c_addr_2, c_addr_1, clk_VGA, c_UART_ready, 
         \cd/CLOCK_DIVIDER_CONFIG/n3067 , n7361, 
         \cd/CLOCK_DIVIDER_CONFIG/n7340 , n3880, c_VGA_ready, n7325, 
         \cm/configCM/n7351 , \cm/configCM/RXD_Data_reg_15 , 
         \cm/configCM/RXD_Data_reg_11 , \cm/configCM/n6426 , 
         \cm/configCM/clk_c_enable_148 , \cm/configCM/n7339 , 
         \cm/configCM/RXD_Data_reg_13 , \cm/configCM/RXD_Data_reg_12 , 
         \cm/configCM/RXD_Data_reg_14 , \cm/configCM/n2883 , 
         \cm/configCM/n1194 , \cm/configCM/n3058 , \cm/configCM/n7352 , 
         \cm/configCM/n1660 , \cm/configCM/n7328 , \cm/configCM/n6714 , 
         \cm/configCM/n2666 , \cm/configCM/RXD_Data_reg_0 , 
         \cm/configCM/n7312 , \cm/configCM/RXD_Data_reg_8 , 
         \cm/configCM/c_data_nxt_13_N_515_0 , \cm/configCM/clk_c_enable_146 , 
         \cm/configCM/RXD_Data_reg_1 , \cm/configCM/n3001 , 
         \cm/configCM/n7311 , \cm/configCM/c_data_nxt_13_N_515_1 , 
         \cm/configCM/clk_c_enable_129 , \cm/configCM/RXD_Data_reg_10 , 
         \cm/configCM/n7330 , \cm/configCM/n8 , \cm/configCM/n7 , 
         \cm/configCM/RXD_Data_reg_2 , \cm/configCM/c_data_nxt_13_N_515_2 , 
         \cm/configCM/clk_c_enable_141 , c_ready_next_N_344, c_ready_1, n7353, 
         \cm/c_ready_Assign , \cm/n6 , \cm/c_addr_3__N_468 , 
         \cm/configCM/n6390 , 
         \cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_1 , 
         baudrate_next_23_N_262_0, \cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 , 
         \cd/CLOCK_DIVIDER_CONFIG/n7354 , 
         \cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 , 
         \cd/CLOCK_DIVIDER_CONFIG/n3069 , \cd/CLOCK_DIVIDER_CONFIG/n7344 , 
         button_ff, clk_DB, btnVS_c, \cd/CNT_DB/clkout_N_118 , n3055, clk_LM, 
         \cd/CNT_LM/clkout_N_118 , \vga/config1/V_Right_Margin_nxt_0 , 
         \FIFO_UART_CM/clk_c_enable_158 , clkout_N_203, 
         \cd/CNT_UART/clk_UART_N_18 , \cm/counterH/n7322 , \cm/counterV/n7321 , 
         n7358, H_BackPorch_nxt_7_N_772_3, clk_c_enable_89, 
         \cm/assignCM/n7355 , H_Count_Max_nxt_11__N_1021, 
         H_Left_Margin_nxt_8__N_957, button_signal_VS, button_signal_HS, 
         \cm/assignCM/Current_Qudran_Config_nxt_1_N_755_1 , 
         \cm/assignCM/Current_Qudran_Config_nxt_1_N_755_0 , 
         \cm/assignCM/clk_c_enable_90 , 
         \cm/assignCM/Current_Qudran_Config_reg_0 , 
         \cm/assignCM/Current_Qudran_Config_reg_1 , n2589, 
         H_BackPorch_nxt_7__N_780, \vga/config1/c_data_1_derived_1 , n7326, 
         c_ready_nxt_N_904, \cm/configCM/State_nxt_2_N_472_1 , 
         UART_out_CM_data_empty, \cm/configCM/State_nxt_2__N_481 , 
         \cm/configCM/State_nxt_2__N_486 , \cm/configCM/n2884 , 
         \cm/configCM/n3038 , \cm/configCM/State_nxt_2__N_471 , 
         \cm/configCM/n2874 , \cm/configCM/Err_nxt_N_610 , \cm/configCM/n7343 , 
         n150, n151, n148, n149, n146, n147, n144, n145, n142, n143, n140, 
         n141, n138, n139, n136, n137, n134, n135, n132, n133, n130, n131, 
         n128, n129, \db/DB_VS/n2 , ctr_ff_1, \db/DB_VS/n14 , clk_c_enable_142, 
         \db/DB_DF_UART/n2 , ctr_ff_1_adj_1145, \db/DB_DF_UART/n14 , 
         clk_c_enable_143, n3053, \db/DB_DF_VGA/n2 , ctr_ff_1_adj_1147, 
         \db/DB_DF_VGA/n14 , clk_c_enable_144, n3051, \db/DB_HS/n2 , 
         ctr_ff_1_adj_1153, \db/DB_HS/n14 , clk_c_enable_34, n3042, 
         \db/DB_DF_UART/n15 , \db/DB_DF_VGA/n15 , \db/DB_HS/n15 , 
         \db/DB_VS/n15 , \uart/SAMPLER/nr_1_reg_0 , in_c, flag_reg, 
         \uart/SAMPLER/flag_next , \uart/clk_UART_enable_2 , 
         \uart/SAMPLER/n7372 , n375, \uart/UART_STATE/n3949 , 
         \uart/UART_STATE/n7313 , \uart/UART_STATE/n7207 , 
         \uart/UART_STATE/n1943 , \uart/UART_STATE/n6604 , 
         \uart/SAMPLER/nr_0_reg_0 , \uart/SAMPLER/nr_0_reg_1 , 
         \uart/SAMPLER/n24_adj_1107 , \uart/SAMPLER/n7363 , clk_c_enable_32, 
         \uart/SAMPLER/n3047 , \uart/SAMPLER/nr_0_reg_3 , 
         \uart/SAMPLER/nr_0_reg_2 , \uart/SAMPLER/n22_adj_1105 , 
         \uart/SAMPLER/n23_adj_1106 , \uart/SAMPLER/nr_1_reg_1 , 
         \uart/SAMPLER/n24 , \uart/SAMPLER/n25 , clk_c_enable_147, 
         \uart/SAMPLER/n3049 , \uart/SAMPLER/nr_1_reg_3 , 
         \uart/SAMPLER/nr_1_reg_2 , \uart/SAMPLER/n22 , \uart/SAMPLER/n23 , 
         \uart/SAMPLER/val_reg_0 , \uart/SAMPLER/val_reg_1 , 
         \uart/SAMPLER/n24_adj_1109 , \uart/SAMPLER/n25_adj_1108 , 
         clk_c_enable_153, \uart/SAMPLER/val_reg_2 , \uart/SAMPLER/val_reg_3 , 
         \uart/SAMPLER/n22_adj_1111 , \uart/SAMPLER/n23_adj_1110 , 
         \uart/UART_STATE/data_iteration_step_reg_0 , 
         \uart/UART_STATE/data_iteration_step_reg_1 , \uart/UART_STATE/n24 , 
         \uart/UART_STATE/n25 , \uart/UART_STATE/data_iteration_step_reg_2 , 
         \uart/UART_STATE/n23 , \uart/UART_STATE/n4 , 
         \uart/UART_STATE/valid_error_next_N_409 , \uart/UART_STATE/n378 , 
         \uart/UART_STATE/n2843 , \uart/UART_STATE/n1945 , \uart/stopbit , 
         \uart/UART_STATE/parity_check_reg , 
         \uart/UART_STATE/parity_check_next_N_414 , 
         \uart/UART_STATE/clk_UART_enable_4 , \uart/UART_STATE/n7194 , 
         \uart/UART_STATE/stop_iteration_step_reg_0 , 
         \uart/UART_STATE/stop_iteration_step_reg_1 , \uart/UART_STATE/n18 , 
         \uart/UART_STATE/n19 , clk_c_enable_156, \uart/UART_STATE/n7348 , 
         \uart/paritybit , \uart/UART_STATE/n356 , \uart/UART_STATE/n415 , 
         \uart/UART_STATE/n6572 , \uart/UART_STATE/n15 , clk_c_enable_62, 
         \uart/UART_STATE/n1773 , \uart/UART_STATE/clk_UART_enable_1 , 
         \uart/UART_valid_error , \uart/SAMPLER/out_next_N_447 , 
         \uart/SAMPLER/n6864 , \uart/clk_UART_enable_3 , out_next_N_449, n7, 
         \vga/assgncolor/n6 , Active_nxt_N_1066, \vga/assgncolor/Active_nxt , 
         \vga/assgncolor/Active_reg , \vga/config1/H_Count_Max_nxt_11__N_1024 , 
         \vga/config1/H_Count_Max_nxt_11__N_1020 , 
         \vga/config1/H_Count_Max_nxt_11__N_1022 , H_Count_Max_nxt_11__N_1018, 
         \vga/config1/H_Count_Max_nxt_11__N_1019 , 
         \vga/config1/H_Count_Max_nxt_10 , 
         \vga/config1/H_Count_Max_nxt_11__N_1017 , 
         \vga/config1/H_Count_Max_nxt_11 , 
         \vga/config1/H_Left_Margin_nxt_8__N_962 , H_Left_Margin_nxt_8__N_963, 
         \vga/config1/H_Left_Margin_nxt_8__N_960 , 
         \vga/config1/H_Left_Margin_nxt_8__N_961 , 
         \vga/config1/H_Left_Margin_nxt_8__N_956 , H_Left_Margin_nxt_8__N_958, 
         \vga/config1/H_Left_Margin_nxt_8__N_952 , 
         \vga/config1/H_Right_Margin_nxt_10__N_986 , 
         H_Right_Margin_nxt_10__N_987, H_Right_Margin_nxt_10__N_984, 
         H_Right_Margin_nxt_10__N_985, 
         \vga/config1/H_Right_Margin_nxt_10__N_982 , 
         H_Right_Margin_nxt_10__N_983, 
         \vga/config1/H_Right_Margin_nxt_10__N_980 , 
         \vga/config1/H_Right_Margin_nxt_10__N_981 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1006 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1007 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1004 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1005 , 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1002 , H_Sync_Pulse_nxt_7__N_1003, 
         \vga/config1/H_Sync_Pulse_nxt_7__N_1001 , 
         \vga/config1/Load_nxt_N_1042 , 
         \vga/config1/V_Count_Max_nxt_11__N_1039 , 
         \vga/config1/V_Count_Max_nxt_11__N_1040 , V_Count_Max_nxt_11__N_1037, 
         \vga/config1/V_Count_Max_nxt_11__N_1038 , V_Count_Max_nxt_11__N_1035, 
         V_Count_Max_nxt_11__N_1036, \vga/config1/V_Count_Max_nxt_11__N_1032 , 
         \vga/config1/V_Count_Max_nxt_11__N_1033 , V_Left_Margin_nxt_5__N_976, 
         \vga/config1/V_Left_Margin_nxt_5__N_978 , V_Left_Margin_nxt_5__N_973, 
         V_Left_Margin_nxt_5__N_974, \vga/config1/V_Left_Margin_nxt_5__N_971 , 
         n7367, V_Right_Margin_nxt_9__N_999, 
         \vga/config1/V_Right_Margin_nxt_9__N_1000 , VCC_net, GND_net, 
         V_Right_Margin_nxt_9__N_995, V_Right_Margin_nxt_9__N_996, 
         V_Right_Margin_nxt_9__N_994, rst_n_c, 
         \vga/config1/V_Right_Margin_nxt_9__N_991 , 
         \vga/config1/V_Right_Margin_nxt_9__N_992 , n7375, 
         \vga/config1/V_Sync_Pulse_nxt_7__N_1014 , V_Sync_Pulse_nxt_7__N_1015, 
         n4, \FIFO_UART_CM/clk_LM_enable_1 , n5, n4_adj_1143, n12_adj_1139, 
         n7366, n6895, n6_adj_1142, n6898, n12, n7376, n6915, n6, n6918, 
         \cm/configCM/n3000 , \cm/assignCM/Right_UP_reg_9 , 
         \cm/assignCM/Left_DOWN_reg_9 , \cm/assignCM/n1086 , 
         \cm/assignCM/Right_UP_reg_8 , \cm/assignCM/Left_DOWN_reg_8 , 
         \cm/assignCM/Left_DOWN_reg_6 , \cm/assignCM/Right_UP_reg_6 , 
         \cm/assignCM/Left_DOWN_reg_5 , \cm/assignCM/Left_DOWN_reg_2 , 
         \cm/assignCM/Left_DOWN_reg_1 , \cm/assignCM/n6827 , 
         \cm/assignCM/Left_DOWN_reg_10 , n4_adj_1152, n6_adj_1151, n6874, 
         n1121, \cm/configCM/n6848 , UART_out_CM_data_7, UART_out_CM_data_6, 
         \cm/configCM/clk_c_enable_54 , \cm/configCM/n6775 , 
         \cm/configCM/n7222 , \cm/configCM/n7223 , 
         \cm/configCM/RXD_Data_reg_7 , \cm/configCM/n7331 , 
         \cm/configCM/n7373 , UART_out_CM_data_1, UART_out_CM_data_0, 
         \cm/configCM/clk_c_enable_157 , \cm/assignCM/n8 , n7319, btnHS_c, 
         button_ff_adj_1154, n7318, n6904, n7377, n7374, n7066, 
         button_ff_adj_1148, n7356, n7329, n7369, n7368, n7334, n7320, 
         button_ff_adj_1146, n7365, n7364, n7370, n6884, n6979, 
         \cm/configCM/RXD_Data_reg_4 , \cm/configCM/RXD_Data_reg_3 , 
         UART_out_CM_data_5, UART_out_CM_data_4, UART_out_CM_data_3, 
         UART_out_CM_data_2, \cm/configCM/n7371 , \cm/configCM/n6801 , 
         \cm/configCM/RXD_Data_reg_6 , \cm/configCM/n6835 , 
         \cm/configCM/RXD_Data_reg_5 , \cm/configCM/n7350 , 
         \cm/configCM/n6755 , \cm/assignCM/clk_c_enable_123 , 
         \cm/assignCM/n3701 , \cm/assignCM/Current_Qudran_Config_nxt_1__N_884 , 
         \cm/c_data_13 , \cm/c_data_12 , n7360, clk_VGA_enable_1, n7338, 
         \uart/UART_STATE/n7342 , \uart/UART_STATE/n7195 , 
         \uart/UART_STATE/n7206 , \uart/UART_CONFIG/clk_VGA_enable_2 , 
         n10_adj_1140, n10, \FIFO_UART_CM/w_data_reg_1 , 
         \FIFO_UART_CM/w_data_reg_0 , \cd/CLOCK_DIVIDER_CONFIG/n3068 , 
         \FIFO_UART_CM/w_data_reg_6 , \FIFO_UART_CM/w_data_reg_7 , 
         \vga/config1/H_Count_Max_nxt_0 , \vga/config1/H_Count_Max_nxt_1 , 
         btnUART_c, btnVGA_c, \FIFO_UART_CM/w_data_reg_4 , 
         \FIFO_UART_CM/w_data_reg_5 , \FIFO_UART_CM/w_data_reg_3 , 
         \FIFO_UART_CM/w_data_reg_2 , GREEN_c_0, RED_c_3, BLUE_c_2, RED_c_2, 
         BLUE_c_1, RED_c_1, BLUE_c_0, RED_c_0, GREEN_c_1, GREEN_c_3, BLUE_c_3, 
         GREEN_c_2, \basic_4OUT_PLL/CLKFB_t ;

  SLICE_0 SLICE_0( .B1(H_left_margin_4), .A1(Count_h_4), .B0(H_left_margin_3), 
    .A0(Count_h_3), .FCI(n6178), .FCO(n6179));
  SLICE_1 SLICE_1( .B1(Count_h_2), .A1(H_left_margin_2), .B0(Count_h_1), 
    .A0(H_left_margin_1), .FCI(n6177), .FCO(n6178));
  SLICE_2 SLICE_2( .B1(Count_h_6), .A1(H_left_margin_6), .B0(H_left_margin_5), 
    .A0(Count_h_5), .FCI(n6179), .FCO(n6180));
  SLICE_3 SLICE_3( .B1(Count_h_8), .A1(H_left_margin_8), .B0(Count_h_7), 
    .A0(H_left_margin_7), .FCI(n6180), .FCO(n6181));
  cm_counterV_SLICE_4 \cm/counterV/SLICE_4 ( .FCI(\cm/counterV/n6240 ), 
    .F0(\cm/counterV/n1455 ));
  cm_counterV_SLICE_5 \cm/counterV/SLICE_5 ( 
    .B1(\cm/counterV/Count_intern_reg_9 ), .A1(\cm/H_BackPorch_4 ), 
    .B0(\cm/H_BackPorch_5 ), .A0(\cm/counterV/Count_intern_reg_8 ), 
    .FCI(\cm/counterV/n6239 ), .FCO(\cm/counterV/n6240 ));
  cm_counterV_SLICE_6 \cm/counterV/SLICE_6 ( 
    .B1(\cm/counterV/Count_intern_reg_7 ), .A1(\cm/H_BackPorch_3 ), 
    .A0(\cm/counterV/Count_intern_reg_6 ), .FCI(\cm/counterV/n6238 ), 
    .FCO(\cm/counterV/n6239 ));
  cm_counterV_SLICE_7 \cm/counterV/SLICE_7 ( 
    .B1(\cm/counterV/Count_intern_reg_5 ), .A1(\cm/H_BackPorch_7 ), 
    .A0(\cm/counterV/Count_intern_reg_4 ), .FCI(\cm/counterV/n6237 ), 
    .FCO(\cm/counterV/n6238 ));
  cm_counterV_SLICE_8 \cm/counterV/SLICE_8 ( 
    .B1(\cm/counterV/Count_intern_reg_3 ), .A1(\cm/H_BackPorch_3 ), 
    .A0(\cm/counterV/Count_intern_reg_2 ), .FCI(\cm/counterV/n6236 ), 
    .FCO(\cm/counterV/n6237 ));
  cm_counterV_SLICE_9 \cm/counterV/SLICE_9 ( 
    .A1(\cm/counterV/Count_intern_reg_1 ), 
    .A0(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n6236 ));
  cm_counterV_SLICE_10 \cm/counterV/SLICE_10 ( 
    .A0(\cm/counterV/Count_intern_reg_9 ), .FCI(\cm/counterV/n6186 ), 
    .F1(\cm/counterV/n1468 ));
  cm_counterV_SLICE_11 \cm/counterV/SLICE_11 ( 
    .A1(\cm/counterV/Count_intern_reg_8 ), 
    .A0(\cm/counterV/Count_intern_reg_7 ), .FCI(\cm/counterV/n6185 ), 
    .FCO(\cm/counterV/n6186 ));
  cm_counterV_SLICE_12 \cm/counterV/SLICE_12 ( 
    .A1(\cm/counterV/Count_intern_reg_6 ), 
    .A0(\cm/counterV/Count_intern_reg_5 ), .FCI(\cm/counterV/n6184 ), 
    .FCO(\cm/counterV/n6185 ));
  cm_counterV_SLICE_13 \cm/counterV/SLICE_13 ( 
    .A1(\cm/counterV/Count_intern_reg_4 ), 
    .B0(\cm/counterV/Count_intern_reg_3 ), .A0(\cm/H_BackPorch_3 ), 
    .FCI(\cm/counterV/n6183 ), .FCO(\cm/counterV/n6184 ));
  cm_counterV_SLICE_14 \cm/counterV/SLICE_14 ( 
    .A1(\cm/counterV/Count_intern_reg_2 ), .B0(\cm/V_BackPorch_1 ), 
    .A0(\cm/counterV/Count_intern_reg_1 ), .FCI(\cm/counterV/n6182 ), 
    .FCO(\cm/counterV/n6183 ));
  cm_counterV_SLICE_15 \cm/counterV/SLICE_15 ( 
    .A1(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n6182 ));
  cm_counterV_SLICE_16 \cm/counterV/SLICE_16 ( 
    .A0(\cm/counterV/Count_intern_reg_9 ), .DI0(\cm/counterV/n46_adj_1135 ), 
    .LSR(VSYNC_c), .CLK(clk_c), .FCI(\cm/counterV/n6274 ), 
    .F0(\cm/counterV/n46_adj_1135 ), .Q0(\cm/counterV/Count_intern_reg_9 ));
  cm_counterV_SLICE_17 \cm/counterV/SLICE_17 ( 
    .A1(\cm/counterV/Count_intern_reg_8 ), 
    .A0(\cm/counterV/Count_intern_reg_7 ), .DI1(\cm/counterV/n47_adj_1134 ), 
    .DI0(\cm/counterV/n48_adj_1133 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n6273 ), .F0(\cm/counterV/n48_adj_1133 ), 
    .Q0(\cm/counterV/Count_intern_reg_7 ), .F1(\cm/counterV/n47_adj_1134 ), 
    .Q1(\cm/counterV/Count_intern_reg_8 ), .FCO(\cm/counterV/n6274 ));
  cm_counterV_SLICE_18 \cm/counterV/SLICE_18 ( 
    .A1(\cm/counterV/Count_intern_reg_6 ), 
    .A0(\cm/counterV/Count_intern_reg_5 ), .DI1(\cm/counterV/n49_adj_1132 ), 
    .DI0(\cm/counterV/n50_adj_1131 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n6272 ), .F0(\cm/counterV/n50_adj_1131 ), 
    .Q0(\cm/counterV/Count_intern_reg_5 ), .F1(\cm/counterV/n49_adj_1132 ), 
    .Q1(\cm/counterV/Count_intern_reg_6 ), .FCO(\cm/counterV/n6273 ));
  cm_counterV_SLICE_19 \cm/counterV/SLICE_19 ( 
    .A1(\cm/counterV/Count_intern_reg_4 ), 
    .A0(\cm/counterV/Count_intern_reg_3 ), .DI1(\cm/counterV/n51_adj_1130 ), 
    .DI0(\cm/counterV/n52_adj_1129 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n6271 ), .F0(\cm/counterV/n52_adj_1129 ), 
    .Q0(\cm/counterV/Count_intern_reg_3 ), .F1(\cm/counterV/n51_adj_1130 ), 
    .Q1(\cm/counterV/Count_intern_reg_4 ), .FCO(\cm/counterV/n6272 ));
  cm_counterV_SLICE_20 \cm/counterV/SLICE_20 ( 
    .A1(\cm/counterV/Count_intern_reg_2 ), 
    .A0(\cm/counterV/Count_intern_reg_1 ), .DI1(\cm/counterV/n53_adj_1128 ), 
    .DI0(\cm/counterV/n54_adj_1127 ), .LSR(VSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterV/n6270 ), .F0(\cm/counterV/n54_adj_1127 ), 
    .Q0(\cm/counterV/Count_intern_reg_1 ), .F1(\cm/counterV/n53_adj_1128 ), 
    .Q1(\cm/counterV/Count_intern_reg_2 ), .FCO(\cm/counterV/n6271 ));
  cm_counterV_SLICE_21 \cm/counterV/SLICE_21 ( 
    .A1(\cm/counterV/Count_intern_reg_0 ), .DI1(\cm/counterV/n55 ), 
    .LSR(VSYNC_c), .CLK(clk_c), .F1(\cm/counterV/n55 ), 
    .Q1(\cm/counterV/Count_intern_reg_0 ), .FCO(\cm/counterV/n6270 ));
  cm_counterV_SLICE_22 \cm/counterV/SLICE_22 ( .A0(\cm/Counter_Y_9 ), 
    .DI0(\cm/counterV/n46 ), .LSR(\cm/counterV/n3043 ), .CLK(clk_c), 
    .FCI(\cm/counterV/n6269 ), .F0(\cm/counterV/n46 ), .Q0(\cm/Counter_Y_9 ));
  cm_counterV_SLICE_23 \cm/counterV/SLICE_23 ( .A1(\cm/Counter_Y_8 ), 
    .A0(\cm/Counter_Y_7 ), .DI1(\cm/counterV/n47 ), .DI0(\cm/counterV/n48 ), 
    .LSR(\cm/counterV/n3043 ), .CLK(clk_c), .FCI(\cm/counterV/n6268 ), 
    .F0(\cm/counterV/n48 ), .Q0(\cm/Counter_Y_7 ), .F1(\cm/counterV/n47 ), 
    .Q1(\cm/Counter_Y_8 ), .FCO(\cm/counterV/n6269 ));
  cm_counterV_SLICE_24 \cm/counterV/SLICE_24 ( .A1(\cm/Counter_Y_6 ), 
    .A0(\cm/Counter_Y_5 ), .DI1(\cm/counterV/n49 ), .DI0(\cm/counterV/n50 ), 
    .LSR(\cm/counterV/n3043 ), .CLK(clk_c), .FCI(\cm/counterV/n6267 ), 
    .F0(\cm/counterV/n50 ), .Q0(\cm/Counter_Y_5 ), .F1(\cm/counterV/n49 ), 
    .Q1(\cm/Counter_Y_6 ), .FCO(\cm/counterV/n6268 ));
  cm_counterV_SLICE_25 \cm/counterV/SLICE_25 ( .A1(\cm/Counter_Y_4 ), 
    .A0(\cm/Counter_Y_3 ), .DI1(\cm/counterV/n51 ), .DI0(\cm/counterV/n52 ), 
    .LSR(\cm/counterV/n3043 ), .CLK(clk_c), .FCI(\cm/counterV/n6266 ), 
    .F0(\cm/counterV/n52 ), .Q0(\cm/Counter_Y_3 ), .F1(\cm/counterV/n51 ), 
    .Q1(\cm/Counter_Y_4 ), .FCO(\cm/counterV/n6267 ));
  cm_counterV_SLICE_26 \cm/counterV/SLICE_26 ( .A1(\cm/Counter_Y_2 ), 
    .A0(\cm/Counter_Y_1 ), .DI1(\cm/counterV/n53 ), .DI0(\cm/counterV/n54 ), 
    .LSR(\cm/counterV/n3043 ), .CLK(clk_c), .FCI(\cm/counterV/n6265 ), 
    .F0(\cm/counterV/n54 ), .Q0(\cm/Counter_Y_1 ), .F1(\cm/counterV/n53 ), 
    .Q1(\cm/Counter_Y_2 ), .FCO(\cm/counterV/n6266 ));
  cm_counterV_SLICE_27 \cm/counterV/SLICE_27 ( .A1(\cm/Counter_Y_0 ), 
    .DI1(\cm/counterV/n55_adj_1126 ), .LSR(\cm/counterV/n3043 ), .CLK(clk_c), 
    .F1(\cm/counterV/n55_adj_1126 ), .Q1(\cm/Counter_Y_0 ), 
    .FCO(\cm/counterV/n6265 ));
  cm_counterH_SLICE_28 \cm/counterH/SLICE_28 ( 
    .B1(\cm/counterH/Count_intern_reg_5 ), .A1(\cm/H_BackPorch_3 ), 
    .A0(\cm/counterH/Count_intern_reg_4 ), .FCI(\cm/counterH/n6173 ), 
    .FCO(\cm/counterH/n6174 ));
  cm_SLICE_29 \cm/SLICE_29 ( .A1(\cm/counterH/Count_intern_reg_3 ), 
    .A0(\cm/counterH/Count_intern_reg_2 ), .M0(\cm/configCM/State_nxt_2 ), 
    .CLK(clk_c), .FCI(\cm/counterH/n6172 ), .Q0(\cm/configCM/State_reg_2 ), 
    .FCO(\cm/counterH/n6173 ));
  cm_SLICE_30 \cm/SLICE_30 ( .B1(\cm/counterH/Count_intern_reg_1 ), 
    .A0(\cm/counterH/Count_intern_reg_0 ), .M1(\cm/configCM/State_nxt_1 ), 
    .M0(\cm/configCM/State_nxt_0 ), .CLK(clk_c), 
    .Q0(\cm/configCM/State_reg_0 ), .Q1(\cm/configCM/State_reg_1 ), 
    .FCO(\cm/counterH/n6172 ));
  cm_counterH_SLICE_31 \cm/counterH/SLICE_31 ( .FCI(\cm/counterH/n6176 ), 
    .F0(\cm/counterH/n1429 ));
  cm_counterH_SLICE_32 \cm/counterH/SLICE_32 ( .FCI(\cm/counterH/n6195 ), 
    .F0(\cm/counterH/n1442 ));
  cm_counterH_SLICE_33 \cm/counterH/SLICE_33 ( 
    .B1(\cm/counterH/Count_intern_reg_9 ), 
    .B0(\cm/counterH/Count_intern_reg_8 ), .FCI(\cm/counterH/n6194 ), 
    .FCO(\cm/counterH/n6195 ));
  cm_counterH_SLICE_34 \cm/counterH/SLICE_34 ( 
    .B1(\cm/counterH/Count_intern_reg_7 ), .A1(\cm/H_BackPorch_7 ), 
    .B0(\cm/counterH/Count_intern_reg_6 ), .A0(\cm/H_BackPorch_6 ), 
    .FCI(\cm/counterH/n6193 ), .FCO(\cm/counterH/n6194 ));
  cm_counterH_SLICE_35 \cm/counterH/SLICE_35 ( .B1(\cm/H_BackPorch_7 ), 
    .A1(\cm/counterH/Count_intern_reg_7 ), 
    .B0(\cm/counterH/Count_intern_reg_6 ), .A0(\cm/H_BackPorch_3 ), 
    .FCI(\cm/counterH/n6174 ), .FCO(\cm/counterH/n6175 ));
  cm_counterH_SLICE_36 \cm/counterH/SLICE_36 ( 
    .B1(\cm/counterH/Count_intern_reg_5 ), .A1(\cm/H_BackPorch_5 ), 
    .B0(\cm/counterH/Count_intern_reg_4 ), .A0(\cm/H_BackPorch_4 ), 
    .FCI(\cm/counterH/n6192 ), .FCO(\cm/counterH/n6193 ));
  cm_counterH_SLICE_37 \cm/counterH/SLICE_37 ( 
    .B1(\cm/counterH/Count_intern_reg_3 ), .A1(\cm/H_BackPorch_3 ), 
    .FCO(\cm/counterH/n6192 ));
  cm_SLICE_38 \cm/SLICE_38 ( .B1(\cm/counterH/Count_intern_reg_9 ), 
    .B0(\cm/counterH/Count_intern_reg_8 ), .A0(\cm/H_BackPorch_4 ), 
    .M0(\cm/configCM/RXD_Data_reg_9 ), .CE(\cm/configCM/clk_c_enable_45 ), 
    .CLK(clk_c), .FCI(\cm/counterH/n6175 ), .Q0(\cm/c_data_9 ), 
    .FCO(\cm/counterH/n6176 ));
  cm_counterH_SLICE_39 \cm/counterH/SLICE_39 ( 
    .A0(\cm/counterH/Count_intern_reg_9 ), .DI0(\cm/counterH/n46_adj_1124 ), 
    .LSR(HSYNC_c), .CLK(clk_c), .FCI(\cm/counterH/n6284 ), 
    .F0(\cm/counterH/n46_adj_1124 ), .Q0(\cm/counterH/Count_intern_reg_9 ));
  cm_counterH_SLICE_40 \cm/counterH/SLICE_40 ( 
    .A1(\cm/counterH/Count_intern_reg_8 ), 
    .A0(\cm/counterH/Count_intern_reg_7 ), .DI1(\cm/counterH/n47_adj_1123 ), 
    .DI0(\cm/counterH/n48_adj_1122 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n6283 ), .F0(\cm/counterH/n48_adj_1122 ), 
    .Q0(\cm/counterH/Count_intern_reg_7 ), .F1(\cm/counterH/n47_adj_1123 ), 
    .Q1(\cm/counterH/Count_intern_reg_8 ), .FCO(\cm/counterH/n6284 ));
  cm_counterH_SLICE_41 \cm/counterH/SLICE_41 ( 
    .A1(\cm/counterH/Count_intern_reg_6 ), 
    .A0(\cm/counterH/Count_intern_reg_5 ), .DI1(\cm/counterH/n49_adj_1121 ), 
    .DI0(\cm/counterH/n50_adj_1120 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n6282 ), .F0(\cm/counterH/n50_adj_1120 ), 
    .Q0(\cm/counterH/Count_intern_reg_5 ), .F1(\cm/counterH/n49_adj_1121 ), 
    .Q1(\cm/counterH/Count_intern_reg_6 ), .FCO(\cm/counterH/n6283 ));
  cm_counterH_SLICE_42 \cm/counterH/SLICE_42 ( 
    .A1(\cm/counterH/Count_intern_reg_4 ), 
    .A0(\cm/counterH/Count_intern_reg_3 ), .DI1(\cm/counterH/n51_adj_1119 ), 
    .DI0(\cm/counterH/n52_adj_1118 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n6281 ), .F0(\cm/counterH/n52_adj_1118 ), 
    .Q0(\cm/counterH/Count_intern_reg_3 ), .F1(\cm/counterH/n51_adj_1119 ), 
    .Q1(\cm/counterH/Count_intern_reg_4 ), .FCO(\cm/counterH/n6282 ));
  cm_counterH_SLICE_43 \cm/counterH/SLICE_43 ( 
    .A1(\cm/counterH/Count_intern_reg_2 ), 
    .A0(\cm/counterH/Count_intern_reg_1 ), .DI1(\cm/counterH/n53_adj_1117 ), 
    .DI0(\cm/counterH/n54_adj_1116 ), .LSR(HSYNC_c), .CLK(clk_c), 
    .FCI(\cm/counterH/n6280 ), .F0(\cm/counterH/n54_adj_1116 ), 
    .Q0(\cm/counterH/Count_intern_reg_1 ), .F1(\cm/counterH/n53_adj_1117 ), 
    .Q1(\cm/counterH/Count_intern_reg_2 ), .FCO(\cm/counterH/n6281 ));
  cm_counterH_SLICE_44 \cm/counterH/SLICE_44 ( 
    .A1(\cm/counterH/Count_intern_reg_0 ), .DI1(\cm/counterH/n55_adj_1115 ), 
    .LSR(HSYNC_c), .CLK(clk_c), .F1(\cm/counterH/n55_adj_1115 ), 
    .Q1(\cm/counterH/Count_intern_reg_0 ), .FCO(\cm/counterH/n6280 ));
  cm_counterH_SLICE_45 \cm/counterH/SLICE_45 ( .A0(\cm/Counter_X_9 ), 
    .DI0(\cm/counterH/n46 ), .LSR(\cm/counterH/n3045 ), .CLK(clk_c), 
    .FCI(\cm/counterH/n6279 ), .F0(\cm/counterH/n46 ), .Q0(\cm/Counter_X_9 ));
  cm_counterH_SLICE_46 \cm/counterH/SLICE_46 ( .A1(\cm/Counter_X_8 ), 
    .A0(\cm/Counter_X_7 ), .DI1(\cm/counterH/n47 ), .DI0(\cm/counterH/n48 ), 
    .LSR(\cm/counterH/n3045 ), .CLK(clk_c), .FCI(\cm/counterH/n6278 ), 
    .F0(\cm/counterH/n48 ), .Q0(\cm/Counter_X_7 ), .F1(\cm/counterH/n47 ), 
    .Q1(\cm/Counter_X_8 ), .FCO(\cm/counterH/n6279 ));
  cm_counterH_SLICE_47 \cm/counterH/SLICE_47 ( .A1(\cm/Counter_X_6 ), 
    .A0(\cm/Counter_X_5 ), .DI1(\cm/counterH/n49 ), .DI0(\cm/counterH/n50 ), 
    .LSR(\cm/counterH/n3045 ), .CLK(clk_c), .FCI(\cm/counterH/n6277 ), 
    .F0(\cm/counterH/n50 ), .Q0(\cm/Counter_X_5 ), .F1(\cm/counterH/n49 ), 
    .Q1(\cm/Counter_X_6 ), .FCO(\cm/counterH/n6278 ));
  cm_counterH_SLICE_48 \cm/counterH/SLICE_48 ( .A1(\cm/Counter_X_4 ), 
    .A0(\cm/Counter_X_3 ), .DI1(\cm/counterH/n51 ), .DI0(\cm/counterH/n52 ), 
    .LSR(\cm/counterH/n3045 ), .CLK(clk_c), .FCI(\cm/counterH/n6276 ), 
    .F0(\cm/counterH/n52 ), .Q0(\cm/Counter_X_3 ), .F1(\cm/counterH/n51 ), 
    .Q1(\cm/Counter_X_4 ), .FCO(\cm/counterH/n6277 ));
  cm_counterH_SLICE_49 \cm/counterH/SLICE_49 ( .A1(\cm/Counter_X_2 ), 
    .A0(\cm/Counter_X_1 ), .DI1(\cm/counterH/n53 ), .DI0(\cm/counterH/n54 ), 
    .LSR(\cm/counterH/n3045 ), .CLK(clk_c), .FCI(\cm/counterH/n6275 ), 
    .F0(\cm/counterH/n54 ), .Q0(\cm/Counter_X_1 ), .F1(\cm/counterH/n53 ), 
    .Q1(\cm/Counter_X_2 ), .FCO(\cm/counterH/n6276 ));
  cm_counterH_SLICE_50 \cm/counterH/SLICE_50 ( .A1(\cm/Counter_X_0 ), 
    .DI1(\cm/counterH/n55 ), .LSR(\cm/counterH/n3045 ), .CLK(clk_c), 
    .F1(\cm/counterH/n55 ), .Q1(\cm/Counter_X_0 ), .FCO(\cm/counterH/n6275 ));
  cm_assignCM_SLICE_51 \cm/assignCM/SLICE_51 ( .B1(\cm/Counter_X_7 ), 
    .A1(\cm/H_BackPorch_4 ), .B0(\cm/H_BackPorch_7 ), .A0(\cm/Counter_X_6 ), 
    .M1(\cm/c_data_3 ), .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_101 ), 
    .CLK(clk_c), .FCI(\cm/assignCM/n6203 ), 
    .Q0(\cm/assignCM/Right_DOWN_reg_2 ), .Q1(\cm/assignCM/Right_DOWN_reg_3 ), 
    .FCO(\cm/assignCM/n6204 ));
  cm_assignCM_SLICE_52 \cm/assignCM/SLICE_52 ( .B1(\cm/H_BackPorch_3 ), 
    .A1(\cm/Counter_X_5 ), .B0(\cm/H_BackPorch_3 ), .A0(\cm/Counter_X_4 ), 
    .M1(\cm/c_data_11 ), .M0(\cm/c_data_10 ), 
    .CE(\cm/assignCM/clk_c_enable_101 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6202 ), .Q0(\cm/assignCM/Right_DOWN_reg_10 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_11 ), .FCO(\cm/assignCM/n6203 ));
  cm_assignCM_SLICE_53 \cm/assignCM/SLICE_53 ( .A1(\cm/Counter_X_3 ), 
    .B0(\cm/Counter_X_2 ), .M1(c_data_1), .M0(c_data_0), 
    .CE(\cm/assignCM/clk_c_enable_101 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6201 ), .Q0(\cm/assignCM/Right_DOWN_reg_0 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_1 ), .FCO(\cm/assignCM/n6202 ));
  cm_assignCM_SLICE_54 \cm/assignCM/SLICE_54 ( .B1(\cm/Counter_X_1 ), 
    .A0(\cm/Counter_X_0 ), .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .Q0(\cm/assignCM/Left_UP_reg_8 ), .Q1(\cm/assignCM/Left_UP_reg_9 ), 
    .FCO(\cm/assignCM/n6201 ));
  cm_assignCM_SLICE_55 \cm/assignCM/SLICE_55 ( .M1(\cm/c_data_5 ), 
    .M0(\cm/c_data_4 ), .CE(\cm/assignCM/clk_c_enable_112 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6200 ), .F0(\cm/assignCM/n521 ), 
    .Q0(\cm/assignCM/Right_UP_reg_4 ), .Q1(\cm/assignCM/Right_UP_reg_5 ));
  cm_assignCM_SLICE_56 \cm/assignCM/SLICE_56 ( .B1(\cm/Counter_Y_9 ), 
    .B0(\cm/Counter_Y_8 ), .A0(\cm/H_BackPorch_4 ), .M1(\cm/c_data_7 ), 
    .M0(\cm/c_data_6 ), .CE(\cm/assignCM/clk_c_enable_101 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6199 ), .Q0(\cm/assignCM/Right_DOWN_reg_6 ), 
    .Q1(\cm/assignCM/Right_DOWN_reg_7 ), .FCO(\cm/assignCM/n6200 ));
  cm_assignCM_SLICE_57 \cm/assignCM/SLICE_57 ( .B1(\cm/Counter_Y_7 ), 
    .A1(\cm/H_BackPorch_5 ), .B0(\cm/H_BackPorch_3 ), .A0(\cm/Counter_Y_6 ), 
    .M1(\cm/c_data_3 ), .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_112 ), 
    .CLK(clk_c), .FCI(\cm/assignCM/n6198 ), .Q0(\cm/assignCM/Right_UP_reg_2 ), 
    .Q1(\cm/assignCM/Right_UP_reg_3 ), .FCO(\cm/assignCM/n6199 ));
  cm_assignCM_SLICE_58 \cm/assignCM/SLICE_58 ( .B1(\cm/Counter_Y_5 ), 
    .B0(\cm/Counter_Y_4 ), .A0(\cm/H_BackPorch_7 ), .M1(\cm/c_data_11 ), 
    .M0(\cm/c_data_10 ), .CE(\cm/assignCM/clk_c_enable_112 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6197 ), .Q0(\cm/assignCM/Right_UP_reg_10 ), 
    .Q1(\cm/assignCM/Right_UP_reg_11 ), .FCO(\cm/assignCM/n6198 ));
  cm_assignCM_SLICE_59 \cm/assignCM/SLICE_59 ( .A1(\cm/Counter_Y_3 ), 
    .B0(\cm/Counter_Y_2 ), .A0(\cm/H_BackPorch_3 ), .M1(c_data_1), 
    .M0(c_data_0), .CE(\cm/assignCM/clk_c_enable_112 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6196 ), .Q0(\cm/assignCM/Right_UP_reg_0 ), 
    .Q1(\cm/assignCM/Right_UP_reg_1 ), .FCO(\cm/assignCM/n6197 ));
  cm_assignCM_SLICE_60 \cm/assignCM/SLICE_60 ( .B1(\cm/Counter_Y_1 ), 
    .A0(\cm/Counter_Y_0 ), .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_101 ), .CLK(clk_c), 
    .Q0(\cm/assignCM/Right_DOWN_reg_8 ), .Q1(\cm/assignCM/Right_DOWN_reg_9 ), 
    .FCO(\cm/assignCM/n6196 ));
  cm_assignCM_SLICE_61 \cm/assignCM/SLICE_61 ( .M1(\cm/c_data_5 ), 
    .M0(\cm/c_data_4 ), .CE(\cm/assignCM/clk_c_enable_101 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6205 ), .F0(\cm/assignCM/n523 ), 
    .Q0(\cm/assignCM/Right_DOWN_reg_4 ), .Q1(\cm/assignCM/Right_DOWN_reg_5 ));
  cm_assignCM_SLICE_62 \cm/assignCM/SLICE_62 ( .B1(\cm/Counter_X_9 ), 
    .B0(\cm/Counter_X_8 ), .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .FCI(\cm/assignCM/n6204 ), .Q0(\cm/assignCM/Left_UP_reg_6 ), 
    .Q1(\cm/assignCM/Left_UP_reg_7 ), .FCO(\cm/assignCM/n6205 ));
  SLICE_63 SLICE_63( .B0(counter_23_N_178_9), .A0(counter_23), .FCI(n6229), 
    .F1(n1553));
  SLICE_64 SLICE_64( .B1(counter_23_N_178_9), .A1(counter_22), 
    .B0(counter_23_N_178_9), .A0(counter_21), .FCI(n6228), .FCO(n6229));
  SLICE_65 SLICE_65( .B1(counter_23_N_178_9), .A1(counter_20), 
    .B0(counter_23_N_178_9), .A0(counter_19), .FCI(n6227), .FCO(n6228));
  SLICE_66 SLICE_66( .B1(counter_23_N_178_9), .A1(counter_18), 
    .B0(counter_23_N_178_9), .A0(counter_17), .FCI(n6226), .FCO(n6227));
  SLICE_67 SLICE_67( .B1(counter_23_N_178_9), .A1(counter_16), 
    .B0(counter_23_N_178_9), .A0(counter_15), .FCI(n6225), .FCO(n6226));
  SLICE_68 SLICE_68( .B1(counter_14), .A1(counter_23_N_178_9), .B0(counter_13), 
    .A0(counter_23_N_178_9), .FCI(n6224), .FCO(n6225));
  SLICE_69 SLICE_69( .B1(counter_23_N_178_9), .A1(counter_12), 
    .B0(counter_23_N_178_9), .A0(counter_11), .FCI(n6223), .FCO(n6224));
  SLICE_70 SLICE_70( .B1(counter_10), .A1(counter_23_N_178_9), .B0(counter_9), 
    .A0(counter_23_N_178_9), .FCI(n6222), .FCO(n6223));
  SLICE_71 SLICE_71( .B1(counter_8), .A1(counter_23_N_178_8), .B0(counter_7), 
    .A0(counter_23_N_178_7), .FCI(n6221), .FCO(n6222));
  SLICE_72 SLICE_72( .B1(counter_6), .A1(counter_23_N_178_6), .B0(counter_5), 
    .A0(counter_23_N_178_5), .FCI(n6220), .FCO(n6221));
  SLICE_73 SLICE_73( .B1(counter_4), .A1(counter_23_N_178_4), .B0(counter_3), 
    .A0(counter_23_N_178_3), .FCI(n6219), .FCO(n6220));
  SLICE_74 SLICE_74( .B1(counter_2), .A1(counter_23_N_178_2), .B0(counter_1), 
    .A0(counter_23_N_178_1), .FCI(n6218), .FCO(n6219));
  SLICE_75 SLICE_75( .B1(counter_0), .A1(counter_23_N_178_0), .FCO(n6218));
  SLICE_76 SLICE_76( .B1(Count_h_0), .A1(H_left_margin_0), .FCO(n6177));
  SLICE_77 SLICE_77( .FCI(n6181), .F0(n1417));
  vga_assgncolor_SLICE_78 \vga/assgncolor/SLICE_78 ( .A0(Count_h_11), 
    .FCI(\vga/assgncolor/n6246 ), .F1(\vga/assgncolor/Active_nxt_N_1065 ));
  vga_assgncolor_SLICE_79 \vga/assgncolor/SLICE_79 ( 
    .B1(\vga/H_right_margin_10 ), .A1(Count_h_10), .B0(\vga/H_right_margin_9 ), 
    .A0(Count_h_9), .FCI(\vga/assgncolor/n6245 ), .FCO(\vga/assgncolor/n6246 ));
  vga_assgncolor_SLICE_80 \vga/assgncolor/SLICE_80 ( .B1(Count_h_8), 
    .A1(\vga/H_right_margin_8 ), .B0(Count_h_7), .A0(H_right_margin_7), 
    .FCI(\vga/assgncolor/n6244 ), .FCO(\vga/assgncolor/n6245 ));
  vga_assgncolor_SLICE_81 \vga/assgncolor/SLICE_81 ( .B1(Count_h_6), 
    .A1(H_right_margin_6), .B0(H_right_margin_5), .A0(Count_h_5), 
    .FCI(\vga/assgncolor/n6243 ), .FCO(\vga/assgncolor/n6244 ));
  vga_assgncolor_SLICE_82 \vga/assgncolor/SLICE_82 ( .B1(Count_h_4), 
    .A1(\vga/H_right_margin_4 ), .B0(Count_h_3), .A0(H_right_margin_3), 
    .FCI(\vga/assgncolor/n6242 ), .FCO(\vga/assgncolor/n6243 ));
  vga_assgncolor_SLICE_83 \vga/assgncolor/SLICE_83 ( .B1(Count_h_2), 
    .A1(\vga/H_right_margin_2 ), .B0(Count_h_1), .A0(\vga/H_right_margin_1 ), 
    .FCI(\vga/assgncolor/n6241 ), .FCO(\vga/assgncolor/n6242 ));
  vga_assgncolor_SLICE_84 \vga/assgncolor/SLICE_84 ( 
    .B1(\vga/H_right_margin_0 ), .A1(Count_h_0), .FCO(\vga/assgncolor/n6241 ));
  vga_assgncolor_SLICE_85 \vga/assgncolor/SLICE_85 ( .B0(Count_v_11), 
    .FCI(\vga/assgncolor/n6235 ), .F1(\vga/assgncolor/Active_nxt_N_1067 ));
  vga_assgncolor_SLICE_86 \vga/assgncolor/SLICE_86 ( .B1(Count_v_10), 
    .B0(Count_v_9), .A0(\vga/V_right_margin_9 ), .FCI(\vga/assgncolor/n6234 ), 
    .FCO(\vga/assgncolor/n6235 ));
  vga_assgncolor_SLICE_87 \vga/assgncolor/SLICE_87 ( 
    .B1(\vga/V_right_margin_8 ), .A1(Count_v_8), .B0(\vga/V_right_margin_7 ), 
    .A0(Count_v_7), .FCI(\vga/assgncolor/n6233 ), .FCO(\vga/assgncolor/n6234 ));
  vga_assgncolor_SLICE_88 \vga/assgncolor/SLICE_88 ( .B1(V_right_margin_6), 
    .A1(Count_v_6), .B0(V_right_margin_5), .A0(Count_v_5), 
    .FCI(\vga/assgncolor/n6232 ), .FCO(\vga/assgncolor/n6233 ));
  vga_assgncolor_SLICE_89 \vga/assgncolor/SLICE_89 ( .B1(V_right_margin_4), 
    .A1(Count_v_4), .B0(\vga/V_right_margin_3 ), .A0(Count_v_3), 
    .FCI(\vga/assgncolor/n6231 ), .FCO(\vga/assgncolor/n6232 ));
  vga_assgncolor_SLICE_90 \vga/assgncolor/SLICE_90 ( .B1(Count_v_2), 
    .A1(\vga/V_right_margin_2 ), .B0(Count_v_1), .A0(V_right_margin_1), 
    .FCI(\vga/assgncolor/n6230 ), .FCO(\vga/assgncolor/n6231 ));
  vga_assgncolor_SLICE_91 \vga/assgncolor/SLICE_91 ( .B1(Count_v_0), 
    .A1(\vga/V_right_margin_0 ), .FCO(\vga/assgncolor/n6230 ));
  vga_CounterV_SLICE_92 \vga/CounterV/SLICE_92 ( .A0(Count_v_11), 
    .FCI(\vga/CounterV/n6258 ), .F0(\vga/CounterV/n54 ));
  vga_CounterV_SLICE_93 \vga/CounterV/SLICE_93 ( .A1(Count_v_10), 
    .B0(Count_v_9), .FCI(\vga/CounterV/n6257 ), .F0(\vga/CounterV/n56 ), 
    .F1(\vga/CounterV/n55 ), .FCO(\vga/CounterV/n6258 ));
  vga_CounterV_SLICE_94 \vga/CounterV/SLICE_94 ( .A1(Count_v_8), 
    .A0(Count_v_7), .FCI(\vga/CounterV/n6256 ), .F0(\vga/CounterV/n58 ), 
    .F1(\vga/CounterV/n57 ), .FCO(\vga/CounterV/n6257 ));
  vga_CounterV_SLICE_95 \vga/CounterV/SLICE_95 ( .A1(Count_v_6), 
    .A0(Count_v_5), .FCI(\vga/CounterV/n6255 ), .F0(\vga/CounterV/n60 ), 
    .F1(\vga/CounterV/n59 ), .FCO(\vga/CounterV/n6256 ));
  vga_CounterV_SLICE_96 \vga/CounterV/SLICE_96 ( .B1(Count_v_4), 
    .A0(Count_v_3), .FCI(\vga/CounterV/n6254 ), .F0(\vga/CounterV/n62 ), 
    .F1(\vga/CounterV/n61 ), .FCO(\vga/CounterV/n6255 ));
  vga_CounterV_SLICE_97 \vga/CounterV/SLICE_97 ( .B1(Count_v_2), 
    .A0(Count_v_1), .FCI(\vga/CounterV/n6253 ), .F0(\vga/CounterV/n64 ), 
    .F1(\vga/CounterV/n63 ), .FCO(\vga/CounterV/n6254 ));
  vga_CounterV_SLICE_98 \vga/CounterV/SLICE_98 ( .A1(Count_v_0), 
    .F1(\vga/CounterV/n65 ), .FCO(\vga/CounterV/n6253 ));
  vga_CounterV_SLICE_99 \vga/CounterV/SLICE_99 ( .B0(\vga/V_count_max_11 ), 
    .A0(Count_v_11), .FCI(\vga/CounterV/n6252 ), .F1(\vga/CounterV/n1498 ));
  vga_CounterV_SLICE_100 \vga/CounterV/SLICE_100 ( .B1(\vga/V_count_max_10 ), 
    .A1(Count_v_10), .B0(\vga/V_count_max_9 ), .A0(Count_v_9), 
    .FCI(\vga/CounterV/n6251 ), .FCO(\vga/CounterV/n6252 ));
  vga_CounterV_SLICE_101 \vga/CounterV/SLICE_101 ( .B1(Count_v_8), 
    .A1(\vga/V_count_max_8 ), .B0(Count_v_7), .A0(\vga/V_count_max_7 ), 
    .FCI(\vga/CounterV/n6250 ), .FCO(\vga/CounterV/n6251 ));
  vga_CounterV_SLICE_102 \vga/CounterV/SLICE_102 ( .B1(V_count_max_6), 
    .A1(Count_v_6), .B0(V_count_max_5), .A0(Count_v_5), 
    .FCI(\vga/CounterV/n6249 ), .FCO(\vga/CounterV/n6250 ));
  vga_CounterV_SLICE_103 \vga/CounterV/SLICE_103 ( .B1(V_count_max_4), 
    .A1(Count_v_4), .B0(\vga/V_count_max_3 ), .A0(Count_v_3), 
    .FCI(\vga/CounterV/n6248 ), .FCO(\vga/CounterV/n6249 ));
  vga_CounterV_SLICE_104 \vga/CounterV/SLICE_104 ( .B1(Count_v_2), 
    .A1(\vga/V_count_max_2 ), .B0(Count_v_1), .A0(\vga/V_count_max_1 ), 
    .FCI(\vga/CounterV/n6247 ), .FCO(\vga/CounterV/n6248 ));
  vga_CounterV_SLICE_105 \vga/CounterV/SLICE_105 ( .B1(Count_v_0), 
    .A1(\vga/V_count_max_0 ), .FCO(\vga/CounterV/n6247 ));
  vga_CounterH_SLICE_106 \vga/CounterH/SLICE_106 ( .A1(Count_h_6), 
    .A0(Count_h_5), .FCI(\vga/CounterH/n6261 ), .F0(\vga/CounterH/n60 ), 
    .F1(\vga/CounterH/n59 ), .FCO(\vga/CounterH/n6262 ));
  vga_CounterH_SLICE_107 \vga/CounterH/SLICE_107 ( .B1(Count_h_4), 
    .A0(Count_h_3), .FCI(\vga/CounterH/n6260 ), .F0(\vga/CounterH/n62 ), 
    .F1(\vga/CounterH/n61 ), .FCO(\vga/CounterH/n6261 ));
  vga_CounterH_SLICE_108 \vga/CounterH/SLICE_108 ( .B0(\vga/H_count_max_11 ), 
    .A0(Count_h_11), .FCI(\vga/CounterH/n6171 ), .F1(\vga/CounterH/n1483 ));
  vga_CounterH_SLICE_109 \vga/CounterH/SLICE_109 ( .B1(H_count_max_10), 
    .A1(Count_h_10), .B0(\vga/H_count_max_9 ), .A0(Count_h_9), 
    .FCI(\vga/CounterH/n6170 ), .FCO(\vga/CounterH/n6171 ));
  vga_CounterH_SLICE_110 \vga/CounterH/SLICE_110 ( .B1(Count_h_2), 
    .A0(Count_h_1), .FCI(\vga/CounterH/n6259 ), .F0(\vga/CounterH/n64 ), 
    .F1(\vga/CounterH/n63 ), .FCO(\vga/CounterH/n6260 ));
  vga_CounterH_SLICE_111 \vga/CounterH/SLICE_111 ( .A1(Count_h_0), 
    .F1(\vga/CounterH/n65 ), .FCO(\vga/CounterH/n6259 ));
  vga_CounterH_SLICE_112 \vga/CounterH/SLICE_112 ( .B1(Count_h_8), 
    .A1(\vga/H_count_max_8 ), .B0(Count_h_7), .A0(\vga/H_count_max_7 ), 
    .FCI(\vga/CounterH/n6169 ), .FCO(\vga/CounterH/n6170 ));
  vga_CounterH_SLICE_113 \vga/CounterH/SLICE_113 ( .B1(Count_h_6), 
    .A1(\vga/H_count_max_6 ), .B0(\vga/H_count_max_5 ), .A0(Count_h_5), 
    .FCI(\vga/CounterH/n6168 ), .FCO(\vga/CounterH/n6169 ));
  vga_CounterH_SLICE_114 \vga/CounterH/SLICE_114 ( .B1(Count_h_4), 
    .A1(\vga/H_count_max_4 ), .B0(\vga/H_count_max_3 ), .A0(Count_h_3), 
    .FCI(\vga/CounterH/n6167 ), .FCO(\vga/CounterH/n6168 ));
  vga_CounterH_SLICE_115 \vga/CounterH/SLICE_115 ( .B1(Count_h_2), 
    .A1(\vga/H_count_max_2 ), .B0(Count_h_1), .A0(\vga/H_count_max_1 ), 
    .FCI(\vga/CounterH/n6166 ), .FCO(\vga/CounterH/n6167 ));
  vga_CounterH_SLICE_116 \vga/CounterH/SLICE_116 ( .B1(Count_h_0), 
    .A1(\vga/H_count_max_0 ), .FCO(\vga/CounterH/n6166 ));
  vga_CounterH_SLICE_117 \vga/CounterH/SLICE_117 ( .A0(Count_h_11), 
    .FCI(\vga/CounterH/n6264 ), .F0(\vga/CounterH/n54 ));
  vga_CounterH_SLICE_118 \vga/CounterH/SLICE_118 ( .B1(Count_h_10), 
    .A0(Count_h_9), .FCI(\vga/CounterH/n6263 ), .F0(\vga/CounterH/n56 ), 
    .F1(\vga/CounterH/n55 ), .FCO(\vga/CounterH/n6264 ));
  vga_CounterH_SLICE_119 \vga/CounterH/SLICE_119 ( .B1(Count_h_8), 
    .B0(Count_h_7), .FCI(\vga/CounterH/n6262 ), .F0(\vga/CounterH/n58 ), 
    .F1(\vga/CounterH/n57 ), .FCO(\vga/CounterH/n6263 ));
  cd_CNT_UART_SLICE_120 \cd/CNT_UART/SLICE_120 ( .FCI(\cd/CNT_UART/n6191 ), 
    .F0(counter_23_N_178_9));
  cd_CNT_UART_SLICE_121 \cd/CNT_UART/SLICE_121 ( .A0(\cd/baudrate_7 ), 
    .FCI(\cd/CNT_UART/n6190 ), .F0(counter_23_N_178_7), 
    .F1(counter_23_N_178_8), .FCO(\cd/CNT_UART/n6191 ));
  cd_CNT_UART_SLICE_122 \cd/CNT_UART/SLICE_122 ( .A1(\cd/baudrate_6 ), 
    .FCI(\cd/CNT_UART/n6189 ), .F0(counter_23_N_178_5), 
    .F1(counter_23_N_178_6), .FCO(\cd/CNT_UART/n6190 ));
  cd_CNT_UART_SLICE_123 \cd/CNT_UART/SLICE_123 ( .A1(\cd/baudrate_4 ), 
    .A0(\cd/baudrate_3 ), .FCI(\cd/CNT_UART/n6188 ), .F0(counter_23_N_178_3), 
    .F1(counter_23_N_178_4), .FCO(\cd/CNT_UART/n6189 ));
  cd_CNT_UART_SLICE_124 \cd/CNT_UART/SLICE_124 ( .B1(\cd/baudrate_2 ), 
    .B0(\cd/baudrate_1 ), .FCI(\cd/CNT_UART/n6187 ), .F0(counter_23_N_178_1), 
    .F1(counter_23_N_178_2), .FCO(\cd/CNT_UART/n6188 ));
  cd_CNT_UART_SLICE_125 \cd/CNT_UART/SLICE_125 ( .A1(\cd/baudrate_0 ), 
    .F1(counter_23_N_178_0), .FCO(\cd/CNT_UART/n6187 ));
  SLICE_126 SLICE_126( .A0(counter_23), .M0(\vga/config1/V_Sync_Pulse_nxt_7 ), 
    .CLK(clk_c), .FCI(\cd/CNT_UART/n6217 ), .F0(n102), .Q0(V_sync_pulse_7));
  SLICE_127 SLICE_127( .A1(counter_22), .A0(counter_21), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_6 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_5 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6216 ), .F0(n104), .Q0(V_sync_pulse_5), .F1(n103), 
    .Q1(V_sync_pulse_6), .FCO(\cd/CNT_UART/n6217 ));
  SLICE_128 SLICE_128( .A1(counter_20), .B0(counter_19), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_4 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6215 ), .F0(n106), .Q0(V_sync_pulse_3), .F1(n105), 
    .Q1(V_sync_pulse_4), .FCO(\cd/CNT_UART/n6216 ));
  SLICE_129 SLICE_129( .B1(counter_18), .A0(counter_17), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_2 ), 
    .M0(\vga/config1/V_Sync_Pulse_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6214 ), .F0(n108), .Q0(V_sync_pulse_1), .F1(n107), 
    .Q1(V_sync_pulse_2), .FCO(\cd/CNT_UART/n6215 ));
  SLICE_130 SLICE_130( .B1(counter_16), .A0(counter_15), 
    .M1(\vga/config1/V_Sync_Pulse_nxt_0 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_9 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6213 ), .F0(n110), .Q0(\vga/V_right_margin_9 ), 
    .F1(n109), .Q1(V_sync_pulse_0), .FCO(\cd/CNT_UART/n6214 ));
  SLICE_131 SLICE_131( .A1(counter_14), .B0(counter_13), 
    .M1(\vga/config1/V_Right_Margin_nxt_8 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_7 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6212 ), .F0(n112), .Q0(\vga/V_right_margin_7 ), 
    .F1(n111), .Q1(\vga/V_right_margin_8 ), .FCO(\cd/CNT_UART/n6213 ));
  SLICE_132 SLICE_132( .A1(counter_12), .A0(counter_11), 
    .M1(\vga/config1/V_Right_Margin_nxt_6 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_5 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6211 ), .F0(n114), .Q0(V_right_margin_5), .F1(n113), 
    .Q1(V_right_margin_6), .FCO(\cd/CNT_UART/n6212 ));
  SLICE_133 SLICE_133( .B1(counter_10), .B0(counter_9), 
    .M1(\vga/config1/V_Right_Margin_nxt_4 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_UART/n6210 ), .F0(n116), .Q0(\vga/V_right_margin_3 ), 
    .F1(n115), .Q1(V_right_margin_4), .FCO(\cd/CNT_UART/n6211 ));
  cd_CNT_UART_SLICE_134 \cd/CNT_UART/SLICE_134 ( .A1(counter_8), 
    .B0(counter_7), .FCI(\cd/CNT_UART/n6209 ), .F0(n118), .F1(n117), 
    .FCO(\cd/CNT_UART/n6210 ));
  cd_CNT_UART_SLICE_135 \cd/CNT_UART/SLICE_135 ( .B1(counter_6), 
    .A0(counter_5), .FCI(\cd/CNT_UART/n6208 ), .F0(n120), .F1(n119), 
    .FCO(\cd/CNT_UART/n6209 ));
  cd_CNT_UART_SLICE_136 \cd/CNT_UART/SLICE_136 ( .B1(counter_4), 
    .B0(counter_3), .FCI(\cd/CNT_UART/n6207 ), .F0(n122), .F1(n121), 
    .FCO(\cd/CNT_UART/n6208 ));
  cd_CNT_UART_SLICE_137 \cd/CNT_UART/SLICE_137 ( .B1(counter_2), 
    .B0(counter_1), .FCI(\cd/CNT_UART/n6206 ), .F0(n124), .F1(n123), 
    .FCO(\cd/CNT_UART/n6207 ));
  SLICE_138 SLICE_138( .A1(counter_0), .M1(\vga/config1/V_Right_Margin_nxt_2 ), 
    .M0(\vga/config1/V_Right_Margin_nxt_1 ), .CLK(clk_c), 
    .Q0(V_right_margin_1), .F1(n125), .Q1(\vga/V_right_margin_2 ), 
    .FCO(\cd/CNT_UART/n6206 ));
  SLICE_139 SLICE_139( .B0(\cd/CNT_LM/counter_31 ), 
    .M1(\vga/config1/V_Count_Max_nxt_9 ), .M0(\vga/config1/V_Count_Max_nxt_8 ), 
    .CLK(clk_c), .FCI(\cd/CNT_LM/n6346 ), .Q0(\vga/V_count_max_8 ), 
    .F1(counter_31__N_85), .Q1(\vga/V_count_max_9 ));
  SLICE_140 SLICE_140( .B1(\cd/CNT_LM/counter_30 ), 
    .B0(\cd/CNT_LM/counter_29 ), .M1(\vga/config1/V_Count_Max_nxt_7 ), 
    .M0(\vga/config1/V_Count_Max_nxt_6 ), .CLK(clk_c), .FCI(\cd/CNT_LM/n6345 ), 
    .Q0(V_count_max_6), .Q1(\vga/V_count_max_7 ), .FCO(\cd/CNT_LM/n6346 ));
  SLICE_141 SLICE_141( .B1(\cd/CNT_LM/counter_28 ), 
    .B0(\cd/CNT_LM/counter_27 ), .M1(\vga/config1/V_Count_Max_nxt_5 ), 
    .M0(\vga/config1/V_Count_Max_nxt_4 ), .CLK(clk_c), .FCI(\cd/CNT_LM/n6344 ), 
    .Q0(V_count_max_4), .Q1(V_count_max_5), .FCO(\cd/CNT_LM/n6345 ));
  SLICE_142 SLICE_142( .B1(\cd/CNT_LM/counter_26 ), 
    .A0(\cd/CNT_LM/counter_25 ), .M1(\vga/config1/V_Count_Max_nxt_3 ), 
    .M0(\vga/config1/V_Count_Max_nxt_2 ), .CLK(clk_c), .FCI(\cd/CNT_LM/n6343 ), 
    .Q0(\vga/V_count_max_2 ), .Q1(\vga/V_count_max_3 ), 
    .FCO(\cd/CNT_LM/n6344 ));
  SLICE_143 SLICE_143( .B1(\cd/CNT_LM/counter_24 ), 
    .B0(\cd/CNT_LM/counter_23 ), .M1(\vga/config1/V_Count_Max_nxt_11 ), 
    .M0(\vga/config1/V_Count_Max_nxt_10 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6342 ), .Q0(\vga/V_count_max_10 ), 
    .Q1(\vga/V_count_max_11 ), .FCO(\cd/CNT_LM/n6343 ));
  SLICE_144 SLICE_144( .B1(\cd/CNT_LM/counter_22 ), 
    .A0(\cd/CNT_LM/counter_21 ), .M1(\vga/config1/V_Count_Max_nxt_1 ), 
    .M0(\vga/config1/V_Count_Max_nxt_0 ), .CLK(clk_c), .FCI(\cd/CNT_LM/n6341 ), 
    .Q0(\vga/V_count_max_0 ), .Q1(\vga/V_count_max_1 ), 
    .FCO(\cd/CNT_LM/n6342 ));
  SLICE_145 SLICE_145( .A1(\cd/CNT_LM/counter_20 ), 
    .B0(\cd/CNT_LM/counter_19 ), .M1(V_left_margin_2), 
    .M0(\vga/V_count_max_7 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .FCI(\cd/CNT_LM/n6340 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_7 ), 
    .Q1(\vga/config1/V_Left_Margin_nxt_2 ), .FCO(\cd/CNT_LM/n6341 ));
  SLICE_146 SLICE_146( .B1(\cd/CNT_LM/counter_18 ), 
    .A0(\cd/CNT_LM/counter_17 ), .M1(\vga/config1/Load_nxt ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_7 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6339 ), .Q0(H_sync_pulse_7), .Q1(Load_config), 
    .FCO(\cd/CNT_LM/n6340 ));
  SLICE_147 SLICE_147( .A1(\cd/CNT_LM/counter_16 ), 
    .B0(\cd/CNT_LM/counter_15 ), .M1(\vga/config1/H_Sync_Pulse_nxt_6 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_5 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6338 ), .Q0(H_sync_pulse_5), .Q1(H_sync_pulse_6), 
    .FCO(\cd/CNT_LM/n6339 ));
  SLICE_148 SLICE_148( .B1(\cd/CNT_LM/counter_14 ), 
    .B0(\cd/CNT_LM/counter_13 ), .M1(\vga/config1/H_Sync_Pulse_nxt_4 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_3 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6337 ), .Q0(H_sync_pulse_3), .Q1(H_sync_pulse_4), 
    .FCO(\cd/CNT_LM/n6338 ));
  SLICE_149 SLICE_149( .A1(\cd/CNT_LM/counter_12 ), 
    .B0(\cd/CNT_LM/counter_11 ), .M1(\vga/config1/H_Sync_Pulse_nxt_2 ), 
    .M0(\vga/config1/H_Sync_Pulse_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6336 ), .Q0(H_sync_pulse_1), .Q1(H_sync_pulse_2), 
    .FCO(\cd/CNT_LM/n6337 ));
  SLICE_150 SLICE_150( .B1(\cd/CNT_LM/counter_10 ), .A0(\cd/CNT_LM/counter_9 ), 
    .M1(\vga/V_count_max_0 ), .M0(H_sync_pulse_0), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .FCI(\cd/CNT_LM/n6335 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_0 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_0 ), .FCO(\cd/CNT_LM/n6336 ));
  SLICE_151 SLICE_151( .B1(\cd/CNT_LM/counter_8 ), .B0(\cd/CNT_LM/counter_7 ), 
    .M1(\vga/config1/V_Left_Margin_nxt_5 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_4 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6334 ), .Q0(V_left_margin_4), .Q1(V_left_margin_5), 
    .FCO(\cd/CNT_LM/n6335 ));
  SLICE_152 SLICE_152( .A1(\cd/CNT_LM/counter_6 ), .B0(\cd/CNT_LM/counter_5 ), 
    .M1(\vga/config1/V_Left_Margin_nxt_3 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_2 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6333 ), .Q0(V_left_margin_2), .Q1(V_left_margin_3), 
    .FCO(\cd/CNT_LM/n6334 ));
  SLICE_153 SLICE_153( .A1(\cd/CNT_LM/counter_4 ), .B0(\cd/CNT_LM/counter_3 ), 
    .M1(\vga/config1/V_Left_Margin_nxt_1 ), 
    .M0(\vga/config1/V_Left_Margin_nxt_0 ), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6332 ), .Q0(V_left_margin_0), .Q1(V_left_margin_1), 
    .FCO(\cd/CNT_LM/n6333 ));
  SLICE_154 SLICE_154( .A1(\cd/CNT_LM/counter_2 ), .B0(\cd/CNT_LM/counter_1 ), 
    .A0(\cd/CNT_LM/counter_0 ), .M1(\vga/V_count_max_11 ), 
    .M0(\vga/V_count_max_10 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_10 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_11 ), .FCO(\cd/CNT_LM/n6332 ));
  cd_CNT_LM_SLICE_155 \cd/CNT_LM/SLICE_155 ( .A0(\cd/CNT_LM/counter_31 ), 
    .DI0(\cd/CNT_LM/n134 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6316 ), .F0(\cd/CNT_LM/n134 ), 
    .Q0(\cd/CNT_LM/counter_31 ));
  cd_CNT_LM_SLICE_156 \cd/CNT_LM/SLICE_156 ( .A1(\cd/CNT_LM/counter_30 ), 
    .A0(\cd/CNT_LM/counter_29 ), .DI1(\cd/CNT_LM/n135 ), 
    .DI0(\cd/CNT_LM/n136 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6315 ), .F0(\cd/CNT_LM/n136 ), 
    .Q0(\cd/CNT_LM/counter_29 ), .F1(\cd/CNT_LM/n135 ), 
    .Q1(\cd/CNT_LM/counter_30 ), .FCO(\cd/CNT_LM/n6316 ));
  cd_CNT_LM_SLICE_157 \cd/CNT_LM/SLICE_157 ( .A1(\cd/CNT_LM/counter_28 ), 
    .A0(\cd/CNT_LM/counter_27 ), .DI1(\cd/CNT_LM/n137 ), 
    .DI0(\cd/CNT_LM/n138 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6314 ), .F0(\cd/CNT_LM/n138 ), 
    .Q0(\cd/CNT_LM/counter_27 ), .F1(\cd/CNT_LM/n137 ), 
    .Q1(\cd/CNT_LM/counter_28 ), .FCO(\cd/CNT_LM/n6315 ));
  cd_CNT_LM_SLICE_158 \cd/CNT_LM/SLICE_158 ( .A1(\cd/CNT_LM/counter_26 ), 
    .A0(\cd/CNT_LM/counter_25 ), .DI1(\cd/CNT_LM/n139 ), 
    .DI0(\cd/CNT_LM/n140 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6313 ), .F0(\cd/CNT_LM/n140 ), 
    .Q0(\cd/CNT_LM/counter_25 ), .F1(\cd/CNT_LM/n139 ), 
    .Q1(\cd/CNT_LM/counter_26 ), .FCO(\cd/CNT_LM/n6314 ));
  cd_CNT_LM_SLICE_159 \cd/CNT_LM/SLICE_159 ( .A1(\cd/CNT_LM/counter_24 ), 
    .A0(\cd/CNT_LM/counter_23 ), .DI1(\cd/CNT_LM/n141 ), 
    .DI0(\cd/CNT_LM/n142 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6312 ), .F0(\cd/CNT_LM/n142 ), 
    .Q0(\cd/CNT_LM/counter_23 ), .F1(\cd/CNT_LM/n141 ), 
    .Q1(\cd/CNT_LM/counter_24 ), .FCO(\cd/CNT_LM/n6313 ));
  cd_CNT_LM_SLICE_160 \cd/CNT_LM/SLICE_160 ( .A1(\cd/CNT_LM/counter_22 ), 
    .A0(\cd/CNT_LM/counter_21 ), .DI1(\cd/CNT_LM/n143 ), 
    .DI0(\cd/CNT_LM/n144 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6311 ), .F0(\cd/CNT_LM/n144 ), 
    .Q0(\cd/CNT_LM/counter_21 ), .F1(\cd/CNT_LM/n143 ), 
    .Q1(\cd/CNT_LM/counter_22 ), .FCO(\cd/CNT_LM/n6312 ));
  cd_CNT_LM_SLICE_161 \cd/CNT_LM/SLICE_161 ( .A1(\cd/CNT_LM/counter_20 ), 
    .A0(\cd/CNT_LM/counter_19 ), .DI1(\cd/CNT_LM/n145 ), 
    .DI0(\cd/CNT_LM/n146 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6310 ), .F0(\cd/CNT_LM/n146 ), 
    .Q0(\cd/CNT_LM/counter_19 ), .F1(\cd/CNT_LM/n145 ), 
    .Q1(\cd/CNT_LM/counter_20 ), .FCO(\cd/CNT_LM/n6311 ));
  cd_CNT_LM_SLICE_162 \cd/CNT_LM/SLICE_162 ( .A1(\cd/CNT_LM/counter_18 ), 
    .A0(\cd/CNT_LM/counter_17 ), .DI1(\cd/CNT_LM/n147 ), 
    .DI0(\cd/CNT_LM/n148 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6309 ), .F0(\cd/CNT_LM/n148 ), 
    .Q0(\cd/CNT_LM/counter_17 ), .F1(\cd/CNT_LM/n147 ), 
    .Q1(\cd/CNT_LM/counter_18 ), .FCO(\cd/CNT_LM/n6310 ));
  cd_CNT_LM_SLICE_163 \cd/CNT_LM/SLICE_163 ( .A1(\cd/CNT_LM/counter_16 ), 
    .A0(\cd/CNT_LM/counter_15 ), .DI1(\cd/CNT_LM/n149 ), 
    .DI0(\cd/CNT_LM/n150 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6308 ), .F0(\cd/CNT_LM/n150 ), 
    .Q0(\cd/CNT_LM/counter_15 ), .F1(\cd/CNT_LM/n149 ), 
    .Q1(\cd/CNT_LM/counter_16 ), .FCO(\cd/CNT_LM/n6309 ));
  cd_CNT_LM_SLICE_164 \cd/CNT_LM/SLICE_164 ( .A1(\cd/CNT_LM/counter_14 ), 
    .A0(\cd/CNT_LM/counter_13 ), .DI1(\cd/CNT_LM/n151 ), 
    .DI0(\cd/CNT_LM/n152 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6307 ), .F0(\cd/CNT_LM/n152 ), 
    .Q0(\cd/CNT_LM/counter_13 ), .F1(\cd/CNT_LM/n151 ), 
    .Q1(\cd/CNT_LM/counter_14 ), .FCO(\cd/CNT_LM/n6308 ));
  cd_CNT_LM_SLICE_165 \cd/CNT_LM/SLICE_165 ( .A1(\cd/CNT_LM/counter_12 ), 
    .A0(\cd/CNT_LM/counter_11 ), .DI1(\cd/CNT_LM/n153 ), 
    .DI0(\cd/CNT_LM/n154 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .FCI(\cd/CNT_LM/n6306 ), .F0(\cd/CNT_LM/n154 ), 
    .Q0(\cd/CNT_LM/counter_11 ), .F1(\cd/CNT_LM/n153 ), 
    .Q1(\cd/CNT_LM/counter_12 ), .FCO(\cd/CNT_LM/n6307 ));
  cd_CNT_LM_SLICE_166 \cd/CNT_LM/SLICE_166 ( .A1(\cd/CNT_LM/counter_10 ), 
    .A0(\cd/CNT_LM/counter_9 ), .DI1(\cd/CNT_LM/n155 ), .DI0(\cd/CNT_LM/n156 ), 
    .LSR(counter_31__N_85), .CLK(clk_c), .FCI(\cd/CNT_LM/n6305 ), 
    .F0(\cd/CNT_LM/n156 ), .Q0(\cd/CNT_LM/counter_9 ), .F1(\cd/CNT_LM/n155 ), 
    .Q1(\cd/CNT_LM/counter_10 ), .FCO(\cd/CNT_LM/n6306 ));
  cd_CNT_LM_SLICE_167 \cd/CNT_LM/SLICE_167 ( .A1(\cd/CNT_LM/counter_8 ), 
    .A0(\cd/CNT_LM/counter_7 ), .DI1(\cd/CNT_LM/n157 ), .DI0(\cd/CNT_LM/n158 ), 
    .LSR(counter_31__N_85), .CLK(clk_c), .FCI(\cd/CNT_LM/n6304 ), 
    .F0(\cd/CNT_LM/n158 ), .Q0(\cd/CNT_LM/counter_7 ), .F1(\cd/CNT_LM/n157 ), 
    .Q1(\cd/CNT_LM/counter_8 ), .FCO(\cd/CNT_LM/n6305 ));
  cd_CNT_LM_SLICE_168 \cd/CNT_LM/SLICE_168 ( .A1(\cd/CNT_LM/counter_6 ), 
    .A0(\cd/CNT_LM/counter_5 ), .DI1(\cd/CNT_LM/n159 ), .DI0(\cd/CNT_LM/n160 ), 
    .LSR(counter_31__N_85), .CLK(clk_c), .FCI(\cd/CNT_LM/n6303 ), 
    .F0(\cd/CNT_LM/n160 ), .Q0(\cd/CNT_LM/counter_5 ), .F1(\cd/CNT_LM/n159 ), 
    .Q1(\cd/CNT_LM/counter_6 ), .FCO(\cd/CNT_LM/n6304 ));
  cd_CNT_LM_SLICE_169 \cd/CNT_LM/SLICE_169 ( .A1(\cd/CNT_LM/counter_4 ), 
    .A0(\cd/CNT_LM/counter_3 ), .DI1(\cd/CNT_LM/n161 ), .DI0(\cd/CNT_LM/n162 ), 
    .LSR(counter_31__N_85), .CLK(clk_c), .FCI(\cd/CNT_LM/n6302 ), 
    .F0(\cd/CNT_LM/n162 ), .Q0(\cd/CNT_LM/counter_3 ), .F1(\cd/CNT_LM/n161 ), 
    .Q1(\cd/CNT_LM/counter_4 ), .FCO(\cd/CNT_LM/n6303 ));
  cd_CNT_LM_SLICE_170 \cd/CNT_LM/SLICE_170 ( .A1(\cd/CNT_LM/counter_2 ), 
    .A0(\cd/CNT_LM/counter_1 ), .DI1(\cd/CNT_LM/n163 ), .DI0(\cd/CNT_LM/n164 ), 
    .LSR(counter_31__N_85), .CLK(clk_c), .FCI(\cd/CNT_LM/n6301 ), 
    .F0(\cd/CNT_LM/n164 ), .Q0(\cd/CNT_LM/counter_1 ), .F1(\cd/CNT_LM/n163 ), 
    .Q1(\cd/CNT_LM/counter_2 ), .FCO(\cd/CNT_LM/n6302 ));
  cd_CNT_LM_SLICE_171 \cd/CNT_LM/SLICE_171 ( .A1(\cd/CNT_LM/counter_0 ), 
    .DI1(\cd/CNT_LM/n165 ), .LSR(counter_31__N_85), .CLK(clk_c), 
    .F1(\cd/CNT_LM/n165 ), .Q1(\cd/CNT_LM/counter_0 ), .FCO(\cd/CNT_LM/n6301 ));
  SLICE_172 SLICE_172( .B0(\cd/CNT_DB/counter_31 ), 
    .M1(\vga/config1/H_Right_Margin_nxt_3 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_2 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6331 ), .Q0(\vga/H_right_margin_2 ), 
    .F1(counter_31__N_85_adj_1144), .Q1(H_right_margin_3));
  SLICE_173 SLICE_173( .B1(\cd/CNT_DB/counter_30 ), 
    .A0(\cd/CNT_DB/counter_29 ), .M1(\vga/config1/H_Right_Margin_nxt_10 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_1 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6330 ), .Q0(\vga/H_right_margin_1 ), 
    .Q1(\vga/H_right_margin_10 ), .FCO(\cd/CNT_DB/n6331 ));
  SLICE_174 SLICE_174( .A1(\cd/CNT_DB/counter_28 ), 
    .B0(\cd/CNT_DB/counter_27 ), .M1(\vga/H_right_margin_2 ), 
    .M0(\vga/H_right_margin_1 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .FCI(\cd/CNT_DB/n6329 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_1 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_2 ), .FCO(\cd/CNT_DB/n6330 ));
  SLICE_175 SLICE_175( .A1(\cd/CNT_DB/counter_26 ), 
    .A0(\cd/CNT_DB/counter_25 ), .M1(\vga/config1/H_Right_Margin_nxt_0 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_8 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6328 ), .Q0(H_left_margin_8), .Q1(\vga/H_right_margin_0 ), 
    .FCO(\cd/CNT_DB/n6329 ));
  SLICE_176 SLICE_176( .B1(\cd/CNT_DB/counter_24 ), 
    .B0(\cd/CNT_DB/counter_23 ), .M1(\vga/config1/H_Left_Margin_nxt_7 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_6 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6327 ), .Q0(H_left_margin_6), .Q1(H_left_margin_7), 
    .FCO(\cd/CNT_DB/n6328 ));
  SLICE_177 SLICE_177( .B1(\cd/CNT_DB/counter_22 ), 
    .A0(\cd/CNT_DB/counter_21 ), .M1(\vga/config1/H_Left_Margin_nxt_5 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_4 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6326 ), .Q0(H_left_margin_4), .Q1(H_left_margin_5), 
    .FCO(\cd/CNT_DB/n6327 ));
  SLICE_178 SLICE_178( .A1(\cd/CNT_DB/counter_20 ), 
    .B0(\cd/CNT_DB/counter_19 ), .M1(\vga/config1/H_Left_Margin_nxt_3 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_2 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6325 ), .Q0(H_left_margin_2), .Q1(H_left_margin_3), 
    .FCO(\cd/CNT_DB/n6326 ));
  SLICE_179 SLICE_179( .A1(\cd/CNT_DB/counter_18 ), 
    .B0(\cd/CNT_DB/counter_17 ), .M1(\vga/H_right_margin_0 ), 
    .M0(H_left_margin_1), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .FCI(\cd/CNT_DB/n6324 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_1 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_0 ), .FCO(\cd/CNT_DB/n6325 ));
  SLICE_180 SLICE_180( .B1(\cd/CNT_DB/counter_16 ), 
    .B0(\cd/CNT_DB/counter_15 ), .M1(\vga/config1/H_Count_Max_nxt_9 ), 
    .M0(\vga/config1/H_Count_Max_nxt_8 ), .CLK(clk_c), .FCI(\cd/CNT_DB/n6323 ), 
    .Q0(\vga/H_count_max_8 ), .Q1(\vga/H_count_max_9 ), 
    .FCO(\cd/CNT_DB/n6324 ));
  SLICE_181 SLICE_181( .A1(\cd/CNT_DB/counter_14 ), 
    .A0(\cd/CNT_DB/counter_13 ), .M1(\vga/config1/H_Count_Max_nxt_7 ), 
    .M0(\vga/config1/H_Count_Max_nxt_6 ), .CLK(clk_c), .FCI(\cd/CNT_DB/n6322 ), 
    .Q0(\vga/H_count_max_6 ), .Q1(\vga/H_count_max_7 ), 
    .FCO(\cd/CNT_DB/n6323 ));
  SLICE_182 SLICE_182( .B1(\cd/CNT_DB/counter_12 ), 
    .A0(\cd/CNT_DB/counter_11 ), .M1(\vga/config1/H_Count_Max_nxt_5 ), 
    .M0(\vga/config1/H_Count_Max_nxt_4 ), .CLK(clk_c), .FCI(\cd/CNT_DB/n6321 ), 
    .Q0(\vga/H_count_max_4 ), .Q1(\vga/H_count_max_5 ), 
    .FCO(\cd/CNT_DB/n6322 ));
  SLICE_183 SLICE_183( .B1(\cd/CNT_DB/counter_10 ), .B0(\cd/CNT_DB/counter_9 ), 
    .M1(\vga/config1/H_Count_Max_nxt_3 ), .M0(\vga/config1/H_Count_Max_nxt_2 ), 
    .CLK(clk_c), .FCI(\cd/CNT_DB/n6320 ), .Q0(\vga/H_count_max_2 ), 
    .Q1(\vga/H_count_max_3 ), .FCO(\cd/CNT_DB/n6321 ));
  SLICE_184 SLICE_184( .B1(\cd/CNT_DB/counter_8 ), .B0(\cd/CNT_DB/counter_7 ), 
    .M1(\vga/config1/H_Right_Margin_nxt_9 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_8 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6319 ), .Q0(\vga/H_right_margin_8 ), 
    .Q1(\vga/H_right_margin_9 ), .FCO(\cd/CNT_DB/n6320 ));
  SLICE_185 SLICE_185( .A1(\cd/CNT_DB/counter_6 ), .B0(\cd/CNT_DB/counter_5 ), 
    .M1(\vga/config1/H_Right_Margin_nxt_7 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_6 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6318 ), .Q0(H_right_margin_6), .Q1(H_right_margin_7), 
    .FCO(\cd/CNT_DB/n6319 ));
  SLICE_186 SLICE_186( .A1(\cd/CNT_DB/counter_4 ), .B0(\cd/CNT_DB/counter_3 ), 
    .M1(\vga/config1/H_Right_Margin_nxt_5 ), 
    .M0(\vga/config1/H_Right_Margin_nxt_4 ), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6317 ), .Q0(\vga/H_right_margin_4 ), 
    .Q1(H_right_margin_5), .FCO(\cd/CNT_DB/n6318 ));
  SLICE_187 SLICE_187( .A1(\cd/CNT_DB/counter_2 ), .B0(\cd/CNT_DB/counter_1 ), 
    .A0(\cd/CNT_DB/counter_0 ), .M1(\vga/config1/H_Left_Margin_nxt_1 ), 
    .M0(\vga/config1/H_Left_Margin_nxt_0 ), .CLK(clk_c), .Q0(H_left_margin_0), 
    .Q1(H_left_margin_1), .FCO(\cd/CNT_DB/n6317 ));
  cd_CNT_DB_SLICE_188 \cd/CNT_DB/SLICE_188 ( .A0(\cd/CNT_DB/counter_31 ), 
    .DI0(\cd/CNT_DB/n134 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6300 ), .F0(\cd/CNT_DB/n134 ), 
    .Q0(\cd/CNT_DB/counter_31 ));
  cd_CNT_DB_SLICE_189 \cd/CNT_DB/SLICE_189 ( .A1(\cd/CNT_DB/counter_30 ), 
    .A0(\cd/CNT_DB/counter_29 ), .DI1(\cd/CNT_DB/n135 ), 
    .DI0(\cd/CNT_DB/n136 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6299 ), .F0(\cd/CNT_DB/n136 ), 
    .Q0(\cd/CNT_DB/counter_29 ), .F1(\cd/CNT_DB/n135 ), 
    .Q1(\cd/CNT_DB/counter_30 ), .FCO(\cd/CNT_DB/n6300 ));
  cd_CNT_DB_SLICE_190 \cd/CNT_DB/SLICE_190 ( .A1(\cd/CNT_DB/counter_28 ), 
    .A0(\cd/CNT_DB/counter_27 ), .DI1(\cd/CNT_DB/n137 ), 
    .DI0(\cd/CNT_DB/n138 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6298 ), .F0(\cd/CNT_DB/n138 ), 
    .Q0(\cd/CNT_DB/counter_27 ), .F1(\cd/CNT_DB/n137 ), 
    .Q1(\cd/CNT_DB/counter_28 ), .FCO(\cd/CNT_DB/n6299 ));
  cd_CNT_DB_SLICE_191 \cd/CNT_DB/SLICE_191 ( .A1(\cd/CNT_DB/counter_26 ), 
    .A0(\cd/CNT_DB/counter_25 ), .DI1(\cd/CNT_DB/n139 ), 
    .DI0(\cd/CNT_DB/n140 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6297 ), .F0(\cd/CNT_DB/n140 ), 
    .Q0(\cd/CNT_DB/counter_25 ), .F1(\cd/CNT_DB/n139 ), 
    .Q1(\cd/CNT_DB/counter_26 ), .FCO(\cd/CNT_DB/n6298 ));
  cd_CNT_DB_SLICE_192 \cd/CNT_DB/SLICE_192 ( .A1(\cd/CNT_DB/counter_24 ), 
    .A0(\cd/CNT_DB/counter_23 ), .DI1(\cd/CNT_DB/n141 ), 
    .DI0(\cd/CNT_DB/n142 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6296 ), .F0(\cd/CNT_DB/n142 ), 
    .Q0(\cd/CNT_DB/counter_23 ), .F1(\cd/CNT_DB/n141 ), 
    .Q1(\cd/CNT_DB/counter_24 ), .FCO(\cd/CNT_DB/n6297 ));
  cd_CNT_DB_SLICE_193 \cd/CNT_DB/SLICE_193 ( .A1(\cd/CNT_DB/counter_22 ), 
    .A0(\cd/CNT_DB/counter_21 ), .DI1(\cd/CNT_DB/n143 ), 
    .DI0(\cd/CNT_DB/n144 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6295 ), .F0(\cd/CNT_DB/n144 ), 
    .Q0(\cd/CNT_DB/counter_21 ), .F1(\cd/CNT_DB/n143 ), 
    .Q1(\cd/CNT_DB/counter_22 ), .FCO(\cd/CNT_DB/n6296 ));
  cd_CNT_DB_SLICE_194 \cd/CNT_DB/SLICE_194 ( .A1(\cd/CNT_DB/counter_20 ), 
    .A0(\cd/CNT_DB/counter_19 ), .DI1(\cd/CNT_DB/n145 ), 
    .DI0(\cd/CNT_DB/n146 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6294 ), .F0(\cd/CNT_DB/n146 ), 
    .Q0(\cd/CNT_DB/counter_19 ), .F1(\cd/CNT_DB/n145 ), 
    .Q1(\cd/CNT_DB/counter_20 ), .FCO(\cd/CNT_DB/n6295 ));
  cd_CNT_DB_SLICE_195 \cd/CNT_DB/SLICE_195 ( .A1(\cd/CNT_DB/counter_18 ), 
    .A0(\cd/CNT_DB/counter_17 ), .DI1(\cd/CNT_DB/n147 ), 
    .DI0(\cd/CNT_DB/n148 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6293 ), .F0(\cd/CNT_DB/n148 ), 
    .Q0(\cd/CNT_DB/counter_17 ), .F1(\cd/CNT_DB/n147 ), 
    .Q1(\cd/CNT_DB/counter_18 ), .FCO(\cd/CNT_DB/n6294 ));
  cd_CNT_DB_SLICE_196 \cd/CNT_DB/SLICE_196 ( .A1(\cd/CNT_DB/counter_16 ), 
    .A0(\cd/CNT_DB/counter_15 ), .DI1(\cd/CNT_DB/n149 ), 
    .DI0(\cd/CNT_DB/n150 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6292 ), .F0(\cd/CNT_DB/n150 ), 
    .Q0(\cd/CNT_DB/counter_15 ), .F1(\cd/CNT_DB/n149 ), 
    .Q1(\cd/CNT_DB/counter_16 ), .FCO(\cd/CNT_DB/n6293 ));
  cd_CNT_DB_SLICE_197 \cd/CNT_DB/SLICE_197 ( .A1(\cd/CNT_DB/counter_14 ), 
    .A0(\cd/CNT_DB/counter_13 ), .DI1(\cd/CNT_DB/n151 ), 
    .DI0(\cd/CNT_DB/n152 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6291 ), .F0(\cd/CNT_DB/n152 ), 
    .Q0(\cd/CNT_DB/counter_13 ), .F1(\cd/CNT_DB/n151 ), 
    .Q1(\cd/CNT_DB/counter_14 ), .FCO(\cd/CNT_DB/n6292 ));
  cd_CNT_DB_SLICE_198 \cd/CNT_DB/SLICE_198 ( .A1(\cd/CNT_DB/counter_12 ), 
    .A0(\cd/CNT_DB/counter_11 ), .DI1(\cd/CNT_DB/n153 ), 
    .DI0(\cd/CNT_DB/n154 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .FCI(\cd/CNT_DB/n6290 ), .F0(\cd/CNT_DB/n154 ), 
    .Q0(\cd/CNT_DB/counter_11 ), .F1(\cd/CNT_DB/n153 ), 
    .Q1(\cd/CNT_DB/counter_12 ), .FCO(\cd/CNT_DB/n6291 ));
  cd_CNT_DB_SLICE_199 \cd/CNT_DB/SLICE_199 ( .A1(\cd/CNT_DB/counter_10 ), 
    .A0(\cd/CNT_DB/counter_9 ), .DI1(\cd/CNT_DB/n155 ), .DI0(\cd/CNT_DB/n156 ), 
    .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), .FCI(\cd/CNT_DB/n6289 ), 
    .F0(\cd/CNT_DB/n156 ), .Q0(\cd/CNT_DB/counter_9 ), .F1(\cd/CNT_DB/n155 ), 
    .Q1(\cd/CNT_DB/counter_10 ), .FCO(\cd/CNT_DB/n6290 ));
  cd_CNT_DB_SLICE_200 \cd/CNT_DB/SLICE_200 ( .A1(\cd/CNT_DB/counter_8 ), 
    .A0(\cd/CNT_DB/counter_7 ), .DI1(\cd/CNT_DB/n157 ), .DI0(\cd/CNT_DB/n158 ), 
    .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), .FCI(\cd/CNT_DB/n6288 ), 
    .F0(\cd/CNT_DB/n158 ), .Q0(\cd/CNT_DB/counter_7 ), .F1(\cd/CNT_DB/n157 ), 
    .Q1(\cd/CNT_DB/counter_8 ), .FCO(\cd/CNT_DB/n6289 ));
  cd_CNT_DB_SLICE_201 \cd/CNT_DB/SLICE_201 ( .A1(\cd/CNT_DB/counter_6 ), 
    .A0(\cd/CNT_DB/counter_5 ), .DI1(\cd/CNT_DB/n159 ), .DI0(\cd/CNT_DB/n160 ), 
    .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), .FCI(\cd/CNT_DB/n6287 ), 
    .F0(\cd/CNT_DB/n160 ), .Q0(\cd/CNT_DB/counter_5 ), .F1(\cd/CNT_DB/n159 ), 
    .Q1(\cd/CNT_DB/counter_6 ), .FCO(\cd/CNT_DB/n6288 ));
  cd_CNT_DB_SLICE_202 \cd/CNT_DB/SLICE_202 ( .A1(\cd/CNT_DB/counter_4 ), 
    .A0(\cd/CNT_DB/counter_3 ), .DI1(\cd/CNT_DB/n161 ), .DI0(\cd/CNT_DB/n162 ), 
    .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), .FCI(\cd/CNT_DB/n6286 ), 
    .F0(\cd/CNT_DB/n162 ), .Q0(\cd/CNT_DB/counter_3 ), .F1(\cd/CNT_DB/n161 ), 
    .Q1(\cd/CNT_DB/counter_4 ), .FCO(\cd/CNT_DB/n6287 ));
  cd_CNT_DB_SLICE_203 \cd/CNT_DB/SLICE_203 ( .A1(\cd/CNT_DB/counter_2 ), 
    .A0(\cd/CNT_DB/counter_1 ), .DI1(\cd/CNT_DB/n163 ), .DI0(\cd/CNT_DB/n164 ), 
    .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), .FCI(\cd/CNT_DB/n6285 ), 
    .F0(\cd/CNT_DB/n164 ), .Q0(\cd/CNT_DB/counter_1 ), .F1(\cd/CNT_DB/n163 ), 
    .Q1(\cd/CNT_DB/counter_2 ), .FCO(\cd/CNT_DB/n6286 ));
  cd_CNT_DB_SLICE_204 \cd/CNT_DB/SLICE_204 ( .A1(\cd/CNT_DB/counter_0 ), 
    .DI1(\cd/CNT_DB/n165 ), .LSR(counter_31__N_85_adj_1144), .CLK(clk_c), 
    .F1(\cd/CNT_DB/n165 ), .Q1(\cd/CNT_DB/counter_0 ), .FCO(\cd/CNT_DB/n6285 ));
  vga_CounterH_SLICE_205 \vga/CounterH/SLICE_205 ( .D1(\vga/CounterH/n1483 ), 
    .B1(\vga/CounterH/n64 ), .D0(\vga/CounterH/n1483 ), 
    .A0(\vga/CounterH/n65 ), .DI1(\vga/CounterH/n78 ), 
    .DI0(\vga/CounterH/n79 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n79 ), .Q0(Count_h_0), .F1(\vga/CounterH/n78 ), 
    .Q1(Count_h_1));
  vga_CounterH_SLICE_206 \vga/CounterH/SLICE_206 ( .C1(\vga/CounterH/n1483 ), 
    .B1(\vga/CounterH/n62 ), .C0(\vga/CounterH/n1483 ), 
    .A0(\vga/CounterH/n63 ), .DI1(\vga/CounterH/n76 ), 
    .DI0(\vga/CounterH/n77 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n77 ), .Q0(Count_h_2), .F1(\vga/CounterH/n76 ), 
    .Q1(Count_h_3));
  vga_CounterH_SLICE_207 \vga/CounterH/SLICE_207 ( .B1(\vga/CounterH/n60 ), 
    .A1(\vga/CounterH/n1483 ), .D0(\vga/CounterH/n61 ), 
    .A0(\vga/CounterH/n1483 ), .DI1(\vga/CounterH/n74 ), 
    .DI0(\vga/CounterH/n75 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n75 ), .Q0(Count_h_4), .F1(\vga/CounterH/n74 ), 
    .Q1(Count_h_5));
  vga_CounterH_SLICE_208 \vga/CounterH/SLICE_208 ( .C1(\vga/CounterH/n58 ), 
    .B1(\vga/CounterH/n1483 ), .B0(\vga/CounterH/n1483 ), 
    .A0(\vga/CounterH/n59 ), .DI1(\vga/CounterH/n72 ), 
    .DI0(\vga/CounterH/n73 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n73 ), .Q0(Count_h_6), .F1(\vga/CounterH/n72 ), 
    .Q1(Count_h_7));
  vga_CounterH_SLICE_209 \vga/CounterH/SLICE_209 ( .D1(\vga/CounterH/n1483 ), 
    .C1(\vga/CounterH/n56 ), .D0(\vga/CounterH/n1483 ), 
    .B0(\vga/CounterH/n57 ), .DI1(\vga/CounterH/n70 ), 
    .DI0(\vga/CounterH/n71 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n71 ), .Q0(Count_h_8), .F1(\vga/CounterH/n70 ), 
    .Q1(Count_h_9));
  vga_CounterH_SLICE_210 \vga/CounterH/SLICE_210 ( .B1(\vga/CounterH/n1483 ), 
    .A1(\vga/CounterH/n54 ), .D0(\vga/CounterH/n55 ), 
    .B0(\vga/CounterH/n1483 ), .DI1(\vga/CounterH/n68 ), 
    .DI0(\vga/CounterH/n69 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), 
    .F0(\vga/CounterH/n69 ), .Q0(Count_h_10), .F1(\vga/CounterH/n68 ), 
    .Q1(Count_h_11));
  vga_CounterV_SLICE_211 \vga/CounterV/SLICE_211 ( .C1(\vga/CounterV/n64 ), 
    .A1(\vga/CounterV/n1498 ), .B0(\vga/CounterV/n65 ), 
    .A0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n78 ), 
    .DI0(\vga/CounterV/n79 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n79 ), .Q0(Count_v_0), .F1(\vga/CounterV/n78 ), 
    .Q1(Count_v_1));
  vga_CounterV_SLICE_212 \vga/CounterV/SLICE_212 ( .C1(\vga/CounterV/n1498 ), 
    .A1(\vga/CounterV/n62 ), .D0(\vga/CounterV/n63 ), 
    .C0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n76 ), 
    .DI0(\vga/CounterV/n77 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n77 ), .Q0(Count_v_2), .F1(\vga/CounterV/n76 ), 
    .Q1(Count_v_3));
  vga_CounterV_SLICE_213 \vga/CounterV/SLICE_213 ( .C1(\vga/CounterV/n1498 ), 
    .A1(\vga/CounterV/n60 ), .D0(\vga/CounterV/n61 ), 
    .C0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n74 ), 
    .DI0(\vga/CounterV/n75 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n75 ), .Q0(Count_v_4), .F1(\vga/CounterV/n74 ), 
    .Q1(Count_v_5));
  vga_CounterV_SLICE_214 \vga/CounterV/SLICE_214 ( .D1(\vga/CounterV/n1498 ), 
    .C1(\vga/CounterV/n58 ), .C0(\vga/CounterV/n59 ), 
    .A0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n72 ), 
    .DI0(\vga/CounterV/n73 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n73 ), .Q0(Count_v_6), .F1(\vga/CounterV/n72 ), 
    .Q1(Count_v_7));
  vga_CounterV_SLICE_215 \vga/CounterV/SLICE_215 ( .D1(\vga/CounterV/n56 ), 
    .B1(\vga/CounterV/n1498 ), .C0(\vga/CounterV/n57 ), 
    .B0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n70 ), 
    .DI0(\vga/CounterV/n71 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n71 ), .Q0(Count_v_8), .F1(\vga/CounterV/n70 ), 
    .Q1(Count_v_9));
  vga_CounterV_SLICE_216 \vga/CounterV/SLICE_216 ( .D1(\vga/CounterV/n54 ), 
    .A1(\vga/CounterV/n1498 ), .D0(\vga/CounterV/n55 ), 
    .A0(\vga/CounterV/n1498 ), .DI1(\vga/CounterV/n68 ), 
    .DI0(\vga/CounterV/n69 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n69 ), .Q0(Count_v_10), .F1(\vga/CounterV/n68 ), 
    .Q1(Count_v_11));
  cm_assignCM_SLICE_217 \cm/assignCM/SLICE_217 ( .D1(\cm/assignCM/n1092 ), 
    .B1(\cm/assignCM/Left_UP_reg_0 ), .A1(\cm/assignCM/n993 ), 
    .D0(\cm/assignCM/Right_UP_reg_0 ), .C0(\cm/assignCM/n1078 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_0 ), .DI0(\cm/assignCM/n922 ), 
    .M0(\cm/assignCM/n6881 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n922 ), .Q0(Data_VGA_0));
  cm_assignCM_SLICE_218 \cm/assignCM/SLICE_218 ( .D1(\cm/assignCM/n7332 ), 
    .C1(\cm/assignCM/n1092 ), .B1(\cm/assignCM/n991 ), 
    .A1(\cm/assignCM/Left_UP_reg_2 ), .D0(\cm/assignCM/n992 ), 
    .C0(\cm/assignCM/n1092 ), .B0(\cm/assignCM/n7332 ), 
    .A0(\cm/assignCM/Left_UP_reg_1 ), .DI1(\cm/assignCM/n920 ), 
    .DI0(\cm/assignCM/n921 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n921 ), .Q0(Data_VGA_1), .F1(\cm/assignCM/n920 ), 
    .Q1(Data_VGA_2));
  cm_assignCM_SLICE_219 \cm/assignCM/SLICE_219 ( .D1(\cm/assignCM/n1092 ), 
    .C1(\cm/assignCM/n990 ), .B1(\cm/assignCM/Left_UP_reg_3 ), 
    .D0(\cm/assignCM/Left_DOWN_reg_3 ), .C0(\cm/assignCM/Right_UP_reg_3 ), 
    .A0(\cm/assignCM/n1078 ), .DI0(\cm/assignCM/n919 ), 
    .M0(\cm/assignCM/n6881 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n919 ), .Q0(Data_VGA_3));
  cm_assignCM_SLICE_220 \cm/assignCM/SLICE_220 ( 
    .D1(\cm/assignCM/Left_UP_reg_4 ), .C1(\cm/assignCM/n7305 ), 
    .A1(\cm/assignCM/n1092 ), .D0(\cm/assignCM/Right_UP_reg_4 ), 
    .C0(\cm/assignCM/n1078 ), .B0(\cm/assignCM/Left_DOWN_reg_4 ), 
    .DI0(\cm/assignCM/n6458 ), .M0(\cm/assignCM/n6881 ), 
    .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n6458 ), .Q0(Data_VGA_4));
  cm_assignCM_SLICE_221 \cm/assignCM/SLICE_221 ( .D1(\cm/assignCM/n7332 ), 
    .C1(\cm/assignCM/Left_UP_reg_6 ), .B1(\cm/assignCM/n1092 ), 
    .A1(\cm/assignCM/n987 ), .D0(\cm/assignCM/n988 ), 
    .C0(\cm/assignCM/Left_UP_reg_5 ), .B0(\cm/assignCM/n1092 ), 
    .A0(\cm/assignCM/n7332 ), .DI1(\cm/assignCM/n916 ), 
    .DI0(\cm/assignCM/n917 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n917 ), .Q0(Data_VGA_5), .F1(\cm/assignCM/n916 ), 
    .Q1(Data_VGA_6));
  cm_assignCM_SLICE_222 \cm/assignCM/SLICE_222 ( .C1(\cm/assignCM/n12 ), 
    .B1(\cm/assignCM/n1092 ), .A1(\cm/assignCM/Left_UP_reg_7 ), 
    .D0(\cm/assignCM/n1078 ), .B0(\cm/assignCM/Left_DOWN_reg_7 ), 
    .A0(\cm/assignCM/Right_UP_reg_7 ), .DI0(\cm/assignCM/n6460 ), 
    .M0(\cm/assignCM/n6881 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n6460 ), .Q0(Data_VGA_7));
  cm_assignCM_SLICE_223 \cm/assignCM/SLICE_223 ( .D1(\cm/assignCM/n984 ), 
    .C1(\cm/assignCM/n1092 ), .B1(\cm/assignCM/n7332 ), 
    .A1(\cm/assignCM/Left_UP_reg_9 ), .D0(\cm/assignCM/Left_UP_reg_8 ), 
    .C0(\cm/assignCM/n1092 ), .B0(\cm/assignCM/n7332 ), 
    .A0(\cm/assignCM/n985 ), .DI1(\cm/assignCM/n913 ), 
    .DI0(\cm/assignCM/n914 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n914 ), .Q0(Data_VGA_8), .F1(\cm/assignCM/n913 ), 
    .Q1(Data_VGA_9));
  cm_assignCM_SLICE_224 \cm/assignCM/SLICE_224 ( .D1(\cm/Counter_X_Valid ), 
    .C1(button_signal_DEBUG_VGA), .B1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/n7332 ), .C0(\cm/assignCM/n1092 ), 
    .B0(\cm/assignCM/Left_UP_reg_10 ), .A0(\cm/assignCM/n983 ), 
    .DI0(\cm/assignCM/n912 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n912 ), .Q0(Data_VGA_10), .F1(\cm/assignCM/n7332 ));
  cm_assignCM_SLICE_225 \cm/assignCM/SLICE_225 ( .C1(\cm/assignCM/n1092 ), 
    .B1(\cm/assignCM/n9 ), .A1(\cm/assignCM/Left_UP_reg_11 ), 
    .C0(\cm/assignCM/n1078 ), .B0(\cm/assignCM/Left_DOWN_reg_11 ), 
    .A0(\cm/assignCM/Right_UP_reg_11 ), .DI0(\cm/assignCM/n911 ), 
    .M0(\cm/assignCM/n6881 ), .CE(\cm/assignCM/clk_c_enable_79 ), .CLK(clk_c), 
    .OFX0(\cm/assignCM/n911 ), .Q0(Data_VGA_11));
  FIFO_UART_CM_SLICE_230 \FIFO_UART_CM/SLICE_230 ( .D1(counter_23_N_178_9), 
    .C1(n1553), .B1(clk_UART), .A1(\FIFO_UART_CM/n7357 ), 
    .C0(button_signal_DEBUG_UART), .A0(UART_valid_out), 
    .DI0(\FIFO_UART_CM/n7357 ), .CLK(clk_UART), .F0(\FIFO_UART_CM/n7357 ), 
    .Q0(\FIFO_UART_CM/w_empty_reg ), .F1(\FIFO_UART_CM/clk_c_enable_61 ));
  vga_CounterH_SLICE_231 \vga/CounterH/SLICE_231 ( .D0(n6758), .C0(Count_h_8), 
    .B0(n1112), .A0(\vga/CounterH/n1483 ), .DI0(\vga/CounterH/n1769 ), 
    .LSR(\vga/Count_h_11__N_948 ), .CLK(clk_c), .F0(\vga/CounterH/n1769 ), 
    .Q0(HSYNC_c));
  uart_UART_STATE_SLICE_246 \uart/UART_STATE/SLICE_246 ( 
    .D1(\uart/clk_c_enable_67 ), .C1(n7345), .B1(\uart/UART_STATE/n376 ), 
    .A1(UART_out_1), .D0(n7345), .C0(\uart/UART_STATE/n376 ), 
    .B0(\uart/clk_c_enable_67 ), .A0(UART_out_0), 
    .DI1(\uart/UART_STATE/n3073 ), .DI0(\uart/UART_STATE/n3071 ), 
    .CE(clk_c_enable_155), .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n3071 ), .Q0(UART_out_1), 
    .F1(\uart/UART_STATE/n3073 ), .Q1(UART_out_2));
  uart_UART_STATE_SLICE_247 \uart/UART_STATE/SLICE_247 ( .D1(n7345), 
    .C1(UART_out_3), .B1(\uart/clk_c_enable_67 ), .A1(\uart/UART_STATE/n376 ), 
    .D0(n7345), .C0(UART_out_2), .B0(\uart/clk_c_enable_67 ), 
    .A0(\uart/UART_STATE/n376 ), .DI1(\uart/UART_STATE/n3077 ), 
    .DI0(\uart/UART_STATE/n3075 ), .CE(clk_c_enable_155), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n3075 ), .Q0(UART_out_3), 
    .F1(\uart/UART_STATE/n3077 ), .Q1(UART_out_4));
  uart_UART_STATE_SLICE_248 \uart/UART_STATE/SLICE_248 ( .D1(n7345), 
    .C1(UART_out_5), .B1(\uart/clk_c_enable_67 ), .A1(\uart/UART_STATE/n376 ), 
    .D0(n7345), .C0(UART_out_4), .B0(\uart/clk_c_enable_67 ), 
    .A0(\uart/UART_STATE/n376 ), .DI1(\uart/UART_STATE/n3081 ), 
    .DI0(\uart/UART_STATE/n3079 ), .CE(clk_c_enable_155), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n3079 ), .Q0(UART_out_5), 
    .F1(\uart/UART_STATE/n3081 ), .Q1(UART_out_6));
  uart_SLICE_249 \uart/SLICE_249 ( .D1(counter_23_N_178_9), .C1(n1553), 
    .B1(clk_UART), .A1(valid_data), .D0(n7345), .C0(\uart/clk_c_enable_67 ), 
    .B0(UART_out_6), .A0(\uart/UART_STATE/n376 ), 
    .DI0(\uart/UART_STATE/n3083 ), .M1(\uart/data ), .CE(clk_c_enable_155), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n3083 ), .Q0(UART_out_7), .F1(\uart/clk_c_enable_67 ), 
    .Q1(UART_out_0));
  uart_UART_STATE_SLICE_255 \uart/UART_STATE/SLICE_255 ( 
    .D1(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .B1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .D0(n374), 
    .C0(\uart/UART_STATE/n7349 ), .B0(valid_data), .A0(\uart/data ), 
    .DI0(\uart/UART_STATE/n6370 ), .CE(\uart/UART_STATE/clk_UART_enable_5 ), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_UART), 
    .F0(\uart/UART_STATE/n6370 ), .Q0(UART_valid_out), 
    .F1(\uart/UART_STATE/n7349 ));
  SLICE_256 SLICE_256( .D1(Count_v_11), .C1(Count_v_9), .B1(Count_v_10), 
    .A1(Count_v_8), .D0(\vga/CounterV/n1498 ), .C0(n6752), .B0(n1115), 
    .DI0(\vga/CounterV/n1767 ), .LSR(\vga/Count_h_11__N_948 ), .CLK(HSYNC_c), 
    .F0(\vga/CounterV/n1767 ), .Q0(VSYNC_c), .F1(n6752));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_275 \cd/CLOCK_DIVIDER_CONFIG/SLICE_275 ( 
    .D1(c_data_2), .C1(c_valid), .B1(c_data_1), 
    .A1(\cd/CLOCK_DIVIDER_CONFIG/n7327 ), .D0(c_addr_3), .C0(c_addr_0), 
    .B0(c_addr_2), .A0(c_addr_1), .DI0(\cd/CLOCK_DIVIDER_CONFIG/n7327 ), 
    .LSR(c_valid), .CLK(clk_VGA), .F0(\cd/CLOCK_DIVIDER_CONFIG/n7327 ), 
    .Q0(c_UART_ready), .F1(\cd/CLOCK_DIVIDER_CONFIG/n3067 ));
  SLICE_276 SLICE_276( .D1(n7361), .C1(c_addr_0), .B1(c_valid), .A1(c_addr_1), 
    .D0(c_addr_2), .C0(c_addr_3), .B0(c_addr_0), .A0(c_addr_1), 
    .DI0(\cd/CLOCK_DIVIDER_CONFIG/n7340 ), .LSR(n3880), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n7340 ), .Q0(c_VGA_ready), .F1(n7325));
  cm_configCM_SLICE_277 \cm/configCM/SLICE_277 ( .D1(\cm/configCM/n7351 ), 
    .A1(\cm/configCM/RXD_Data_reg_15 ), .D0(\cm/configCM/n7351 ), 
    .B0(\cm/configCM/RXD_Data_reg_11 ), .A0(\cm/configCM/RXD_Data_reg_15 ), 
    .DI0(\cm/configCM/n6426 ), .CE(\cm/configCM/clk_c_enable_148 ), 
    .CLK(clk_c), .F0(\cm/configCM/n6426 ), .Q0(c_addr_0), 
    .F1(\cm/configCM/n7339 ));
  cm_configCM_SLICE_278 \cm/configCM/SLICE_278 ( 
    .D1(\cm/configCM/RXD_Data_reg_13 ), .C1(\cm/configCM/RXD_Data_reg_11 ), 
    .B1(\cm/configCM/RXD_Data_reg_12 ), .A1(\cm/configCM/RXD_Data_reg_14 ), 
    .D0(\cm/configCM/RXD_Data_reg_13 ), .C0(\cm/configCM/RXD_Data_reg_11 ), 
    .B0(\cm/configCM/RXD_Data_reg_12 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .DI1(\cm/configCM/n2883 ), .DI0(\cm/configCM/n1194 ), 
    .CE(\cm/configCM/clk_c_enable_148 ), .LSR(\cm/configCM/n3058 ), 
    .CLK(clk_c), .F0(\cm/configCM/n1194 ), .Q0(c_addr_1), 
    .F1(\cm/configCM/n2883 ), .Q1(c_addr_2));
  cm_configCM_SLICE_279 \cm/configCM/SLICE_279 ( 
    .D1(\cm/configCM/RXD_Data_reg_14 ), .C1(\cm/configCM/RXD_Data_reg_13 ), 
    .A1(\cm/configCM/RXD_Data_reg_12 ), .D0(\cm/configCM/RXD_Data_reg_11 ), 
    .C0(\cm/configCM/RXD_Data_reg_13 ), .B0(\cm/configCM/n7352 ), 
    .A0(\cm/configCM/n7339 ), .DI0(\cm/configCM/n1660 ), 
    .CE(\cm/configCM/clk_c_enable_148 ), .CLK(clk_c), .F0(\cm/configCM/n1660 ), 
    .Q0(c_addr_3), .F1(\cm/configCM/n7352 ));
  cm_configCM_SLICE_280 \cm/configCM/SLICE_280 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/n7328 ), 
    .B1(\cm/configCM/n6714 ), .A1(\cm/configCM/n2666 ), 
    .D0(\cm/configCM/RXD_Data_reg_0 ), .C0(\cm/configCM/n7312 ), 
    .B0(\cm/configCM/RXD_Data_reg_8 ), .A0(\cm/configCM/RXD_Data_reg_15 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_515_0 ), 
    .CE(\cm/configCM/clk_c_enable_146 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_515_0 ), .Q0(c_data_0), 
    .F1(\cm/configCM/n7312 ));
  cm_configCM_SLICE_281 \cm/configCM/SLICE_281 ( 
    .D0(\cm/configCM/RXD_Data_reg_1 ), .C0(\cm/configCM/n3001 ), 
    .B0(\cm/configCM/n7311 ), .A0(\cm/configCM/RXD_Data_reg_15 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_515_1 ), 
    .CE(\cm/configCM/clk_c_enable_129 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_515_1 ), .Q0(c_data_1));
  cm_configCM_SLICE_282 \cm/configCM/SLICE_282 ( 
    .D1(\cm/configCM/RXD_Data_reg_10 ), .C1(\cm/configCM/n7330 ), 
    .B1(\cm/configCM/n7352 ), .A1(\cm/configCM/RXD_Data_reg_9 ), 
    .D0(\cm/configCM/RXD_Data_reg_15 ), .C0(\cm/configCM/n8 ), 
    .B0(\cm/configCM/n7 ), .A0(\cm/configCM/RXD_Data_reg_2 ), 
    .DI0(\cm/configCM/c_data_nxt_13_N_515_2 ), 
    .CE(\cm/configCM/clk_c_enable_141 ), .CLK(clk_c), 
    .F0(\cm/configCM/c_data_nxt_13_N_515_2 ), .Q0(c_data_2), 
    .F1(\cm/configCM/n8 ));
  SLICE_283 SLICE_283( .D1(c_addr_1), .B1(c_addr_0), .D0(c_addr_1), 
    .C0(c_addr_3), .B0(c_addr_0), .A0(c_addr_2), .DI0(c_ready_next_N_344), 
    .LSR(c_valid), .CLK(clk_VGA), .F0(c_ready_next_N_344), .Q0(c_ready_1), 
    .F1(n7353));
  cm_SLICE_284 \cm/SLICE_284 ( .C1(c_VGA_ready), .A1(c_ready_1), 
    .D0(\cm/c_ready_Assign ), .C0(\cm/n6 ), .B0(c_UART_ready), 
    .A0(Load_config), .DI0(\cm/c_addr_3__N_468 ), .LSR(\cm/configCM/n6390 ), 
    .CLK(clk_c), .F0(\cm/c_addr_3__N_468 ), .Q0(c_valid), .F1(\cm/n6 ));
  SLICE_285 SLICE_285( .C1(c_data_2), .B1(c_data_1), .A1(c_data_0), 
    .C0(c_data_2), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_1 ), 
    .DI0(baudrate_next_23_N_262_0), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), .CLK(clk_VGA), 
    .F0(baudrate_next_23_N_262_0), .Q0(\cd/baudrate_0 ), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_1 ), 
    .Q1(\cd/baudrate_1 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_286 \cd/CLOCK_DIVIDER_CONFIG/SLICE_286 ( 
    .C0(c_data_1), .A0(c_data_0), .DI0(\cd/CLOCK_DIVIDER_CONFIG/n7354 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n3067 ), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n7354 ), .Q0(\cd/baudrate_2 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_287 \cd/CLOCK_DIVIDER_CONFIG/SLICE_287 ( 
    .D1(c_valid), .C1(c_data_2), .B1(\cd/CLOCK_DIVIDER_CONFIG/n7327 ), 
    .C0(c_data_2), .B0(c_data_1), 
    .DI0(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 ), 
    .Q0(\cd/baudrate_3 ), .F1(\cd/CLOCK_DIVIDER_CONFIG/n3069 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_289 \cd/CLOCK_DIVIDER_CONFIG/SLICE_289 ( 
    .A0(c_data_0), .DI0(\cd/CLOCK_DIVIDER_CONFIG/n7344 ), .M1(c_data_0), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n3069 ), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n7344 ), .Q0(\cd/baudrate_6 ), 
    .Q1(\cd/baudrate_7 ));
  SLICE_290 SLICE_290( .D1(counter_31__N_85_adj_1144), .C1(button_ff), 
    .B1(clk_DB), .A1(btnVS_c), .D0(counter_31__N_85_adj_1144), .A0(clk_DB), 
    .DI0(\cd/CNT_DB/clkout_N_118 ), .M1(\vga/config1/H_Sync_Pulse_nxt_0 ), 
    .CLK(clk_c), .F0(\cd/CNT_DB/clkout_N_118 ), .Q0(clk_DB), .F1(n3055), 
    .Q1(H_sync_pulse_0));
  SLICE_291 SLICE_291( .D1(\FIFO_UART_CM/w_empty_reg ), 
    .C1(\FIFO_UART_CM/n7357 ), .B1(clk_LM), .A1(counter_31__N_85), .B0(clk_LM), 
    .A0(counter_31__N_85), .DI0(\cd/CNT_LM/clkout_N_118 ), 
    .M1(\vga/config1/V_Right_Margin_nxt_0 ), .CLK(clk_c), 
    .F0(\cd/CNT_LM/clkout_N_118 ), .Q0(clk_LM), 
    .F1(\FIFO_UART_CM/clk_c_enable_158 ), .Q1(\vga/V_right_margin_0 ));
  SLICE_292 SLICE_292( .C0(n1553), .B0(counter_23_N_178_9), .A0(clk_UART), 
    .DI0(clkout_N_203), .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), 
    .F0(clkout_N_203), .Q0(clk_UART));
  cm_counterH_SLICE_293 \cm/counterH/SLICE_293 ( .C1(HSYNC_c), 
    .B1(\cm/counterH/n1442 ), .A1(\cm/counterH/n1429 ), 
    .B0(\cm/counterH/n1442 ), .A0(\cm/counterH/n1429 ), 
    .DI0(\cm/counterH/n7322 ), .CE(HSYNC_c), .CLK(clk_c), 
    .F0(\cm/counterH/n7322 ), .Q0(\cm/Counter_X_Valid ), 
    .F1(\cm/counterH/n3045 ));
  cm_counterV_SLICE_294 \cm/counterV/SLICE_294 ( .C1(\cm/counterV/n1468 ), 
    .B1(VSYNC_c), .A1(\cm/counterV/n1455 ), .C0(\cm/counterV/n1468 ), 
    .A0(\cm/counterV/n1455 ), .DI0(\cm/counterV/n7321 ), .CE(VSYNC_c), 
    .CLK(clk_c), .F0(\cm/counterV/n7321 ), .Q0(\cm/Counter_Y_Valid ), 
    .F1(\cm/counterV/n3043 ));
  SLICE_295 SLICE_295( .D1(c_data_0), .A1(c_data_1), .D0(c_data_0), 
    .A0(c_data_1), .DI1(n7358), .DI0(H_BackPorch_nxt_7_N_772_3), 
    .CE(clk_c_enable_89), .CLK(clk_c), .F0(H_BackPorch_nxt_7_N_772_3), 
    .Q0(\cm/H_BackPorch_3 ), .F1(n7358), .Q1(\cm/H_BackPorch_4 ));
  SLICE_296 SLICE_296( .C1(c_data_1), .B1(c_data_0), .C0(c_data_1), 
    .B0(c_data_0), .DI1(\cm/assignCM/n7355 ), .DI0(H_Count_Max_nxt_11__N_1021), 
    .CE(clk_c_enable_89), .CLK(clk_c), .F0(H_Count_Max_nxt_11__N_1021), 
    .Q0(\cm/H_BackPorch_5 ), .F1(\cm/assignCM/n7355 ), .Q1(\cm/H_BackPorch_6 ));
  SLICE_298 SLICE_298( .C0(c_data_1), .DI0(H_Left_Margin_nxt_8__N_957), 
    .CE(clk_c_enable_89), .CLK(clk_c), .F0(H_Left_Margin_nxt_8__N_957), 
    .Q0(\cm/V_BackPorch_1 ));
  cm_assignCM_SLICE_299 \cm/assignCM/SLICE_299 ( .D1(n7325), 
    .C1(button_signal_VS), .B1(button_signal_HS), .A1(c_data_1), .D0(c_data_0), 
    .C0(button_signal_VS), .B0(button_signal_HS), .A0(n7325), 
    .DI1(\cm/assignCM/Current_Qudran_Config_nxt_1_N_755_1 ), 
    .DI0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_755_0 ), 
    .CE(\cm/assignCM/clk_c_enable_90 ), .CLK(clk_c), 
    .F0(\cm/assignCM/Current_Qudran_Config_nxt_1_N_755_0 ), 
    .Q0(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .F1(\cm/assignCM/Current_Qudran_Config_nxt_1_N_755_1 ), 
    .Q1(\cm/assignCM/Current_Qudran_Config_reg_1 ));
  SLICE_330 SLICE_330( .D1(c_addr_0), .C1(c_valid), .B1(c_addr_1), .A1(n7361), 
    .D0(n2589), .C0(H_BackPorch_nxt_7__N_780), 
    .B0(\vga/config1/c_data_1_derived_1 ), .A0(n7326), .DI0(c_ready_nxt_N_904), 
    .LSR(button_signal_DEBUG_VGA), .CLK(clk_c), .F0(c_ready_nxt_N_904), 
    .Q0(\cm/c_ready_Assign ), .F1(H_BackPorch_nxt_7__N_780));
  cm_configCM_SLICE_339 \cm/configCM/SLICE_339 ( 
    .D1(\cm/configCM/State_reg_0 ), .B1(\cm/configCM/State_reg_1 ), 
    .A1(\cm/configCM/State_nxt_2_N_472_1 ), .D0(\cm/configCM/State_reg_0 ), 
    .B0(\cm/configCM/State_reg_1 ), .A0(UART_out_CM_data_empty), 
    .DI0(\cm/configCM/State_nxt_2__N_481 ), .M0(\cm/configCM/State_reg_2 ), 
    .CLK(\cm/configCM/State_nxt_2__N_486 ), 
    .OFX0(\cm/configCM/State_nxt_2__N_481 ), .Q0(\cm/configCM/State_nxt_0 ));
  cm_configCM_SLICE_340 \cm/configCM/SLICE_340 ( 
    .D0(\cm/configCM/State_nxt_2_N_472_1 ), .C0(\cm/configCM/State_reg_2 ), 
    .A0(UART_out_CM_data_empty), .DI0(\cm/configCM/n2884 ), 
    .LSR(\cm/configCM/n3038 ), .CLK(\cm/configCM/State_nxt_2__N_486 ), 
    .F0(\cm/configCM/n2884 ), .Q0(\cm/configCM/State_nxt_1 ));
  cm_configCM_SLICE_341 \cm/configCM/SLICE_341 ( 
    .D1(\cm/configCM/State_reg_0 ), .C1(\cm/configCM/State_reg_2 ), 
    .B1(\cm/configCM/State_reg_1 ), .D0(\cm/c_addr_3__N_468 ), 
    .C0(\cm/configCM/State_reg_2 ), .B0(\cm/configCM/State_reg_1 ), 
    .A0(\cm/configCM/State_reg_0 ), .DI0(\cm/configCM/State_nxt_2__N_471 ), 
    .CLK(\cm/configCM/State_nxt_2__N_486 ), 
    .F0(\cm/configCM/State_nxt_2__N_471 ), .Q0(\cm/configCM/State_nxt_2 ), 
    .F1(\cm/configCM/n6390 ));
  cm_configCM_SLICE_342 \cm/configCM/SLICE_342 ( 
    .D1(\cm/configCM/RXD_Data_reg_11 ), .C1(\cm/configCM/RXD_Data_reg_13 ), 
    .B1(\cm/configCM/RXD_Data_reg_12 ), .A1(\cm/configCM/RXD_Data_reg_14 ), 
    .D0(\cm/configCM/n2874 ), .C0(\cm/configCM/RXD_Data_reg_15 ), 
    .B0(\cm/configCM/n7351 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .DI0(\cm/configCM/Err_nxt_N_610 ), .LSR(\cm/configCM/n7343 ), .CLK(clk_c), 
    .F0(\cm/configCM/Err_nxt_N_610 ), .Q0(\cm/configCM/State_nxt_2_N_472_1 ), 
    .F1(\cm/configCM/n7351 ));
  SLICE_345 SLICE_345( .D1(n124), .B1(counter_23_N_178_9), .A1(n1553), 
    .C0(n125), .B0(counter_23_N_178_9), .A0(n1553), .DI1(n150), .DI0(n151), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n151), .Q0(counter_0), 
    .F1(n150), .Q1(counter_1));
  SLICE_346 SLICE_346( .D1(n122), .B1(counter_23_N_178_9), .A1(n1553), 
    .C0(n123), .B0(counter_23_N_178_9), .A0(n1553), .DI1(n148), .DI0(n149), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n149), .Q0(counter_2), 
    .F1(n148), .Q1(counter_3));
  SLICE_347 SLICE_347( .C1(counter_23_N_178_9), .B1(n1553), .A1(n120), 
    .D0(n121), .C0(counter_23_N_178_9), .B0(n1553), .DI1(n146), .DI0(n147), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n147), .Q0(counter_4), 
    .F1(n146), .Q1(counter_5));
  SLICE_348 SLICE_348( .D1(counter_23_N_178_9), .C1(n1553), .B1(n118), 
    .D0(counter_23_N_178_9), .C0(n1553), .B0(n119), .DI1(n144), .DI0(n145), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n145), .Q0(counter_6), 
    .F1(n144), .Q1(counter_7));
  SLICE_349 SLICE_349( .C1(counter_23_N_178_9), .B1(n116), .A1(n1553), 
    .C0(n117), .B0(counter_23_N_178_9), .A0(n1553), .DI1(n142), .DI0(n143), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n143), .Q0(counter_8), 
    .F1(n142), .Q1(counter_9));
  SLICE_350 SLICE_350( .D1(n114), .B1(counter_23_N_178_9), .A1(n1553), 
    .C0(counter_23_N_178_9), .B0(n115), .A0(n1553), .DI1(n140), .DI0(n141), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n141), .Q0(counter_10), 
    .F1(n140), .Q1(counter_11));
  SLICE_351 SLICE_351( .D1(n112), .B1(counter_23_N_178_9), .A1(n1553), 
    .C0(n113), .B0(counter_23_N_178_9), .A0(n1553), .DI1(n138), .DI0(n139), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n139), .Q0(counter_12), 
    .F1(n138), .Q1(counter_13));
  SLICE_352 SLICE_352( .C1(n1553), .B1(counter_23_N_178_9), .A1(n110), 
    .C0(n1553), .B0(counter_23_N_178_9), .A0(n111), .DI1(n136), .DI0(n137), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n137), .Q0(counter_14), 
    .F1(n136), .Q1(counter_15));
  SLICE_353 SLICE_353( .C1(n108), .B1(counter_23_N_178_9), .A1(n1553), 
    .C0(n109), .B0(counter_23_N_178_9), .A0(n1553), .DI1(n134), .DI0(n135), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n135), .Q0(counter_16), 
    .F1(n134), .Q1(counter_17));
  SLICE_354 SLICE_354( .C1(counter_23_N_178_9), .B1(n1553), .A1(n106), 
    .C0(counter_23_N_178_9), .B0(n1553), .A0(n107), .DI1(n132), .DI0(n133), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n133), .Q0(counter_18), 
    .F1(n132), .Q1(counter_19));
  SLICE_355 SLICE_355( .D1(n104), .C1(n1553), .B1(counter_23_N_178_9), 
    .C0(n1553), .B0(counter_23_N_178_9), .A0(n105), .DI1(n130), .DI0(n131), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n131), .Q0(counter_20), 
    .F1(n130), .Q1(counter_21));
  SLICE_356 SLICE_356( .D1(n1553), .C1(n102), .A1(counter_23_N_178_9), 
    .D0(n1553), .C0(n103), .A0(counter_23_N_178_9), .DI1(n128), .DI0(n129), 
    .LSR(\cd/CNT_UART/clk_UART_N_18 ), .CLK(clk_c), .F0(n129), .Q0(counter_22), 
    .F1(n128), .Q1(counter_23));
  db_DB_VS_SLICE_357 \db/DB_VS/SLICE_357 ( .D0(\db/DB_VS/n2 ), .A0(ctr_ff_1), 
    .DI0(\db/DB_VS/n14 ), .CE(clk_c_enable_142), .LSR(n3055), .CLK(clk_c), 
    .F0(\db/DB_VS/n14 ), .Q0(ctr_ff_1));
  db_DB_DF_UART_SLICE_358 \db/DB_DF_UART/SLICE_358 ( .C0(\db/DB_DF_UART/n2 ), 
    .A0(ctr_ff_1_adj_1145), .DI0(\db/DB_DF_UART/n14 ), .CE(clk_c_enable_143), 
    .LSR(n3053), .CLK(clk_c), .F0(\db/DB_DF_UART/n14 ), .Q0(ctr_ff_1_adj_1145));
  db_DB_DF_VGA_SLICE_359 \db/DB_DF_VGA/SLICE_359 ( .C0(\db/DB_DF_VGA/n2 ), 
    .A0(ctr_ff_1_adj_1147), .DI0(\db/DB_DF_VGA/n14 ), .CE(clk_c_enable_144), 
    .LSR(n3051), .CLK(clk_c), .F0(\db/DB_DF_VGA/n14 ), .Q0(ctr_ff_1_adj_1147));
  db_DB_HS_SLICE_360 \db/DB_HS/SLICE_360 ( .D0(\db/DB_HS/n2 ), 
    .A0(ctr_ff_1_adj_1153), .DI0(\db/DB_HS/n14 ), .CE(clk_c_enable_34), 
    .LSR(n3042), .CLK(clk_c), .F0(\db/DB_HS/n14 ), .Q0(ctr_ff_1_adj_1153));
  db_DB_DF_UART_SLICE_361 \db/DB_DF_UART/SLICE_361 ( .A0(\db/DB_DF_UART/n2 ), 
    .DI0(\db/DB_DF_UART/n15 ), .CE(clk_c_enable_143), .LSR(n3053), .CLK(clk_c), 
    .F0(\db/DB_DF_UART/n15 ), .Q0(\db/DB_DF_UART/n2 ));
  db_DB_DF_VGA_SLICE_362 \db/DB_DF_VGA/SLICE_362 ( .A0(\db/DB_DF_VGA/n2 ), 
    .DI0(\db/DB_DF_VGA/n15 ), .CE(clk_c_enable_144), .LSR(n3051), .CLK(clk_c), 
    .F0(\db/DB_DF_VGA/n15 ), .Q0(\db/DB_DF_VGA/n2 ));
  db_DB_HS_SLICE_363 \db/DB_HS/SLICE_363 ( .A0(\db/DB_HS/n2 ), 
    .DI0(\db/DB_HS/n15 ), .CE(clk_c_enable_34), .LSR(n3042), .CLK(clk_c), 
    .F0(\db/DB_HS/n15 ), .Q0(\db/DB_HS/n2 ));
  db_DB_VS_SLICE_364 \db/DB_VS/SLICE_364 ( .A0(\db/DB_VS/n2 ), 
    .DI0(\db/DB_VS/n15 ), .CE(clk_c_enable_142), .LSR(n3055), .CLK(clk_c), 
    .F0(\db/DB_VS/n15 ), .Q0(\db/DB_VS/n2 ));
  uart_SAMPLER_SLICE_365 \uart/SAMPLER/SLICE_365 ( 
    .D1(\uart/SAMPLER/nr_1_reg_0 ), .B1(in_c), .B0(in_c), .A0(flag_reg), 
    .DI0(\uart/SAMPLER/flag_next ), .CE(\uart/clk_UART_enable_2 ), 
    .CLK(clk_UART), .F0(\uart/SAMPLER/flag_next ), .Q0(flag_reg), 
    .F1(\uart/SAMPLER/n7372 ));
  uart_UART_STATE_SLICE_366 \uart/UART_STATE/SLICE_366 ( .D1(n375), 
    .C1(\uart/UART_STATE/n376 ), .B1(\uart/UART_STATE/n3949 ), 
    .A1(\uart/UART_STATE/n7313 ), .D0(\uart/data ), .C0(n374), 
    .B0(\uart/UART_STATE/n7349 ), .A0(\uart/UART_STATE/n7207 ), 
    .DI1(\uart/UART_STATE/n1943 ), .DI0(\uart/UART_STATE/n6604 ), 
    .CE(\uart/clk_c_enable_67 ), .LSR(\uart/UART_STATE/error_1__N_334 ), 
    .CLK(clk_c), .F0(\uart/UART_STATE/n6604 ), .Q0(n374), 
    .F1(\uart/UART_STATE/n1943 ), .Q1(n375));
  uart_SAMPLER_SLICE_367 \uart/SAMPLER/SLICE_367 ( 
    .D1(\uart/SAMPLER/nr_0_reg_0 ), .A1(\uart/SAMPLER/nr_0_reg_1 ), 
    .A0(\uart/SAMPLER/nr_0_reg_0 ), .DI1(\uart/SAMPLER/n24_adj_1107 ), 
    .DI0(\uart/SAMPLER/n7363 ), .CE(clk_c_enable_32), 
    .LSR(\uart/SAMPLER/n3047 ), .CLK(clk_c), .F0(\uart/SAMPLER/n7363 ), 
    .Q0(\uart/SAMPLER/nr_0_reg_0 ), .F1(\uart/SAMPLER/n24_adj_1107 ), 
    .Q1(\uart/SAMPLER/nr_0_reg_1 ));
  uart_SAMPLER_SLICE_368 \uart/SAMPLER/SLICE_368 ( 
    .D1(\uart/SAMPLER/nr_0_reg_0 ), .C1(\uart/SAMPLER/nr_0_reg_3 ), 
    .B1(\uart/SAMPLER/nr_0_reg_2 ), .A1(\uart/SAMPLER/nr_0_reg_1 ), 
    .D0(\uart/SAMPLER/nr_0_reg_0 ), .B0(\uart/SAMPLER/nr_0_reg_2 ), 
    .A0(\uart/SAMPLER/nr_0_reg_1 ), .DI1(\uart/SAMPLER/n22_adj_1105 ), 
    .DI0(\uart/SAMPLER/n23_adj_1106 ), .CE(clk_c_enable_32), 
    .LSR(\uart/SAMPLER/n3047 ), .CLK(clk_c), .F0(\uart/SAMPLER/n23_adj_1106 ), 
    .Q0(\uart/SAMPLER/nr_0_reg_2 ), .F1(\uart/SAMPLER/n22_adj_1105 ), 
    .Q1(\uart/SAMPLER/nr_0_reg_3 ));
  uart_SAMPLER_SLICE_369 \uart/SAMPLER/SLICE_369 ( .C1(in_c), 
    .B1(\uart/SAMPLER/nr_1_reg_0 ), .A1(\uart/SAMPLER/nr_1_reg_1 ), .C0(in_c), 
    .A0(\uart/SAMPLER/nr_1_reg_0 ), .DI1(\uart/SAMPLER/n24 ), 
    .DI0(\uart/SAMPLER/n25 ), .CE(clk_c_enable_147), 
    .LSR(\uart/SAMPLER/n3049 ), .CLK(clk_c), .F0(\uart/SAMPLER/n25 ), 
    .Q0(\uart/SAMPLER/nr_1_reg_0 ), .F1(\uart/SAMPLER/n24 ), 
    .Q1(\uart/SAMPLER/nr_1_reg_1 ));
  uart_SAMPLER_SLICE_370 \uart/SAMPLER/SLICE_370 ( .D1(\uart/SAMPLER/n7372 ), 
    .C1(\uart/SAMPLER/nr_1_reg_3 ), .B1(\uart/SAMPLER/nr_1_reg_1 ), 
    .A1(\uart/SAMPLER/nr_1_reg_2 ), .D0(in_c), .C0(\uart/SAMPLER/nr_1_reg_0 ), 
    .B0(\uart/SAMPLER/nr_1_reg_1 ), .A0(\uart/SAMPLER/nr_1_reg_2 ), 
    .DI1(\uart/SAMPLER/n22 ), .DI0(\uart/SAMPLER/n23 ), .CE(clk_c_enable_147), 
    .LSR(\uart/SAMPLER/n3049 ), .CLK(clk_c), .F0(\uart/SAMPLER/n23 ), 
    .Q0(\uart/SAMPLER/nr_1_reg_2 ), .F1(\uart/SAMPLER/n22 ), 
    .Q1(\uart/SAMPLER/nr_1_reg_3 ));
  uart_SAMPLER_SLICE_371 \uart/SAMPLER/SLICE_371 ( 
    .B1(\uart/SAMPLER/val_reg_0 ), .A1(\uart/SAMPLER/val_reg_1 ), 
    .A0(\uart/SAMPLER/val_reg_0 ), .DI1(\uart/SAMPLER/n24_adj_1109 ), 
    .DI0(\uart/SAMPLER/n25_adj_1108 ), .CE(clk_c_enable_153), .CLK(clk_c), 
    .F0(\uart/SAMPLER/n25_adj_1108 ), .Q0(\uart/SAMPLER/val_reg_0 ), 
    .F1(\uart/SAMPLER/n24_adj_1109 ), .Q1(\uart/SAMPLER/val_reg_1 ));
  uart_SAMPLER_SLICE_372 \uart/SAMPLER/SLICE_372 ( 
    .D1(\uart/SAMPLER/val_reg_2 ), .C1(\uart/SAMPLER/val_reg_0 ), 
    .B1(\uart/SAMPLER/val_reg_1 ), .A1(\uart/SAMPLER/val_reg_3 ), 
    .C0(\uart/SAMPLER/val_reg_0 ), .B0(\uart/SAMPLER/val_reg_1 ), 
    .A0(\uart/SAMPLER/val_reg_2 ), .DI1(\uart/SAMPLER/n22_adj_1111 ), 
    .DI0(\uart/SAMPLER/n23_adj_1110 ), .CE(clk_c_enable_153), .CLK(clk_c), 
    .F0(\uart/SAMPLER/n23_adj_1110 ), .Q0(\uart/SAMPLER/val_reg_2 ), 
    .F1(\uart/SAMPLER/n22_adj_1111 ), .Q1(\uart/SAMPLER/val_reg_3 ));
  uart_UART_STATE_SLICE_373 \uart/UART_STATE/SLICE_373 ( 
    .D1(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .C1(\uart/UART_STATE/n376 ), 
    .A1(\uart/UART_STATE/data_iteration_step_reg_1 ), 
    .C0(\uart/UART_STATE/n376 ), 
    .A0(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .DI1(\uart/UART_STATE/n24 ), .DI0(\uart/UART_STATE/n25 ), 
    .CE(clk_c_enable_155), .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n25 ), 
    .Q0(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .F1(\uart/UART_STATE/n24 ), 
    .Q1(\uart/UART_STATE/data_iteration_step_reg_1 ));
  uart_UART_STATE_SLICE_374 \uart/UART_STATE/SLICE_374 ( 
    .D1(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .B1(\uart/UART_STATE/data_iteration_step_reg_2 ), 
    .A1(\uart/UART_STATE/data_iteration_step_reg_1 ), 
    .D0(\uart/UART_STATE/data_iteration_step_reg_0 ), 
    .C0(\uart/UART_STATE/data_iteration_step_reg_1 ), 
    .B0(\uart/UART_STATE/n376 ), 
    .A0(\uart/UART_STATE/data_iteration_step_reg_2 ), 
    .DI0(\uart/UART_STATE/n23 ), .CE(clk_c_enable_155), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n23 ), 
    .Q0(\uart/UART_STATE/data_iteration_step_reg_2 ), 
    .F1(\uart/UART_STATE/n3949 ));
  uart_UART_STATE_SLICE_375 \uart/UART_STATE/SLICE_375 ( 
    .D1(\uart/UART_STATE/n4 ), .C1(\uart/data ), 
    .B1(\uart/UART_STATE/valid_error_next_N_409 ), .A1(\uart/UART_STATE/n378 ), 
    .D0(\uart/UART_STATE/n3949 ), .C0(\uart/data ), 
    .B0(\uart/UART_STATE/n376 ), .A0(\uart/UART_STATE/n378 ), 
    .DI1(\uart/UART_STATE/n2843 ), .DI0(\uart/UART_STATE/n1945 ), 
    .CE(\uart/clk_c_enable_67 ), .LSR(\uart/UART_STATE/error_1__N_334 ), 
    .CLK(clk_c), .F0(\uart/UART_STATE/n1945 ), .Q0(\uart/UART_STATE/n376 ), 
    .F1(\uart/UART_STATE/n2843 ), .Q1(\uart/UART_STATE/n378 ));
  uart_UART_STATE_SLICE_376 \uart/UART_STATE/SLICE_376 ( .C1(\uart/data ), 
    .A1(\uart/stopbit ), .C0(\uart/data ), .B0(\uart/UART_STATE/n376 ), 
    .A0(\uart/UART_STATE/parity_check_reg ), 
    .DI0(\uart/UART_STATE/parity_check_next_N_414 ), 
    .CE(\uart/UART_STATE/clk_UART_enable_4 ), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_UART), 
    .F0(\uart/UART_STATE/parity_check_next_N_414 ), 
    .Q0(\uart/UART_STATE/parity_check_reg ), .F1(\uart/UART_STATE/n7194 ));
  uart_UART_STATE_SLICE_377 \uart/UART_STATE/SLICE_377 ( 
    .D1(\uart/UART_STATE/stop_iteration_step_reg_0 ), .B1(n375), 
    .A1(\uart/UART_STATE/stop_iteration_step_reg_1 ), .B0(n375), 
    .A0(\uart/UART_STATE/stop_iteration_step_reg_0 ), 
    .DI1(\uart/UART_STATE/n18 ), .DI0(\uart/UART_STATE/n19 ), 
    .CE(clk_c_enable_156), .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n19 ), 
    .Q0(\uart/UART_STATE/stop_iteration_step_reg_0 ), 
    .F1(\uart/UART_STATE/n18 ), 
    .Q1(\uart/UART_STATE/stop_iteration_step_reg_1 ));
  uart_UART_STATE_SLICE_378 \uart/UART_STATE/SLICE_378 ( 
    .D1(\uart/UART_STATE/n7348 ), .C1(\uart/UART_STATE/parity_check_reg ), 
    .B1(\uart/paritybit ), .A1(\uart/data ), .D0(n374), .C0(n375), 
    .B0(\uart/UART_STATE/n356 ), .A0(\uart/data ), 
    .DI0(\uart/UART_STATE/n415 ), .CE(\uart/clk_c_enable_67 ), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n415 ), .Q0(\uart/UART_STATE/valid_error_next_N_409 ), 
    .F1(\uart/UART_STATE/n356 ));
  uart_UART_STATE_SLICE_379 \uart/UART_STATE/SLICE_379 ( 
    .D1(\uart/UART_STATE/wait_iteration_step_reg_0 ), .B1(n374), 
    .A1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .B0(n374), 
    .A0(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .DI1(\uart/UART_STATE/n6572 ), .DI0(\uart/UART_STATE/n15 ), 
    .CE(clk_c_enable_62), .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_c), 
    .F0(\uart/UART_STATE/n15 ), 
    .Q0(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .F1(\uart/UART_STATE/n6572 ), 
    .Q1(\uart/UART_STATE/wait_iteration_step_reg_1 ));
  uart_UART_STATE_SLICE_380 \uart/UART_STATE/SLICE_380 ( 
    .D1(\uart/UART_STATE/valid_error_next_N_409 ), .C1(\uart/UART_STATE/n378 ), 
    .B1(valid_data), .D0(\uart/UART_STATE/valid_error_next_N_409 ), 
    .B0(valid_data), .DI0(\uart/UART_STATE/n1773 ), 
    .CE(\uart/UART_STATE/clk_UART_enable_1 ), 
    .LSR(\uart/UART_STATE/error_1__N_334 ), .CLK(clk_UART), 
    .F0(\uart/UART_STATE/n1773 ), .Q0(\uart/UART_valid_error ), 
    .F1(\uart/UART_STATE/clk_UART_enable_1 ));
  uart_SAMPLER_SLICE_381 \uart/SAMPLER/SLICE_381 ( 
    .D1(\uart/SAMPLER/nr_1_reg_3 ), .C1(\uart/SAMPLER/nr_0_reg_3 ), 
    .B1(\uart/SAMPLER/nr_0_reg_2 ), .D0(\uart/SAMPLER/nr_1_reg_0 ), 
    .C0(\uart/SAMPLER/nr_1_reg_1 ), .B0(\uart/SAMPLER/nr_0_reg_0 ), 
    .A0(\uart/SAMPLER/nr_0_reg_1 ), .DI0(\uart/SAMPLER/out_next_N_447 ), 
    .M0(\uart/SAMPLER/n6864 ), .CE(\uart/clk_UART_enable_3 ), .CLK(clk_UART), 
    .OFX0(\uart/SAMPLER/out_next_N_447 ), .Q0(\uart/data ));
  SLICE_384 SLICE_384( .C1(out_next_N_449), .B1(clk_c_enable_153), .A1(n7), 
    .D0(\uart/SAMPLER/val_reg_0 ), .C0(\uart/SAMPLER/val_reg_1 ), 
    .B0(\uart/SAMPLER/val_reg_3 ), .A0(\uart/SAMPLER/val_reg_2 ), 
    .DI0(out_next_N_449), .LSR(\uart/clk_UART_enable_2 ), .CLK(clk_UART), 
    .F0(out_next_N_449), .Q0(valid_data), .F1(clk_c_enable_147));
  SLICE_403 SLICE_403( .D1(Count_h_10), .C1(Count_h_9), .A1(Count_h_11), 
    .D0(\vga/assgncolor/n6 ), .C0(Active_nxt_N_1066), .B0(n6758), .A0(n1417), 
    .DI0(\vga/assgncolor/Active_nxt ), .CLK(clk_c), 
    .F0(\vga/assgncolor/Active_nxt ), .Q0(\vga/assgncolor/Active_reg ), 
    .F1(n6758));
  vga_config1_SLICE_407 \vga/config1/SLICE_407 ( .D0(\vga/H_count_max_5 ), 
    .C0(n7362), .B0(c_data_1), .DI0(\vga/config1/H_Count_Max_nxt_11__N_1024 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1024 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_5 ));
  vga_config1_SLICE_409 \vga/config1/SLICE_409 ( .D1(\vga/H_count_max_8 ), 
    .C1(n7362), .B1(c_data_1), .A1(c_data_0), .D0(\vga/H_count_max_7 ), 
    .C0(n7362), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\vga/config1/H_Count_Max_nxt_11__N_1020 ), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1022 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1022 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_7 ), 
    .F1(\vga/config1/H_Count_Max_nxt_11__N_1020 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_8 ));
  SLICE_410 SLICE_410( .D1(c_data_0), .C1(n7362), .B1(H_count_max_10), 
    .A1(c_data_1), .D0(c_data_0), .C0(n7362), .A0(\vga/H_count_max_9 ), 
    .DI1(H_Count_Max_nxt_11__N_1018), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1019 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1019 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_9 ), .F1(H_Count_Max_nxt_11__N_1018), 
    .Q1(\vga/config1/H_Count_Max_nxt_10 ));
  vga_config1_SLICE_411 \vga/config1/SLICE_411 ( .D0(c_data_0), .C0(n7362), 
    .B0(c_data_1), .A0(\vga/H_count_max_11 ), 
    .DI0(\vga/config1/H_Count_Max_nxt_11__N_1017 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Count_Max_nxt_11__N_1017 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_11 ));
  SLICE_413 SLICE_413( .D1(c_data_0), .C1(n7362), .B1(c_data_1), 
    .A1(H_left_margin_3), .D0(c_data_0), .C0(n7362), .B0(c_data_1), 
    .A0(H_left_margin_2), .DI1(\vga/config1/H_Left_Margin_nxt_8__N_962 ), 
    .DI0(H_Left_Margin_nxt_8__N_963), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Left_Margin_nxt_8__N_963), .Q0(\vga/config1/H_Left_Margin_nxt_2 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_962 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_3 ));
  vga_config1_SLICE_414 \vga/config1/SLICE_414 ( .D1(H_left_margin_5), 
    .C1(n7362), .B1(c_data_1), .A1(c_data_0), .D0(H_left_margin_4), .C0(n7362), 
    .B0(c_data_1), .DI1(\vga/config1/H_Left_Margin_nxt_8__N_960 ), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_961 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_961 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_4 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_960 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_5 ));
  SLICE_415 SLICE_415( .D1(H_left_margin_7), .C1(n7362), .B1(c_data_1), 
    .D0(c_data_0), .C0(n7362), .B0(c_data_1), .A0(H_left_margin_6), 
    .DI1(\vga/config1/H_Left_Margin_nxt_8__N_956 ), 
    .DI0(H_Left_Margin_nxt_8__N_958), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Left_Margin_nxt_8__N_958), .Q0(\vga/config1/H_Left_Margin_nxt_6 ), 
    .F1(\vga/config1/H_Left_Margin_nxt_8__N_956 ), 
    .Q1(\vga/config1/H_Left_Margin_nxt_7 ));
  vga_config1_SLICE_416 \vga/config1/SLICE_416 ( .D0(H_left_margin_8), 
    .C0(n7362), .B0(c_data_1), .A0(c_data_0), 
    .DI0(\vga/config1/H_Left_Margin_nxt_8__N_952 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_952 ), 
    .Q0(\vga/config1/H_Left_Margin_nxt_8 ));
  SLICE_419 SLICE_419( .C1(n7362), .B1(c_data_1), .A1(\vga/H_right_margin_4 ), 
    .D0(H_right_margin_3), .C0(n7362), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_986 ), 
    .DI0(H_Right_Margin_nxt_10__N_987), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Right_Margin_nxt_10__N_987), .Q0(\vga/config1/H_Right_Margin_nxt_3 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_986 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_4 ));
  SLICE_420 SLICE_420( .D1(H_right_margin_6), .C1(n7362), .B1(c_data_1), 
    .A1(c_data_0), .D0(H_right_margin_5), .C0(n7362), .B0(c_data_1), 
    .A0(c_data_0), .DI1(H_Right_Margin_nxt_10__N_984), 
    .DI0(H_Right_Margin_nxt_10__N_985), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Right_Margin_nxt_10__N_985), .Q0(\vga/config1/H_Right_Margin_nxt_5 ), 
    .F1(H_Right_Margin_nxt_10__N_984), .Q1(\vga/config1/H_Right_Margin_nxt_6 ));
  SLICE_421 SLICE_421( .D1(\vga/H_right_margin_8 ), .C1(n7362), .B1(c_data_0), 
    .A1(c_data_1), .D0(H_right_margin_7), .C0(n7362), .B0(c_data_0), 
    .A0(c_data_1), .DI1(\vga/config1/H_Right_Margin_nxt_10__N_982 ), 
    .DI0(H_Right_Margin_nxt_10__N_983), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Right_Margin_nxt_10__N_983), .Q0(\vga/config1/H_Right_Margin_nxt_7 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_982 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_8 ));
  vga_config1_SLICE_422 \vga/config1/SLICE_422 ( .D1(c_data_1), .C1(n7362), 
    .B1(\vga/H_right_margin_10 ), .A1(c_data_0), .D0(c_data_1), .C0(n7362), 
    .A0(\vga/H_right_margin_9 ), 
    .DI1(\vga/config1/H_Right_Margin_nxt_10__N_980 ), 
    .DI0(\vga/config1/H_Right_Margin_nxt_10__N_981 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Right_Margin_nxt_10__N_981 ), 
    .Q0(\vga/config1/H_Right_Margin_nxt_9 ), 
    .F1(\vga/config1/H_Right_Margin_nxt_10__N_980 ), 
    .Q1(\vga/config1/H_Right_Margin_nxt_10 ));
  vga_config1_SLICE_424 \vga/config1/SLICE_424 ( .D1(c_data_1), .C1(n7362), 
    .B1(H_sync_pulse_2), .A1(c_data_0), .D0(c_data_1), .C0(n7362), 
    .B0(H_sync_pulse_1), .A0(c_data_0), 
    .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1006 ), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1007 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1007 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_1 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1006 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_2 ));
  vga_config1_SLICE_425 \vga/config1/SLICE_425 ( .D1(c_data_1), .C1(n7362), 
    .B1(H_sync_pulse_4), .D0(c_data_1), .C0(n7362), .B0(H_sync_pulse_3), 
    .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1004 ), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1005 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1005 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_3 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1004 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_4 ));
  SLICE_426 SLICE_426( .D1(c_data_1), .C1(n7362), .B1(H_sync_pulse_6), 
    .D0(c_data_1), .C0(n7362), .B0(H_sync_pulse_5), .A0(c_data_0), 
    .DI1(\vga/config1/H_Sync_Pulse_nxt_7__N_1002 ), 
    .DI0(H_Sync_Pulse_nxt_7__N_1003), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(H_Sync_Pulse_nxt_7__N_1003), .Q0(\vga/config1/H_Sync_Pulse_nxt_5 ), 
    .F1(\vga/config1/H_Sync_Pulse_nxt_7__N_1002 ), 
    .Q1(\vga/config1/H_Sync_Pulse_nxt_6 ));
  vga_config1_SLICE_427 \vga/config1/SLICE_427 ( .D0(H_sync_pulse_7), 
    .C0(n7362), .B0(c_data_1), .A0(c_data_0), 
    .DI0(\vga/config1/H_Sync_Pulse_nxt_7__N_1001 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Sync_Pulse_nxt_7__N_1001 ), 
    .Q0(\vga/config1/H_Sync_Pulse_nxt_7 ));
  vga_config1_SLICE_428 \vga/config1/SLICE_428 ( .D0(c_data_1), .C0(c_data_0), 
    .DI0(\vga/config1/c_data_1_derived_1 ), 
    .LSR(\vga/config1/Load_nxt_N_1042 ), 
    .CLK(\vga/config1/c_data_1_derived_1 ), 
    .F0(\vga/config1/c_data_1_derived_1 ), .Q0(\vga/config1/Load_nxt ));
  vga_config1_SLICE_430 \vga/config1/SLICE_430 ( .D1(c_data_1), .C1(n7362), 
    .B1(\vga/V_count_max_2 ), .A1(c_data_0), .D0(c_data_1), .C0(n7362), 
    .B0(\vga/V_count_max_1 ), .A0(c_data_0), 
    .DI1(\vga/config1/V_Count_Max_nxt_11__N_1039 ), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1040 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1040 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_1 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1039 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_2 ));
  SLICE_431 SLICE_431( .D1(c_data_1), .C1(n7362), .B1(c_data_0), 
    .A1(V_count_max_4), .D0(c_data_1), .C0(n7362), .B0(c_data_0), 
    .A0(\vga/V_count_max_3 ), .DI1(V_Count_Max_nxt_11__N_1037), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1038 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1038 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_3 ), .F1(V_Count_Max_nxt_11__N_1037), 
    .Q1(\vga/config1/V_Count_Max_nxt_4 ));
  SLICE_432 SLICE_432( .D1(V_count_max_6), .C1(n7362), .B1(c_data_0), 
    .A1(c_data_1), .D0(V_count_max_5), .C0(n7362), .B0(c_data_0), 
    .A0(c_data_1), .DI1(V_Count_Max_nxt_11__N_1035), 
    .DI0(V_Count_Max_nxt_11__N_1036), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(V_Count_Max_nxt_11__N_1036), .Q0(\vga/config1/V_Count_Max_nxt_5 ), 
    .F1(V_Count_Max_nxt_11__N_1035), .Q1(\vga/config1/V_Count_Max_nxt_6 ));
  vga_config1_SLICE_434 \vga/config1/SLICE_434 ( .D1(\vga/V_count_max_9 ), 
    .C1(n7362), .B1(c_data_1), .A1(c_data_0), .D0(\vga/V_count_max_8 ), 
    .C0(n7362), .B0(c_data_1), .A0(c_data_0), 
    .DI1(\vga/config1/V_Count_Max_nxt_11__N_1032 ), 
    .DI0(\vga/config1/V_Count_Max_nxt_11__N_1033 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Count_Max_nxt_11__N_1033 ), 
    .Q0(\vga/config1/V_Count_Max_nxt_8 ), 
    .F1(\vga/config1/V_Count_Max_nxt_11__N_1032 ), 
    .Q1(\vga/config1/V_Count_Max_nxt_9 ));
  SLICE_436 SLICE_436( .D1(c_data_0), .C1(n7362), .B1(V_left_margin_1), 
    .A1(c_data_1), .D0(c_data_0), .C0(n7362), .B0(V_left_margin_0), 
    .A0(c_data_1), .DI1(V_Left_Margin_nxt_5__N_976), 
    .DI0(\vga/config1/V_Left_Margin_nxt_5__N_978 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Left_Margin_nxt_5__N_978 ), 
    .Q0(\vga/config1/V_Left_Margin_nxt_0 ), .F1(V_Left_Margin_nxt_5__N_976), 
    .Q1(\vga/config1/V_Left_Margin_nxt_1 ));
  SLICE_438 SLICE_438( .D1(c_data_0), .C1(n7362), .B1(c_data_1), 
    .A1(V_left_margin_4), .D0(c_data_0), .C0(n7362), .B0(c_data_1), 
    .A0(V_left_margin_3), .DI1(V_Left_Margin_nxt_5__N_973), 
    .DI0(V_Left_Margin_nxt_5__N_974), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(V_Left_Margin_nxt_5__N_974), .Q0(\vga/config1/V_Left_Margin_nxt_3 ), 
    .F1(V_Left_Margin_nxt_5__N_973), .Q1(\vga/config1/V_Left_Margin_nxt_4 ));
  SLICE_439 SLICE_439( .D1(V_left_margin_5), .B1(Count_v_5), 
    .D0(V_left_margin_5), .C0(n7362), .A0(c_data_0), 
    .DI0(\vga/config1/V_Left_Margin_nxt_5__N_971 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Left_Margin_nxt_5__N_971 ), 
    .Q0(\vga/config1/V_Left_Margin_nxt_5 ), .F1(n7367));
  SLICE_440 SLICE_440( .D1(c_data_0), .C1(n7362), .B1(c_data_1), 
    .A1(V_right_margin_1), .D0(c_data_0), .C0(n7362), .B0(c_data_1), 
    .A0(\vga/V_right_margin_0 ), .DI1(V_Right_Margin_nxt_9__N_999), 
    .DI0(\vga/config1/V_Right_Margin_nxt_9__N_1000 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_1000 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_0 ), .F1(V_Right_Margin_nxt_9__N_999), 
    .Q1(\vga/config1/V_Right_Margin_nxt_1 ));
  SLICE_441 SLICE_441( .M1(\vga/V_right_margin_3 ), 
    .M0(\vga/V_right_margin_2 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .F0(VCC_net), 
    .Q0(\vga/config1/V_Right_Margin_nxt_2 ), .F1(GND_net), 
    .Q1(\vga/config1/V_Right_Margin_nxt_3 ));
  SLICE_442 SLICE_442( .D1(c_data_0), .C1(n7362), .B1(V_right_margin_5), 
    .A1(c_data_1), .D0(c_data_0), .C0(n7362), .B0(V_right_margin_4), 
    .A0(c_data_1), .DI1(V_Right_Margin_nxt_9__N_995), 
    .DI0(V_Right_Margin_nxt_9__N_996), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(V_Right_Margin_nxt_9__N_996), .Q0(\vga/config1/V_Right_Margin_nxt_4 ), 
    .F1(V_Right_Margin_nxt_9__N_995), .Q1(\vga/config1/V_Right_Margin_nxt_5 ));
  SLICE_443 SLICE_443( .D1(c_data_1), .C1(c_data_0), 
    .B1(button_signal_DEBUG_VGA), .A1(H_BackPorch_nxt_7__N_780), .D0(c_data_0), 
    .C0(n7362), .B0(V_right_margin_6), .A0(c_data_1), 
    .DI0(V_Right_Margin_nxt_9__N_994), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(V_Right_Margin_nxt_9__N_994), .Q0(\vga/config1/V_Right_Margin_nxt_6 ), 
    .F1(clk_c_enable_89));
  vga_SLICE_444 \vga/SLICE_444 ( .C1(Load_config), .B1(rst_n_c), 
    .D0(\vga/assgncolor/Active_nxt_N_1067 ), 
    .A0(\vga/assgncolor/Active_nxt_N_1065 ), .M1(\vga/H_count_max_2 ), 
    .M0(\vga/V_right_margin_7 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .F0(\vga/assgncolor/n6 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_7 ), .F1(\vga/Count_h_11__N_948 ), 
    .Q1(\vga/config1/H_Count_Max_nxt_2 ));
  vga_config1_SLICE_445 \vga/config1/SLICE_445 ( .D1(c_data_0), .C1(n7362), 
    .B1(c_data_1), .A1(\vga/V_right_margin_9 ), .D0(c_data_0), .C0(n7362), 
    .B0(c_data_1), .A0(\vga/V_right_margin_8 ), 
    .DI1(\vga/config1/V_Right_Margin_nxt_9__N_991 ), 
    .DI0(\vga/config1/V_Right_Margin_nxt_9__N_992 ), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/V_Right_Margin_nxt_9__N_992 ), 
    .Q0(\vga/config1/V_Right_Margin_nxt_8 ), 
    .F1(\vga/config1/V_Right_Margin_nxt_9__N_991 ), 
    .Q1(\vga/config1/V_Right_Margin_nxt_9 ));
  SLICE_446 SLICE_446( .C1(Count_h_6), .B1(H_sync_pulse_6), 
    .D0(\uart/SAMPLER/nr_0_reg_3 ), .C0(\uart/SAMPLER/nr_0_reg_2 ), 
    .B0(\uart/SAMPLER/nr_1_reg_3 ), .A0(\uart/SAMPLER/nr_1_reg_2 ), 
    .M1(\vga/H_count_max_3 ), .M0(V_sync_pulse_0), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .F0(\uart/SAMPLER/n6864 ), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_0 ), .F1(n7375), 
    .Q1(\vga/config1/H_Count_Max_nxt_3 ));
  SLICE_447 SLICE_447( .D1(V_sync_pulse_2), .C1(n7362), .B1(c_data_1), 
    .A1(c_data_0), .D0(V_sync_pulse_1), .C0(n7362), .B0(c_data_1), 
    .A0(c_data_0), .DI1(\vga/config1/V_Sync_Pulse_nxt_7__N_1014 ), 
    .DI0(V_Sync_Pulse_nxt_7__N_1015), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(V_Sync_Pulse_nxt_7__N_1015), .Q0(\vga/config1/V_Sync_Pulse_nxt_1 ), 
    .F1(\vga/config1/V_Sync_Pulse_nxt_7__N_1014 ), 
    .Q1(\vga/config1/V_Sync_Pulse_nxt_2 ));
  SLICE_448 SLICE_448( .D1(\uart/SAMPLER/val_reg_0 ), 
    .C1(\uart/SAMPLER/val_reg_1 ), .B1(\uart/SAMPLER/val_reg_2 ), 
    .A1(\uart/SAMPLER/val_reg_3 ), 
    .D0(\uart/UART_STATE/wait_iteration_step_reg_1 ), .B0(n374), 
    .A0(\uart/UART_STATE/wait_iteration_step_reg_0 ), .M1(V_sync_pulse_4), 
    .M0(V_sync_pulse_3), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .F0(\uart/UART_STATE/n4 ), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_3 ), .F1(n7), 
    .Q1(\vga/config1/V_Sync_Pulse_nxt_4 ));
  SLICE_449 SLICE_449( .C1(\uart/UART_STATE/stop_iteration_step_reg_1 ), 
    .A1(\uart/UART_STATE/stop_iteration_step_reg_0 ), .D0(Count_h_0), 
    .C0(Count_h_1), .B0(H_sync_pulse_0), .A0(H_sync_pulse_1), 
    .M1(V_sync_pulse_6), .M0(V_sync_pulse_5), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), .F0(n4), 
    .Q0(\vga/config1/V_Sync_Pulse_nxt_5 ), .F1(\uart/UART_STATE/n7348 ), 
    .Q1(\vga/config1/V_Sync_Pulse_nxt_6 ));
  SLICE_450 SLICE_450( .C1(Count_v_2), .B1(V_left_margin_2), 
    .D0(UART_valid_out), .C0(\FIFO_UART_CM/w_empty_reg ), 
    .B0(button_signal_DEBUG_UART), .M1(\vga/H_count_max_4 ), 
    .M0(V_sync_pulse_7), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\FIFO_UART_CM/clk_LM_enable_1 ), .Q0(\vga/config1/V_Sync_Pulse_nxt_7 ), 
    .F1(n5), .Q1(\vga/config1/H_Count_Max_nxt_4 ));
  LessThan_677_i16_SLICE_451 \LessThan_677_i16/SLICE_451 ( .D1(n4_adj_1143), 
    .C1(n12_adj_1139), .B1(n7366), .A1(n6895), .D0(V_sync_pulse_4), 
    .C0(n6_adj_1142), .A0(Count_v_4), .M0(n6898), .OFX0(n1115));
  LessThan_674_i16_SLICE_452 \LessThan_674_i16/SLICE_452 ( .D1(n4), .C1(n12), 
    .B1(n7376), .A1(n6915), .D0(H_sync_pulse_4), .C0(n6), .B0(Count_h_4), 
    .M0(n6918), .OFX0(n1112));
  cm_configCM_i6146_SLICE_453 \cm/configCM/i6146/SLICE_453 ( 
    .D1(\cm/configCM/n3000 ), .C1(\cm/configCM/RXD_Data_reg_11 ), 
    .B1(\cm/configCM/RXD_Data_reg_14 ), .A1(\cm/configCM/RXD_Data_reg_12 ), 
    .D0(\cm/configCM/n3000 ), .C0(\cm/configCM/RXD_Data_reg_11 ), 
    .B0(\cm/configCM/RXD_Data_reg_14 ), .A0(\cm/configCM/RXD_Data_reg_12 ), 
    .M0(\cm/configCM/RXD_Data_reg_13 ), .OFX0(\cm/configCM/n3001 ));
  cm_assignCM_mux_583_i10_SLICE_454 \cm/assignCM/mux_583_i10/SLICE_454 ( 
    .D1(button_signal_DEBUG_VGA), .C1(\cm/Counter_X_Valid ), 
    .B1(\cm/Counter_Y_Valid ), .A1(\cm/assignCM/Right_DOWN_reg_9 ), 
    .D0(\cm/assignCM/Right_UP_reg_9 ), .C0(\cm/assignCM/n1078 ), 
    .B0(\cm/assignCM/Left_DOWN_reg_9 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n984 ));
  cm_assignCM_mux_583_i9_SLICE_455 \cm/assignCM/mux_583_i9/SLICE_455 ( 
    .D1(\cm/assignCM/Right_DOWN_reg_8 ), .C1(\cm/Counter_Y_Valid ), 
    .B1(\cm/Counter_X_Valid ), .A1(button_signal_DEBUG_VGA), 
    .C0(\cm/assignCM/n1078 ), .B0(\cm/assignCM/Right_UP_reg_8 ), 
    .A0(\cm/assignCM/Left_DOWN_reg_8 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n985 ));
  cm_assignCM_mux_583_i7_SLICE_456 \cm/assignCM/mux_583_i7/SLICE_456 ( 
    .D1(\cm/Counter_X_Valid ), .C1(\cm/assignCM/Right_DOWN_reg_6 ), 
    .B1(button_signal_DEBUG_VGA), .A1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/Left_DOWN_reg_6 ), .C0(\cm/assignCM/n1078 ), 
    .B0(\cm/assignCM/Right_UP_reg_6 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n987 ));
  cm_assignCM_mux_583_i6_SLICE_457 \cm/assignCM/mux_583_i6/SLICE_457 ( 
    .D1(button_signal_DEBUG_VGA), .C1(\cm/assignCM/Right_DOWN_reg_5 ), 
    .B1(\cm/Counter_X_Valid ), .A1(\cm/Counter_Y_Valid ), 
    .C0(\cm/assignCM/n1078 ), .B0(\cm/assignCM/Left_DOWN_reg_5 ), 
    .A0(\cm/assignCM/Right_UP_reg_5 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n988 ));
  cm_assignCM_mux_583_i3_SLICE_458 \cm/assignCM/mux_583_i3/SLICE_458 ( 
    .D1(\cm/Counter_X_Valid ), .C1(\cm/assignCM/Right_DOWN_reg_2 ), 
    .B1(\cm/Counter_Y_Valid ), .A1(button_signal_DEBUG_VGA), 
    .C0(\cm/assignCM/Left_DOWN_reg_2 ), .B0(\cm/assignCM/Right_UP_reg_2 ), 
    .A0(\cm/assignCM/n1078 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n991 ));
  cm_assignCM_mux_583_i2_SLICE_459 \cm/assignCM/mux_583_i2/SLICE_459 ( 
    .D1(button_signal_DEBUG_VGA), .C1(\cm/assignCM/Right_DOWN_reg_1 ), 
    .B1(\cm/Counter_X_Valid ), .A1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/Right_UP_reg_1 ), .C0(\cm/assignCM/n1078 ), 
    .A0(\cm/assignCM/Left_DOWN_reg_1 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n992 ));
  cm_assignCM_i6142_SLICE_460 \cm/assignCM/i6142/SLICE_460 ( 
    .C1(\cm/assignCM/n523 ), .B1(\cm/assignCM/n521 ), 
    .D0(button_signal_DEBUG_VGA), .C0(\cm/Counter_X_Valid ), 
    .B0(\cm/assignCM/Right_DOWN_reg_4 ), .A0(\cm/Counter_Y_Valid ), 
    .M0(\cm/assignCM/n7332 ), .OFX0(\cm/assignCM/n7305 ));
  cm_assignCM_i6148_SLICE_461 \cm/assignCM/i6148/SLICE_461 ( 
    .D1(\cm/assignCM/n523 ), .C1(\cm/assignCM/n6827 ), 
    .B1(\cm/assignCM/Current_Qudran_Config_reg_0 ), .A1(\cm/assignCM/n521 ), 
    .D0(\cm/assignCM/n523 ), .C0(\cm/assignCM/n6827 ), 
    .B0(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .M0(\cm/assignCM/Current_Qudran_Config_reg_1 ), .OFX0(\cm/assignCM/n1092 ));
  cm_assignCM_mux_583_i11_SLICE_462 \cm/assignCM/mux_583_i11/SLICE_462 ( 
    .D1(button_signal_DEBUG_VGA), .C1(\cm/Counter_X_Valid ), 
    .B1(\cm/assignCM/Right_DOWN_reg_10 ), .A1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/n1078 ), .C0(\cm/assignCM/Left_DOWN_reg_10 ), 
    .A0(\cm/assignCM/Right_UP_reg_10 ), .M0(\cm/assignCM/n1086 ), 
    .OFX0(\cm/assignCM/n983 ));
  LessThan_683_i12_SLICE_463 \LessThan_683_i12/SLICE_463 ( 
    .D1(V_left_margin_5), .B1(Count_v_5), .A1(n4_adj_1152), 
    .D0(V_left_margin_4), .C0(Count_v_4), .A0(n6_adj_1151), .M0(n6874), 
    .OFX0(n1121));
  cm_configCM_SLICE_464 \cm/configCM/SLICE_464 ( 
    .D1(\cm/configCM/RXD_Data_reg_14 ), .C1(\cm/configCM/RXD_Data_reg_13 ), 
    .B1(\cm/configCM/RXD_Data_reg_11 ), .A1(\cm/configCM/RXD_Data_reg_12 ), 
    .D0(\cm/configCM/n6848 ), .C0(\cm/configCM/n7330 ), 
    .B0(\cm/configCM/RXD_Data_reg_11 ), .A0(\cm/configCM/n7351 ), 
    .M1(UART_out_CM_data_7), .M0(UART_out_CM_data_6), 
    .CE(\cm/configCM/clk_c_enable_54 ), .CLK(clk_c), .F0(\cm/configCM/n6775 ), 
    .Q0(\cm/configCM/RXD_Data_reg_14 ), .F1(\cm/configCM/n7330 ), 
    .Q1(\cm/configCM/RXD_Data_reg_15 ));
  cm_configCM_SLICE_465 \cm/configCM/SLICE_465 ( 
    .D1(\cm/configCM/RXD_Data_reg_12 ), .C1(\cm/configCM/RXD_Data_reg_9 ), 
    .B1(\cm/configCM/RXD_Data_reg_8 ), .A1(c_data_1), .D0(\cm/configCM/n7222 ), 
    .C0(\cm/configCM/RXD_Data_reg_11 ), .B0(\cm/configCM/RXD_Data_reg_9 ), 
    .A0(\cm/configCM/n7223 ), .M1(\cm/configCM/RXD_Data_reg_8 ), 
    .M0(\cm/configCM/RXD_Data_reg_7 ), .CE(\cm/configCM/clk_c_enable_45 ), 
    .CLK(clk_c), .F0(\cm/configCM/n7311 ), .Q0(\cm/c_data_7 ), 
    .F1(\cm/configCM/n7222 ), .Q1(\cm/c_data_8 ));
  cm_configCM_SLICE_466 \cm/configCM/SLICE_466 ( 
    .D1(\cm/configCM/RXD_Data_reg_15 ), .C1(\cm/configCM/n3000 ), 
    .B1(\cm/configCM/n7331 ), .A1(\cm/configCM/n7351 ), 
    .D0(\cm/configCM/RXD_Data_reg_15 ), .C0(\cm/configCM/n7373 ), 
    .B0(\cm/configCM/State_reg_0 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .M1(UART_out_CM_data_1), .M0(UART_out_CM_data_0), 
    .CE(\cm/configCM/clk_c_enable_157 ), .LSR(\cm/configCM/clk_c_enable_54 ), 
    .CLK(clk_c), .F0(\cm/configCM/n7331 ), .Q0(\cm/configCM/RXD_Data_reg_0 ), 
    .F1(\cm/configCM/clk_c_enable_146 ), .Q1(\cm/configCM/RXD_Data_reg_1 ));
  cm_assignCM_SLICE_467 \cm/assignCM/SLICE_467 ( 
    .D1(\cm/assignCM/Current_Qudran_Config_reg_1 ), .C1(\cm/assignCM/n8 ), 
    .B1(\cm/assignCM/clk_c_enable_79 ), 
    .A1(\cm/assignCM/Current_Qudran_Config_reg_0 ), 
    .D0(button_signal_DEBUG_VGA), .C0(\cm/assignCM/n521 ), 
    .B0(\cm/assignCM/clk_c_enable_79 ), .A0(\cm/assignCM/n523 ), 
    .M1(\cm/c_data_3 ), .M0(c_data_2), .CE(\cm/assignCM/clk_c_enable_139 ), 
    .CLK(clk_c), .F0(\cm/assignCM/n8 ), .Q0(\cm/assignCM/Left_UP_reg_2 ), 
    .F1(\cm/assignCM/n1086 ), .Q1(\cm/assignCM/Left_UP_reg_3 ));
  SLICE_468 SLICE_468( .D1(clk_UART), .C1(n1553), .A1(counter_23_N_178_9), 
    .D0(n374), .C0(n7345), .B0(n7319), .A0(valid_data), .M1(btnVS_c), 
    .M0(btnHS_c), .CLK(clk_DB), .F0(clk_c_enable_62), .Q0(button_ff_adj_1154), 
    .F1(n7319), .Q1(button_ff));
  SLICE_469 SLICE_469( .C1(clk_DB), .B1(counter_31__N_85_adj_1144), 
    .D0(ctr_ff_1), .C0(btnVS_c), .B0(n7318), .A0(button_ff), .M0(button_ff), 
    .CE(ctr_ff_1), .CLK(clk_DB), .F0(clk_c_enable_142), .Q0(button_signal_VS), 
    .F1(n7318));
  SLICE_470 SLICE_470( .C1(H_sync_pulse_4), .B1(Count_h_4), .D0(n7375), 
    .C0(n6904), .B0(n7377), .A0(n7374), .F0(n7066), .F1(n7377));
  SLICE_471 SLICE_471( .D1(\uart/UART_STATE/n378 ), .B1(\uart/data ), 
    .D0(valid_data), .C0(n7345), .B0(n7319), .A0(n375), 
    .M0(button_ff_adj_1148), .CE(ctr_ff_1_adj_1147), .CLK(clk_DB), 
    .F0(clk_c_enable_156), .Q0(button_signal_DEBUG_VGA), .F1(n7345));
  SLICE_472 SLICE_472( .D1(in_c), .C1(n7), .A1(out_next_N_449), .D0(n7319), 
    .C0(n7356), .B0(flag_reg), .A0(n7329), .F0(clk_c_enable_32), .F1(n7329));
  SLICE_473 SLICE_473( .D1(Count_v_4), .A1(V_left_margin_4), .D0(n7369), 
    .C0(n5), .B0(n7368), .A0(n7367), .F0(n6874), .F1(n7369));
  SLICE_474 SLICE_474( .D1(n1553), .B1(counter_23_N_178_9), .D0(n7334), 
    .C0(n7320), .B0(valid_data), .A0(clk_UART), .M0(button_ff_adj_1146), 
    .CE(ctr_ff_1_adj_1145), .CLK(clk_DB), .F0(clk_c_enable_155), 
    .Q0(button_signal_DEBUG_UART), .F1(n7320));
  SLICE_475 SLICE_475( .D1(Count_v_4), .A1(V_sync_pulse_4), .D0(n7365), 
    .C0(n7364), .B0(n7370), .A0(n6884), .M0(button_ff_adj_1154), 
    .CE(ctr_ff_1_adj_1153), .CLK(clk_DB), .F0(n6979), .Q0(button_signal_HS), 
    .F1(n7370));
  SLICE_476 SLICE_476( .C1(clk_c_enable_153), .B1(out_next_N_449), .D0(n7356), 
    .C0(flag_reg), .B0(n7320), .A0(clk_UART), .F0(clk_c_enable_153), 
    .F1(\uart/SAMPLER/n3047 ));
  cm_configCM_SLICE_477 \cm/configCM/SLICE_477 ( 
    .D1(\cm/configCM/State_reg_2 ), .C1(\cm/configCM/State_reg_0 ), 
    .B1(\cm/configCM/State_reg_1 ), .D0(\cm/configCM/n7343 ), 
    .C0(\cm/configCM/RXD_Data_reg_15 ), .B0(\cm/configCM/n3001 ), 
    .A0(\cm/configCM/RXD_Data_reg_14 ), .M1(\cm/configCM/RXD_Data_reg_4 ), 
    .M0(\cm/configCM/RXD_Data_reg_3 ), .CE(\cm/configCM/clk_c_enable_45 ), 
    .CLK(clk_c), .F0(\cm/configCM/clk_c_enable_129 ), .Q0(\cm/c_data_3 ), 
    .F1(\cm/configCM/n7343 ), .Q1(\cm/c_data_4 ));
  cm_configCM_SLICE_478 \cm/configCM/SLICE_478 ( 
    .D1(\cm/configCM/State_reg_2 ), .C1(\cm/configCM/State_reg_1 ), 
    .D0(\cm/configCM/RXD_Data_reg_15 ), .C0(\cm/configCM/n7373 ), 
    .B0(\cm/configCM/State_reg_0 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .M1(UART_out_CM_data_5), .M0(UART_out_CM_data_4), 
    .CE(\cm/configCM/clk_c_enable_54 ), .CLK(clk_c), .F0(\cm/configCM/n3058 ), 
    .Q0(\cm/configCM/RXD_Data_reg_12 ), .F1(\cm/configCM/n7373 ), 
    .Q1(\cm/configCM/RXD_Data_reg_13 ));
  cm_configCM_SLICE_479 \cm/configCM/SLICE_479 ( .B1(\cm/configCM/n7351 ), 
    .A1(\cm/configCM/n3000 ), .D0(\cm/configCM/RXD_Data_reg_10 ), 
    .C0(\cm/configCM/n7352 ), .B0(\cm/configCM/RXD_Data_reg_11 ), 
    .A0(\cm/configCM/RXD_Data_reg_9 ), .M1(UART_out_CM_data_3), 
    .M0(UART_out_CM_data_2), .CE(\cm/configCM/clk_c_enable_54 ), .CLK(clk_c), 
    .F0(\cm/configCM/n3000 ), .Q0(\cm/configCM/RXD_Data_reg_10 ), 
    .F1(\cm/configCM/n7328 ), .Q1(\cm/configCM/RXD_Data_reg_11 ));
  cm_configCM_SLICE_480 \cm/configCM/SLICE_480 ( .D1(\cm/configCM/n7371 ), 
    .C1(\cm/configCM/n6848 ), .B1(\cm/configCM/RXD_Data_reg_8 ), 
    .A1(\cm/configCM/RXD_Data_reg_11 ), .D0(\cm/configCM/n7352 ), 
    .C0(\cm/configCM/RXD_Data_reg_10 ), .B0(\cm/configCM/RXD_Data_reg_9 ), 
    .A0(\cm/configCM/n6801 ), .M1(UART_out_CM_data_7), .M0(UART_out_CM_data_6), 
    .CE(\cm/configCM/clk_c_enable_157 ), .LSR(\cm/configCM/clk_c_enable_54 ), 
    .CLK(clk_c), .F0(\cm/configCM/n6848 ), .Q0(\cm/configCM/RXD_Data_reg_6 ), 
    .F1(\cm/configCM/n2874 ), .Q1(\cm/configCM/RXD_Data_reg_7 ));
  cm_configCM_SLICE_481 \cm/configCM/SLICE_481 ( 
    .D1(\cm/configCM/RXD_Data_reg_10 ), .C1(\cm/configCM/n6835 ), 
    .B1(\cm/configCM/RXD_Data_reg_9 ), .A1(\cm/configCM/n7352 ), .D0(c_data_0), 
    .A0(\cm/configCM/RXD_Data_reg_13 ), .M1(UART_out_CM_data_5), 
    .M0(UART_out_CM_data_4), .CE(\cm/configCM/clk_c_enable_157 ), 
    .LSR(\cm/configCM/clk_c_enable_54 ), .CLK(clk_c), .F0(\cm/configCM/n6835 ), 
    .Q0(\cm/configCM/RXD_Data_reg_4 ), .F1(\cm/configCM/n6714 ), 
    .Q1(\cm/configCM/RXD_Data_reg_5 ));
  cm_configCM_SLICE_482 \cm/configCM/SLICE_482 ( .D1(\cm/configCM/n7352 ), 
    .C1(\cm/configCM/n7350 ), .B1(\cm/configCM/RXD_Data_reg_10 ), 
    .A1(\cm/configCM/RXD_Data_reg_13 ), .D0(c_data_1), 
    .C0(\cm/configCM/RXD_Data_reg_9 ), .B0(\cm/configCM/RXD_Data_reg_8 ), 
    .M1(\cm/configCM/RXD_Data_reg_6 ), .M0(\cm/configCM/RXD_Data_reg_5 ), 
    .CE(\cm/configCM/clk_c_enable_45 ), .CLK(clk_c), .F0(\cm/configCM/n7350 ), 
    .Q0(\cm/c_data_5 ), .F1(\cm/configCM/n7223 ), .Q1(\cm/c_data_6 ));
  cm_configCM_SLICE_483 \cm/configCM/SLICE_483 ( 
    .D1(\cm/configCM/State_reg_0 ), .C1(\cm/configCM/State_reg_1 ), 
    .A1(\cm/configCM/State_reg_2 ), .D0(\cm/configCM/RXD_Data_reg_15 ), 
    .C0(\cm/configCM/n6755 ), .A0(\cm/configCM/RXD_Data_reg_14 ), 
    .M1(\cm/configCM/RXD_Data_reg_11 ), .M0(\cm/configCM/RXD_Data_reg_10 ), 
    .CE(\cm/configCM/clk_c_enable_45 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_45 ), .Q0(\cm/c_data_10 ), 
    .F1(\cm/configCM/n6755 ), .Q1(\cm/c_data_11 ));
  cm_assignCM_SLICE_484 \cm/assignCM/SLICE_484 ( .D1(\cm/Counter_X_Valid ), 
    .B1(\cm/Counter_Y_Valid ), .D0(\cm/assignCM/n521 ), 
    .C0(\cm/assignCM/clk_c_enable_79 ), .B0(\cm/assignCM/Right_DOWN_reg_11 ), 
    .A0(button_signal_DEBUG_VGA), .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_123 ), .CLK(clk_c), .F0(\cm/assignCM/n9 ), 
    .Q0(\cm/assignCM/Left_DOWN_reg_6 ), .F1(\cm/assignCM/clk_c_enable_79 ), 
    .Q1(\cm/assignCM/Left_DOWN_reg_7 ));
  cm_assignCM_SLICE_485 \cm/assignCM/SLICE_485 ( .D1(\cm/Counter_X_Valid ), 
    .C1(button_signal_DEBUG_VGA), .B1(\cm/Counter_Y_Valid ), 
    .D0(\cm/assignCM/Current_Qudran_Config_reg_1 ), .C0(\cm/assignCM/n6827 ), 
    .B0(\cm/assignCM/n3701 ), .A0(\cm/assignCM/n521 ), .M1(\cm/c_data_11 ), 
    .M0(\cm/c_data_10 ), .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n1078 ), .Q0(\cm/assignCM/Left_UP_reg_10 ), 
    .F1(\cm/assignCM/n6827 ), .Q1(\cm/assignCM/Left_UP_reg_11 ));
  SLICE_486 SLICE_486( .D1(c_addr_3), .B1(c_addr_2), .D0(c_valid), .C0(n7361), 
    .B0(\cm/assignCM/Current_Qudran_Config_nxt_1__N_884 ), .A0(n7353), 
    .M1(c_data_1), .M0(c_data_0), .CE(\cm/assignCM/clk_c_enable_123 ), 
    .CLK(clk_c), .F0(n2589), .Q0(\cm/assignCM/Left_DOWN_reg_0 ), .F1(n7361), 
    .Q1(\cm/assignCM/Left_DOWN_reg_1 ));
  SLICE_487 SLICE_487( .D1(c_valid), .C1(n7361), .B1(c_addr_1), .A1(c_addr_0), 
    .D0(\cm/c_data_13 ), .C0(\cm/c_data_12 ), .B0(n7326), 
    .A0(button_signal_DEBUG_VGA), .M1(\cm/c_data_11 ), .M0(\cm/c_data_10 ), 
    .CE(\cm/assignCM/clk_c_enable_123 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_112 ), .Q0(\cm/assignCM/Left_DOWN_reg_10 ), 
    .F1(n7326), .Q1(\cm/assignCM/Left_DOWN_reg_11 ));
  SLICE_488 SLICE_488( .B1(c_addr_3), .A1(c_addr_2), .D0(c_valid), 
    .C0(c_addr_0), .B0(c_addr_1), .A0(n7360), .M1(\cm/c_data_5 ), 
    .M0(\cm/c_data_4 ), .CE(\cm/assignCM/clk_c_enable_123 ), .CLK(clk_c), 
    .F0(clk_VGA_enable_1), .Q0(\cm/assignCM/Left_DOWN_reg_4 ), .F1(n7360), 
    .Q1(\cm/assignCM/Left_DOWN_reg_5 ));
  cm_assignCM_SLICE_489 \cm/assignCM/SLICE_489 ( .D1(button_signal_DEBUG_VGA), 
    .C1(\cm/assignCM/Current_Qudran_Config_nxt_1__N_884 ), .B1(n7338), 
    .A1(n7353), .D0(button_signal_VS), .C0(button_signal_HS), .M0(c_data_1), 
    .CE(clk_c_enable_89), .CLK(clk_c), 
    .F0(\cm/assignCM/Current_Qudran_Config_nxt_1__N_884 ), 
    .Q0(\cm/H_BackPorch_7 ), .F1(\cm/assignCM/clk_c_enable_90 ));
  uart_SLICE_490 \uart/SLICE_490 ( .D1(counter_23_N_178_9), .C1(n1553), 
    .B1(\uart/clk_UART_enable_3 ), .A1(clk_UART), .D0(out_next_N_449), 
    .C0(flag_reg), .B0(\uart/UART_valid_error ), .A0(UART_valid_out), 
    .F0(\uart/clk_UART_enable_3 ), .F1(\uart/SAMPLER/n3049 ));
  uart_UART_STATE_SLICE_491 \uart/UART_STATE/SLICE_491 ( 
    .D1(\uart/UART_STATE/wait_iteration_step_reg_0 ), 
    .B1(\uart/UART_STATE/wait_iteration_step_reg_1 ), .A1(\uart/data ), 
    .D0(\uart/UART_STATE/n378 ), .C0(valid_data), .B0(\uart/UART_STATE/n7342 ), 
    .A0(n374), .F0(\uart/UART_STATE/clk_UART_enable_5 ), 
    .F1(\uart/UART_STATE/n7342 ));
  uart_UART_STATE_SLICE_492 \uart/UART_STATE/SLICE_492 ( 
    .D1(\uart/UART_STATE/stop_iteration_step_reg_0 ), 
    .C1(\uart/UART_STATE/n7195 ), .B1(\uart/UART_STATE/n7194 ), 
    .A1(\uart/UART_STATE/stop_iteration_step_reg_1 ), .D0(\uart/stopbit ), 
    .C0(\uart/data ), .B0(\uart/paritybit ), 
    .A0(\uart/UART_STATE/parity_check_reg ), .F0(\uart/UART_STATE/n7195 ), 
    .F1(\uart/UART_STATE/n7313 ));
  uart_SLICE_493 \uart/SLICE_493 ( .D1(\uart/paritybit ), 
    .C1(\uart/UART_STATE/stop_iteration_step_reg_0 ), .B1(\uart/stopbit ), 
    .A1(\uart/UART_STATE/stop_iteration_step_reg_1 ), 
    .C0(\uart/UART_STATE/n7206 ), .B0(n375), .M0(c_data_1), 
    .CE(\uart/UART_CONFIG/clk_VGA_enable_2 ), .CLK(clk_VGA), 
    .F0(\uart/UART_STATE/n7207 ), .Q0(\uart/paritybit ), 
    .F1(\uart/UART_STATE/n7206 ));
  SLICE_494 SLICE_494( .D1(Count_v_7), .C1(n10_adj_1140), .B1(V_sync_pulse_7), 
    .D0(Count_v_6), .C0(Count_v_5), .A0(V_sync_pulse_6), 
    .CE(\FIFO_UART_CM/clk_LM_enable_1 ), .CLK(clk_LM), .F0(n10_adj_1140), 
    .Q0(UART_out_CM_data_empty), .F1(n12_adj_1139));
  SLICE_495 SLICE_495( .D1(Count_h_7), .C1(n10), .B1(H_sync_pulse_7), 
    .D0(H_sync_pulse_6), .C0(Count_h_5), .B0(Count_h_6), 
    .M1(\FIFO_UART_CM/w_data_reg_1 ), .M0(\FIFO_UART_CM/w_data_reg_0 ), 
    .CE(\FIFO_UART_CM/clk_c_enable_158 ), .CLK(clk_c), .F0(n10), 
    .Q0(UART_out_CM_data_0), .F1(n12), .Q1(UART_out_CM_data_1));
  vga_config1_SLICE_496 \vga/config1/SLICE_496 ( .D1(c_addr_2), .C1(c_addr_3), 
    .A1(c_valid), .D0(c_data_1), .C0(n7362), .A0(c_data_0), 
    .M1(H_left_margin_0), .M0(\vga/H_count_max_6 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .Q0(\vga/config1/H_Count_Max_nxt_6 ), .F1(n7362), 
    .Q1(\vga/config1/H_Left_Margin_nxt_0 ));
  cd_CLOCK_DIVIDER_CONFIG_SLICE_497 \cd/CLOCK_DIVIDER_CONFIG/SLICE_497 ( 
    .D1(c_data_2), .C1(c_valid), .B1(\cd/CLOCK_DIVIDER_CONFIG/n7327 ), 
    .A1(c_data_1), .D0(c_data_0), 
    .C0(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), 
    .M0(\cd/CLOCK_DIVIDER_CONFIG/baudrate_next_23_N_262_3 ), 
    .CE(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ), 
    .LSR(\cd/CLOCK_DIVIDER_CONFIG/n3068 ), .CLK(clk_VGA), 
    .F0(\cd/CLOCK_DIVIDER_CONFIG/n3068 ), .Q0(\cd/baudrate_4 ), 
    .F1(\cd/CLOCK_DIVIDER_CONFIG/clk_VGA_enable_9 ));
  cm_assignCM_SLICE_498 \cm/assignCM/SLICE_498 ( .D1(\cm/c_data_12 ), 
    .C1(button_signal_DEBUG_VGA), .B1(n7326), .A1(\cm/c_data_13 ), 
    .D0(\cm/c_data_12 ), .C0(button_signal_DEBUG_VGA), .B0(n7326), 
    .A0(\cm/c_data_13 ), .M1(\cm/c_data_3 ), .M0(c_data_2), 
    .CE(\cm/assignCM/clk_c_enable_123 ), .CLK(clk_c), 
    .F0(\cm/assignCM/clk_c_enable_101 ), .Q0(\cm/assignCM/Left_DOWN_reg_2 ), 
    .F1(\cm/assignCM/clk_c_enable_123 ), .Q1(\cm/assignCM/Left_DOWN_reg_3 ));
  uart_UART_CONFIG_SLICE_499 \uart/UART_CONFIG/SLICE_499 ( .D1(c_valid), 
    .C1(c_addr_0), .B1(n7360), .A1(c_addr_1), .D0(c_valid), .C0(c_addr_0), 
    .B0(n7360), .A0(c_addr_1), .F0(\uart/UART_CONFIG/clk_VGA_enable_2 ), 
    .F1(n3880));
  cm_configCM_SLICE_500 \cm/configCM/SLICE_500 ( 
    .D1(\cm/configCM/State_reg_2 ), .C1(\cm/configCM/State_reg_1 ), 
    .A1(UART_out_CM_data_empty), .D0(\cm/configCM/State_reg_2 ), 
    .C0(\cm/configCM/State_reg_1 ), .B0(\cm/configCM/State_reg_0 ), 
    .A0(UART_out_CM_data_empty), .M1(UART_out_CM_data_1), 
    .M0(UART_out_CM_data_0), .CE(\cm/configCM/clk_c_enable_54 ), .CLK(clk_c), 
    .F0(\cm/configCM/clk_c_enable_54 ), .Q0(\cm/configCM/RXD_Data_reg_8 ), 
    .F1(\cm/configCM/clk_c_enable_157 ), .Q1(\cm/configCM/RXD_Data_reg_9 ));
  cm_assignCM_SLICE_501 \cm/assignCM/SLICE_501 ( 
    .D1(\cm/assignCM/Right_DOWN_reg_3 ), .C1(\cm/assignCM/clk_c_enable_79 ), 
    .B1(\cm/assignCM/n523 ), .A1(button_signal_DEBUG_VGA), 
    .D0(\cm/assignCM/clk_c_enable_79 ), .C0(\cm/assignCM/Right_DOWN_reg_0 ), 
    .B0(\cm/assignCM/n523 ), .A0(button_signal_DEBUG_VGA), .M1(\cm/c_data_5 ), 
    .M0(\cm/c_data_4 ), .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), 
    .F0(\cm/assignCM/n993 ), .Q0(\cm/assignCM/Left_UP_reg_4 ), 
    .F1(\cm/assignCM/n990 ), .Q1(\cm/assignCM/Left_UP_reg_5 ));
  uart_SLICE_502 \uart/SLICE_502 ( .D1(\uart/UART_STATE/n376 ), 
    .C1(\uart/UART_STATE/n378 ), .A1(\uart/data ), .D0(\uart/UART_STATE/n376 ), 
    .C0(\uart/UART_STATE/n378 ), .B0(valid_data), .A0(\uart/data ), 
    .M0(c_data_0), .CE(clk_VGA_enable_1), .CLK(clk_VGA), 
    .F0(\uart/UART_STATE/clk_UART_enable_4 ), .Q0(\uart/stopbit ), .F1(n7334));
  SLICE_503 SLICE_503( .D1(Count_v_2), .C1(Count_v_3), .B1(V_sync_pulse_2), 
    .A1(V_sync_pulse_3), .D0(Count_v_2), .C0(Count_v_3), .A0(V_sync_pulse_3), 
    .M1(UART_out_7), .M0(UART_out_6), .CE(\FIFO_UART_CM/clk_c_enable_61 ), 
    .CLK(clk_c), .F0(n6_adj_1142), .Q0(\FIFO_UART_CM/w_data_reg_6 ), 
    .F1(n6884), .Q1(\FIFO_UART_CM/w_data_reg_7 ));
  SLICE_504 SLICE_504( .D1(c_addr_2), .C1(c_addr_3), .A1(c_valid), 
    .D0(c_addr_2), .C0(c_addr_3), .B0(Load_config), .A0(c_valid), 
    .M1(\vga/H_count_max_1 ), .M0(\vga/H_count_max_0 ), .LSR(n7362), 
    .CLK(\vga/config1/H_Left_Margin_nxt_8__N_967 ), 
    .F0(\vga/config1/Load_nxt_N_1042 ), .Q0(\vga/config1/H_Count_Max_nxt_0 ), 
    .F1(n7338), .Q1(\vga/config1/H_Count_Max_nxt_1 ));
  SLICE_505 SLICE_505( .D1(H_sync_pulse_3), .C1(Count_h_3), 
    .B1(H_sync_pulse_2), .A1(Count_h_2), .D0(H_sync_pulse_3), .C0(Count_h_3), 
    .A0(Count_h_2), .M1(\FIFO_UART_CM/w_data_reg_7 ), 
    .M0(\FIFO_UART_CM/w_data_reg_6 ), .CE(\FIFO_UART_CM/clk_c_enable_158 ), 
    .CLK(clk_c), .F0(n6), .Q0(UART_out_CM_data_6), .F1(n6904), 
    .Q1(UART_out_CM_data_7));
  SLICE_506 SLICE_506( .D1(button_ff_adj_1146), .C1(counter_31__N_85_adj_1144), 
    .B1(btnUART_c), .A1(clk_DB), .D0(n7318), .C0(ctr_ff_1_adj_1145), 
    .B0(btnUART_c), .A0(button_ff_adj_1146), .F0(clk_c_enable_143), .F1(n3053));
  SLICE_507 SLICE_507( .D1(counter_31__N_85_adj_1144), .C1(clk_DB), 
    .B1(button_ff_adj_1148), .A1(btnVGA_c), .D0(ctr_ff_1_adj_1147), .C0(n7318), 
    .B0(button_ff_adj_1148), .A0(btnVGA_c), .F0(clk_c_enable_144), .F1(n3051));
  SLICE_508 SLICE_508( .D1(button_ff_adj_1154), .C1(ctr_ff_1_adj_1153), 
    .B1(n7318), .A1(btnHS_c), .D0(button_ff_adj_1154), .C0(clk_DB), 
    .B0(btnHS_c), .A0(counter_31__N_85_adj_1144), .M1(btnVGA_c), 
    .M0(btnUART_c), .CLK(clk_DB), .F0(n3042), .Q0(button_ff_adj_1146), 
    .F1(clk_c_enable_34), .Q1(button_ff_adj_1148));
  SLICE_509 SLICE_509( .D1(Count_v_1), .C1(V_sync_pulse_1), .B1(Count_v_0), 
    .A1(V_sync_pulse_0), .D0(Count_v_1), .C0(V_left_margin_0), .B0(Count_v_0), 
    .A0(V_left_margin_1), .M1(\vga/config1/H_Count_Max_nxt_1 ), 
    .M0(\vga/config1/H_Count_Max_nxt_0 ), .CLK(clk_c), .F0(n4_adj_1152), 
    .Q0(\vga/H_count_max_0 ), .F1(n4_adj_1143), .Q1(\vga/H_count_max_1 ));
  cm_configCM_SLICE_510 \cm/configCM/SLICE_510 ( .D1(\cm/configCM/n6755 ), 
    .C1(\cm/configCM/RXD_Data_reg_15 ), .B1(\cm/configCM/RXD_Data_reg_14 ), 
    .A1(\cm/configCM/n7351 ), .D0(\cm/configCM/RXD_Data_reg_15 ), 
    .C0(\cm/configCM/n7343 ), .B0(\cm/configCM/RXD_Data_reg_14 ), 
    .A0(\cm/configCM/n6775 ), .M1(\cm/configCM/RXD_Data_reg_13 ), 
    .M0(\cm/configCM/RXD_Data_reg_12 ), .CE(\cm/configCM/clk_c_enable_45 ), 
    .CLK(clk_c), .F0(\cm/configCM/clk_c_enable_141 ), .Q0(\cm/c_data_12 ), 
    .F1(\cm/configCM/clk_c_enable_148 ), .Q1(\cm/c_data_13 ));
  cm_configCM_SLICE_511 \cm/configCM/SLICE_511 ( 
    .C1(\cm/configCM/State_reg_1 ), .A1(\cm/configCM/State_reg_0 ), 
    .D0(\cm/configCM/State_reg_0 ), .C0(\cm/configCM/State_reg_1 ), 
    .M1(UART_out_CM_data_3), .M0(UART_out_CM_data_2), 
    .CE(\cm/configCM/clk_c_enable_157 ), .LSR(\cm/configCM/clk_c_enable_54 ), 
    .CLK(clk_c), .F0(\cm/configCM/State_nxt_2__N_486 ), 
    .Q0(\cm/configCM/RXD_Data_reg_2 ), .F1(\cm/configCM/n3038 ), 
    .Q1(\cm/configCM/RXD_Data_reg_3 ));
  cm_SLICE_512 \cm/SLICE_512 ( .D1(c_data_0), 
    .B1(\cm/configCM/RXD_Data_reg_9 ), .A1(\cm/configCM/RXD_Data_reg_12 ), 
    .D0(\cm/configCM/RXD_Data_reg_12 ), .B0(\cm/configCM/RXD_Data_reg_9 ), 
    .M1(\cm/c_data_7 ), .M0(\cm/c_data_6 ), 
    .CE(\cm/assignCM/clk_c_enable_112 ), .CLK(clk_c), .F0(\cm/configCM/n7371 ), 
    .Q0(\cm/assignCM/Right_UP_reg_6 ), .F1(\cm/configCM/n2666 ), 
    .Q1(\cm/assignCM/Right_UP_reg_7 ));
  cm_assignCM_SLICE_513 \cm/assignCM/SLICE_513 ( .D1(\cm/assignCM/n1086 ), 
    .C1(\cm/assignCM/n1092 ), .B1(button_signal_DEBUG_VGA), 
    .A1(\cm/assignCM/clk_c_enable_79 ), .D0(\cm/assignCM/Right_DOWN_reg_7 ), 
    .C0(\cm/assignCM/clk_c_enable_79 ), .B0(button_signal_DEBUG_VGA), 
    .A0(\cm/assignCM/n521 ), .M1(c_data_1), .M0(c_data_0), 
    .CE(\cm/assignCM/clk_c_enable_139 ), .CLK(clk_c), .F0(\cm/assignCM/n12 ), 
    .Q0(\cm/assignCM/Left_UP_reg_0 ), .F1(\cm/assignCM/n6881 ), 
    .Q1(\cm/assignCM/Left_UP_reg_1 ));
  uart_SLICE_514 \uart/SLICE_514 ( .C1(flag_reg), .B1(UART_valid_out), 
    .A1(\uart/UART_valid_error ), .B0(UART_valid_out), 
    .A0(\uart/UART_valid_error ), .F0(n7356), .F1(\uart/clk_UART_enable_2 ));
  SLICE_515 SLICE_515( .D1(Count_v_6), .C1(Count_v_5), .B1(V_sync_pulse_5), 
    .A1(V_sync_pulse_6), .D0(V_sync_pulse_5), .B0(Count_v_5), .M1(UART_out_1), 
    .M0(UART_out_0), .CE(\FIFO_UART_CM/clk_c_enable_61 ), .CLK(clk_c), 
    .F0(n7364), .Q0(\FIFO_UART_CM/w_data_reg_0 ), .F1(n6895), 
    .Q1(\FIFO_UART_CM/w_data_reg_1 ));
  SLICE_516 SLICE_516( .D1(n6979), .C1(V_sync_pulse_7), .A1(Count_v_7), 
    .C0(V_sync_pulse_7), .A0(Count_v_7), .M1(UART_out_5), .M0(UART_out_4), 
    .CE(\FIFO_UART_CM/clk_c_enable_61 ), .CLK(clk_c), .F0(n7366), 
    .Q0(\FIFO_UART_CM/w_data_reg_4 ), .F1(n6898), 
    .Q1(\FIFO_UART_CM/w_data_reg_5 ));
  SLICE_517 SLICE_517( .D1(Count_v_3), .C1(Count_v_2), .A1(V_left_margin_3), 
    .C0(Count_v_3), .A0(V_left_margin_3), 
    .M1(\vga/config1/H_Count_Max_nxt_11 ), 
    .M0(\vga/config1/H_Count_Max_nxt_10 ), .CLK(clk_c), .F0(n7368), 
    .Q0(H_count_max_10), .F1(n6_adj_1151), .Q1(\vga/H_count_max_11 ));
  SLICE_518 SLICE_518( .D1(H_sync_pulse_6), .C1(Count_h_5), .B1(Count_h_6), 
    .A1(H_sync_pulse_5), .C0(Count_h_5), .B0(H_sync_pulse_5), 
    .M1(\FIFO_UART_CM/w_data_reg_3 ), .M0(\FIFO_UART_CM/w_data_reg_2 ), 
    .CE(\FIFO_UART_CM/clk_c_enable_158 ), .CLK(clk_c), .F0(n7374), 
    .Q0(UART_out_CM_data_2), .F1(n6915), .Q1(UART_out_CM_data_3));
  SLICE_519 SLICE_519( .D1(Count_h_7), .B1(H_sync_pulse_7), .A1(n7066), 
    .D0(Count_h_7), .B0(H_sync_pulse_7), .M1(\FIFO_UART_CM/w_data_reg_5 ), 
    .M0(\FIFO_UART_CM/w_data_reg_4 ), .CE(\FIFO_UART_CM/clk_c_enable_158 ), 
    .CLK(clk_c), .F0(n7376), .Q0(UART_out_CM_data_4), .F1(n6918), 
    .Q1(UART_out_CM_data_5));
  cm_SLICE_520 \cm/SLICE_520 ( .D1(\cm/configCM/RXD_Data_reg_11 ), 
    .C1(\cm/configCM/RXD_Data_reg_13 ), .B1(\cm/configCM/RXD_Data_reg_14 ), 
    .A1(\cm/configCM/RXD_Data_reg_12 ), .C0(\cm/configCM/RXD_Data_reg_13 ), 
    .B0(\cm/configCM/RXD_Data_reg_8 ), .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_112 ), .CLK(clk_c), .F0(\cm/configCM/n6801 ), 
    .Q0(\cm/assignCM/Right_UP_reg_8 ), .F1(\cm/configCM/n7 ), 
    .Q1(\cm/assignCM/Right_UP_reg_9 ));
  SLICE_521 SLICE_521( .B1(c_UART_ready), .A1(rst_n_c), .C0(c_ready_1), 
    .A0(rst_n_c), .F0(\uart/UART_STATE/error_1__N_334 ), 
    .F1(\cd/CNT_UART/clk_UART_N_18 ));
  SLICE_522 SLICE_522( .D1(Count_v_6), .C1(Count_v_7), .B1(n1121), .A1(n6752), 
    .D0(Count_v_6), .B0(V_sync_pulse_6), .M1(UART_out_3), .M0(UART_out_2), 
    .CE(\FIFO_UART_CM/clk_c_enable_61 ), .CLK(clk_c), .F0(n7365), 
    .Q0(\FIFO_UART_CM/w_data_reg_2 ), .F1(Active_nxt_N_1066), 
    .Q1(\FIFO_UART_CM/w_data_reg_3 ));
  vga_assgncolor_SLICE_523 \vga/assgncolor/SLICE_523 ( 
    .C1(\vga/assgncolor/Active_reg ), .B1(Data_VGA_3), 
    .C0(\vga/assgncolor/Active_reg ), .A0(Data_VGA_4), .F0(GREEN_c_0), 
    .F1(RED_c_3));
  vga_assgncolor_SLICE_524 \vga/assgncolor/SLICE_524 ( 
    .C1(\vga/assgncolor/Active_reg ), .B1(Data_VGA_2), 
    .C0(\vga/assgncolor/Active_reg ), .A0(Data_VGA_10), .F0(BLUE_c_2), 
    .F1(RED_c_2));
  vga_assgncolor_SLICE_525 \vga/assgncolor/SLICE_525 ( 
    .C1(\vga/assgncolor/Active_reg ), .B1(Data_VGA_1), .D0(Data_VGA_9), 
    .C0(\vga/assgncolor/Active_reg ), .F0(BLUE_c_1), .F1(RED_c_1));
  vga_assgncolor_SLICE_526 \vga/assgncolor/SLICE_526 ( .D1(Data_VGA_0), 
    .C1(\vga/assgncolor/Active_reg ), .C0(\vga/assgncolor/Active_reg ), 
    .B0(Data_VGA_8), .F0(BLUE_c_0), .F1(RED_c_0));
  vga_assgncolor_SLICE_527 \vga/assgncolor/SLICE_527 ( 
    .B1(\vga/assgncolor/Active_reg ), .A1(Data_VGA_7), .C0(Data_VGA_5), 
    .B0(\vga/assgncolor/Active_reg ), .F0(GREEN_c_1), .F1(GREEN_c_3));
  vga_assgncolor_SLICE_528 \vga/assgncolor/SLICE_528 ( 
    .D1(\vga/assgncolor/Active_reg ), .C1(Data_VGA_6), 
    .D0(\vga/assgncolor/Active_reg ), .A0(Data_VGA_11), .F0(BLUE_c_3), 
    .F1(GREEN_c_2));
  cm_assignCM_SLICE_529 \cm/assignCM/SLICE_529 ( .D1(button_signal_DEBUG_VGA), 
    .C1(\cm/c_data_12 ), .B1(n7326), .A1(\cm/c_data_13 ), 
    .D0(\cm/assignCM/Current_Qudran_Config_reg_0 ), .B0(\cm/assignCM/n523 ), 
    .M1(\cm/c_data_9 ), .M0(\cm/c_data_8 ), 
    .CE(\cm/assignCM/clk_c_enable_123 ), .CLK(clk_c), .F0(\cm/assignCM/n3701 ), 
    .Q0(\cm/assignCM/Left_DOWN_reg_8 ), .F1(\cm/assignCM/clk_c_enable_139 ), 
    .Q1(\cm/assignCM/Left_DOWN_reg_9 ));
  GREEN_0_ \GREEN[0]_I ( .PADDO(GREEN_c_0), .GREEN0(GREEN[0]));
  GREEN_1_ \GREEN[1]_I ( .PADDO(GREEN_c_1), .GREEN1(GREEN[1]));
  GREEN_2_ \GREEN[2]_I ( .PADDO(GREEN_c_2), .GREEN2(GREEN[2]));
  GREEN_3_ \GREEN[3]_I ( .PADDO(GREEN_c_3), .GREEN3(GREEN[3]));
  RED_0_ \RED[0]_I ( .PADDO(RED_c_0), .RED0(RED[0]));
  RED_1_ \RED[1]_I ( .PADDO(RED_c_1), .RED1(RED[1]));
  RED_2_ \RED[2]_I ( .PADDO(RED_c_2), .RED2(RED[2]));
  RED_3_ \RED[3]_I ( .PADDO(RED_c_3), .RED3(RED[3]));
  LEDS_0_ \LEDS[0]_I ( .PADDO(VCC_net), .LEDS0(LEDS[0]));
  LEDS_1_ \LEDS[1]_I ( .PADDO(GND_net), .LEDS1(LEDS[1]));
  LEDS_2_ \LEDS[2]_I ( .PADDO(VCC_net), .LEDS2(LEDS[2]));
  LEDS_3_ \LEDS[3]_I ( .PADDO(GND_net), .LEDS3(LEDS[3]));
  LEDS_4_ \LEDS[4]_I ( .PADDO(VCC_net), .LEDS4(LEDS[4]));
  LEDS_5_ \LEDS[5]_I ( .PADDO(GND_net), .LEDS5(LEDS[5]));
  LEDS_6_ \LEDS[6]_I ( .PADDO(VCC_net), .LEDS6(LEDS[6]));
  LEDS_7_ \LEDS[7]_I ( .PADDO(GND_net), .LEDS7(LEDS[7]));
  VSYNC VSYNC_I( .PADDO(VSYNC_c), .VSYNC(VSYNC));
  HSYNC HSYNC_I( .PADDO(HSYNC_c), .HSYNC(HSYNC));
  out out_I( .PADDO(VCC_net), .out(out));
  BLUE_3_ \BLUE[3]_I ( .PADDO(BLUE_c_3), .BLUE3(BLUE[3]));
  BLUE_2_ \BLUE[2]_I ( .PADDO(BLUE_c_2), .BLUE2(BLUE[2]));
  BLUE_1_ \BLUE[1]_I ( .PADDO(BLUE_c_1), .BLUE1(BLUE[1]));
  BLUE_0_ \BLUE[0]_I ( .PADDO(BLUE_c_0), .BLUE0(BLUE[0]));
  clk clk_I( .PADDI(clk_c), .clk(clk));
  rst_n rst_n_I( .PADDI(rst_n_c), .rst_n(rst_n));
  btnHS btnHS_I( .PADDI(btnHS_c), .btnHS(btnHS));
  btnVS btnVS_I( .PADDI(btnVS_c), .btnVS(btnVS));
  btnUART btnUART_I( .PADDI(btnUART_c), .btnUART(btnUART));
  btnVGA btnVGA_I( .PADDI(btnVGA_c), .btnVGA(btnVGA));
  in in_I( .PADDI(in_c), .in(in));
  GSR_INST GSR_INST( .GSRNET(rst_n_c));
  basic_4OUT_PLL_PLLInst_0 \basic_4OUT_PLL/PLLInst_0 ( .CLKI(clk_c), 
    .CLKFB(\basic_4OUT_PLL/CLKFB_t ), .CLKINTFB(\basic_4OUT_PLL/CLKFB_t ), 
    .CLKOP(clk_VGA));
  PUR PUR_INST( .PUR(VCC_net));
endmodule

module SLICE_0 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_810_add_2_5( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module SLICE_1 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_810_add_2_3( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_2 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20002 sub_810_add_2_7( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20002 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_3 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_810_add_2_9( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_4 ( input FCI, output F0 );
  wire   GNDI;

  ccu20003 \cm/counterV/sub_815_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_5 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20002 \cm/counterV/sub_815_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_6 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterV/sub_815_add_2_8 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20004 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5AAA;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_7 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterV/sub_815_add_2_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_8 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterV/sub_815_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_9 ( input A1, A0, output FCO );
  wire   GNDI;

  ccu20005 \cm/counterV/sub_815_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5000;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_10 ( input A0, FCI, output F1 );
  wire   GNDI;

  ccu20006 \cm/counterV/sub_817_add_2_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf555;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_11 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20007 \cm/counterV/sub_817_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hf555;
  defparam inst1.INIT1 = 16'hf555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_12 ( input A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20007 \cm/counterV/sub_817_add_2_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_13 ( input A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20008 \cm/counterV/sub_817_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_14 ( input A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20009 \cm/counterV/sub_817_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h0AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_15 ( input A1, output FCO );
  wire   GNDI;

  ccu20010 \cm/counterV/sub_817_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_16 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, LSR_NOTIN, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20011 \cm/counterV/Count_intern_reg_984_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_17 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_984__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_984_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_18 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_984__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_984_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_19 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_984__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_984_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_20 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterV/Count_intern_reg_984__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterV/Count_intern_reg_984_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_21 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_intern_reg_984__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20013 \cm/counterV/Count_intern_reg_984_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterV_SLICE_22 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20011 \cm/counterV/Count_reg_986_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_23 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_986__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_986_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_24 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_986__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_986_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_25 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_986__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_986_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_26 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterV/Count_reg_986__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterV/Count_reg_986_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterV_SLICE_27 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterV/Count_reg_986__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \cm/counterV/Count_reg_986_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_28 ( input B1, A1, A0, FCI, output FCO );
  wire   GNDI;

  ccu20004 \cm/counterH/sub_811_add_2_6 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_SLICE_29 ( input A1, A0, M0, CLK, FCI, output Q0, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0014 \cm/configCM/State_reg_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20015 \cm/counterH/sub_811_add_2_4 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0014 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20015 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_SLICE_30 ( input B1, A0, M1, M0, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \cm/configCM/State_reg_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/configCM/State_reg_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \cm/counterH/sub_811_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20016 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5000;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_31 ( input FCI, output F0 );
  wire   GNDI;

  ccu20003 \cm/counterH/sub_811_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_32 ( input FCI, output F0 );
  wire   GNDI;

  ccu20003 \cm/counterH/sub_813_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_33 ( input B1, B0, FCI, output FCO );
  wire   GNDI;

  ccu20017 \cm/counterH/sub_813_add_2_7 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20017 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF333;
  defparam inst1.INIT1 = 16'hF333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_34 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \cm/counterH/sub_813_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_35 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20018 \cm/counterH/sub_811_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20018 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_36 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \cm/counterH/sub_813_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_37 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20019 \cm/counterH/sub_813_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20019 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h5999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_SLICE_38 ( input B1, B0, A0, M0, CE, CLK, FCI, output Q0, FCO );
  wire   VCCI, GNDI, M0_dly, CLK_dly, CE_dly;

  vmuxregsre0014 \cm/configCM/c_data_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20020 \cm/counterH/sub_811_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20020 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h3CCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_counterH_SLICE_39 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, LSR_NOTIN, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20011 \cm/counterH/Count_intern_reg_980_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_40 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_980__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_980_add_4_9 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_41 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_980__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_980_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_42 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_980__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_980_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_43 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre \cm/counterH/Count_intern_reg_980__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  ccu20012 \cm/counterH/Count_intern_reg_980_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_44 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_intern_reg_980__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20013 \cm/counterH/Count_intern_reg_980_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_45 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i9 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20011 \cm/counterH/Count_reg_982_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_46 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_982__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_982_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_47 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_982__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_982_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_48 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_982__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_982_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_49 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/counterH/Count_reg_982__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cm/counterH/Count_reg_982_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_counterH_SLICE_50 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cm/counterH/Count_reg_982__i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \cm/counterH/Count_reg_982_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_51 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \cm/assignCM/sub_807_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_52 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \cm/assignCM/sub_807_add_2_6 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_53 ( input A1, B0, M1, M0, CE, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20021 \cm/assignCM/sub_807_add_2_4 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20021 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3CCC;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_54 ( input B1, A0, M1, M0, CE, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \cm/assignCM/sub_807_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_55 ( input M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \cm/assignCM/sub_809_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_56 ( input B1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20022 \cm/assignCM/sub_809_add_2_10 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20022 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_57 ( input B1, A1, B0, A0, M1, M0, CE, CLK, FCI, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20002 \cm/assignCM/sub_809_add_2_8 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_58 ( input B1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20020 \cm/assignCM/sub_809_add_2_6 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_59 ( input A1, B0, A0, M1, M0, CE, CLK, FCI, output 
    Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20023 \cm/assignCM/sub_809_add_2_4 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20023 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3999;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cm_assignCM_SLICE_60 ( input B1, A0, M1, M0, CE, CLK, output Q0, Q1, 
    FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20016 \cm/assignCM/sub_809_add_2_2 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_61 ( input M1, M0, CE, CLK, FCI, output F0, Q0, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_DOWN_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \cm/assignCM/sub_807_add_2_cout ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_62 ( input B1, B0, M1, M0, CE, CLK, FCI, output Q0, 
    Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20024 \cm/assignCM/sub_807_add_2_10 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20024 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3CCC;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_63 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20025 sub_825_add_2_25( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(GNDI), 
    .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20025 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_64 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_825_add_2_23( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_65 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_825_add_2_21( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_66 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_825_add_2_19( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_67 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_825_add_2_17( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_68 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_15( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_69 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 sub_825_add_2_13( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_70 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_11( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_71 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_9( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_72 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_7( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_73 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_5( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_74 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 sub_825_add_2_3( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), .A1(A1), 
    .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_75 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20026 sub_825_add_2_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20026 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h0000;
  defparam inst1.INIT1 = 16'h3999;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_76 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20026 sub_810_add_2_1( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_77 ( input FCI, output F0 );
  wire   GNDI;

  ccu20003 sub_810_add_2_cout( .A0(GNDI), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(), 
    .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_78 ( input A0, FCI, output F1 );
  wire   GNDI;

  ccu20006 \vga/assgncolor/sub_823_add_2_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_79 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_823_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_80 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_823_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_81 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20018 \vga/assgncolor/sub_823_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_82 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_823_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_83 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_823_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_84 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20026 \vga/assgncolor/sub_823_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_85 ( input B0, FCI, output F1 );
  wire   GNDI;

  ccu20027 \vga/assgncolor/sub_824_add_2_13 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20027 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF333;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_assgncolor_SLICE_86 ( input B1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20028 \vga/assgncolor/sub_824_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20028 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5999;
  defparam inst1.INIT1 = 16'hF333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_assgncolor_SLICE_87 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_824_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_88 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_824_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_89 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/assgncolor/sub_824_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_90 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/assgncolor/sub_824_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_91 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20019 \vga/assgncolor/sub_824_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_92 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20011 \vga/CounterV/Count_reg_988_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_93 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20029 \vga/CounterV/Count_reg_988_add_4_11 ( .A0(GNDI), .B0(B0), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20029 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFCCC;
  defparam inst1.INIT1 = 16'hFAAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_94 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterV/Count_reg_988_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_95 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterV/Count_reg_988_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_96 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \vga/CounterV/Count_reg_988_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20030 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFAAA;
  defparam inst1.INIT1 = 16'hFCCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module vga_CounterV_SLICE_97 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \vga/CounterV/Count_reg_988_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_98 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20013 \vga/CounterV/Count_reg_988_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_99 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20025 \vga/CounterV/sub_821_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_100 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterV/sub_821_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_101 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterV/sub_821_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_102 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterV/sub_821_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_103 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterV/sub_821_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_104 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterV/sub_821_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_105 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20026 \vga/CounterV/sub_821_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_106 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20012 \vga/CounterH/Count_reg_987_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_107 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \vga/CounterH/Count_reg_987_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_108 ( input B0, A0, FCI, output F1 );
  wire   GNDI;

  ccu20025 \vga/CounterH/sub_819_add_2_13 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_109 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu2 \vga/CounterH/sub_819_add_2_11 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_110 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \vga/CounterH/Count_reg_987_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_111 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20013 \vga/CounterH/Count_reg_987_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_112 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterH/sub_819_add_2_9 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_113 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20002 \vga/CounterH/sub_819_add_2_7 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_114 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20002 \vga/CounterH/sub_819_add_2_5 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_115 ( input B1, A1, B0, A0, FCI, output FCO );
  wire   GNDI;

  ccu20001 \vga/CounterH/sub_819_add_2_3 ( .A0(A0), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_116 ( input B1, A1, output FCO );
  wire   GNDI;

  ccu20026 \vga/CounterH/sub_819_add_2_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_117 ( input A0, FCI, output F0 );
  wire   GNDI;

  ccu20011 \vga/CounterH/Count_reg_987_add_4_13 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_118 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \vga/CounterH/Count_reg_987_add_4_11 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_119 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20031 \vga/CounterH/Count_reg_987_add_4_9 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20031 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hFCCC;
  defparam inst1.INIT1 = 16'hFCCC;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_120 ( input FCI, output F0 );
  wire   GNDI;

  ccu20032 \cd/CNT_UART/limit_23__I_0_add_2_11 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (FCI => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20032 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hffff;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_121 ( input A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20033 \cd/CNT_UART/limit_23__I_0_add_2_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20033 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'hffff;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_122 ( input A1, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20034 \cd/CNT_UART/limit_23__I_0_add_2_7 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20034 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hffff;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_123 ( input A1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20035 \cd/CNT_UART/limit_23__I_0_add_2_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20035 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_124 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20036 \cd/CNT_UART/limit_23__I_0_add_2_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20036 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_UART_SLICE_125 ( input A1, output F1, FCO );
  wire   GNDI;

  ccu20037 \cd/CNT_UART/limit_23__I_0_add_2_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module ccu20037 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_126 ( input A0, M0, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  ccu20011 \cd/CNT_UART/counter_964_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_127 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \cd/CNT_UART/counter_964_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_128 ( input A1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20029 \cd/CNT_UART/counter_964_add_4_21 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_129 ( input B1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20030 \cd/CNT_UART/counter_964_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_130 ( input B1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Sync_Pulse_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/V_Right_Margin_reg_i9 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20030 \cd/CNT_UART/counter_964_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0038 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_131 ( input A1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20029 \cd/CNT_UART/counter_964_add_4_15 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_132 ( input A1, A0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20012 \cd/CNT_UART/counter_964_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_133 ( input B1, B0, M1, M0, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20031 \cd/CNT_UART/counter_964_add_4_11 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_UART_SLICE_134 ( input A1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20029 \cd/CNT_UART/counter_964_add_4_9 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_UART_SLICE_135 ( input B1, A0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20030 \cd/CNT_UART/counter_964_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_UART_SLICE_136 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20031 \cd/CNT_UART/counter_964_add_4_5 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module cd_CNT_UART_SLICE_137 ( input B1, B0, FCI, output F0, F1, FCO );
  wire   GNDI;

  ccu20031 \cd/CNT_UART/counter_964_add_4_3 ( .A0(GNDI), .B0(B0), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_138 ( input A1, M1, M0, CLK, output Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Right_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20013 \cd/CNT_UART/counter_964_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_139 ( input B0, M1, M0, CLK, FCI, output Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/V_Count_Max_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20039 \cd/CNT_LM/add_5131_32 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), 
    .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20039 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_140 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_LM/add_5131_30 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_141 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_LM/add_5131_28 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_142 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/V_Count_Max_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/V_Count_Max_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_LM/add_5131_26 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20040 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5555;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_143 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_LM/add_5131_24 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_144 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Count_Max_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_LM/add_5131_22 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_145 ( input A1, B0, M1, M0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0041 \vga/config1/V_Left_Margin_nxt_5__I_0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/V_Count_Max_nxt_11__I_0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20042 \cd/CNT_LM/add_5131_20 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0041 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   Q_INT, D_INT, LSRB, L_IN;

  MUX41 INST10( .D0(Q_INT), .D1(Q_INT), .D2(D0), .D3(D1), .SD1(SD), .SD2(SP), 
    .Z(D_INT));
  INV INST20( .A(LSR), .Z(LSRB));
  AND2 INST30( .A(LSRB), .B(D_INT), .Z(L_IN));
  FD1S1A INST50( .D(L_IN), .CK(CK), .Q(Q_INT));
  defparam INST50.GSR = "DISABLED";
  BUFBA INST80( .A(Q_INT), .Z(Q));
endmodule

module ccu20042 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_146 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/Load_reg_732 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Sync_Pulse_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_LM/add_5131_18 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_147 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Sync_Pulse_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Sync_Pulse_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/add_5131_16 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_148 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Sync_Pulse_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Sync_Pulse_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_LM/add_5131_14 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_149 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Sync_Pulse_reg_i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Sync_Pulse_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_LM/add_5131_12 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_150 ( input B1, A0, M1, M0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0041 \vga/config1/V_Count_Max_nxt_11__I_0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20043 \cd/CNT_LM/add_5131_10 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20043 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5AAA;
  defparam inst1.INIT1 = 16'h3333;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_151 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/V_Left_Margin_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Left_Margin_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_LM/add_5131_8 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_152 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Left_Margin_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/V_Left_Margin_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20044 \cd/CNT_LM/add_5131_6 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20044 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h3333;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_153 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/V_Left_Margin_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/V_Left_Margin_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20044 \cd/CNT_LM/add_5131_4 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_154 ( input A1, B0, A0, M1, M0, LSR, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0041 \vga/config1/V_Count_Max_nxt_11__I_0_i12 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/V_Count_Max_nxt_11__I_0_i11 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20045 \cd/CNT_LM/add_5131_2 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20045 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h7000;
  defparam inst1.INIT1 = 16'h5AAA;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module cd_CNT_LM_SLICE_155 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i31 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20011 \cd/CNT_LM/counter_965_add_4_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_156 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i30 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i29 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_31 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_157 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i28 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i27 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_158 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i26 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_159 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i24 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i23 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_160 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i22 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_161 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i20 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_162 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_163 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_164 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_165 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_166 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_167 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_168 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_169 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_170 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_LM/counter_965__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_LM/counter_965_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_LM_SLICE_171 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_LM/counter_965__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \cd/CNT_LM/counter_965_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_172 ( input B0, M1, M0, CLK, FCI, output Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20039 \cd/CNT_DB/add_5130_32 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(F1), 
    .CO1());

  specify
    (B0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_173 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i10 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_DB/add_5130_30 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_174 ( input A1, B0, M1, M0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0041 \vga/config1/H_Right_Margin_nxt_10__I_0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/H_Right_Margin_nxt_10__I_0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20042 \cd/CNT_DB/add_5130_28 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_175 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20035 \cd/CNT_DB/add_5130_26 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_176 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Left_Margin_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_DB/add_5130_24 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_177 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Left_Margin_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_DB/add_5130_22 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_178 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20042 \cd/CNT_DB/add_5130_20 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_179 ( input A1, B0, M1, M0, LSR, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  vmuxregsre0041 \vga/config1/H_Right_Margin_nxt_10__I_0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/H_Left_Margin_nxt_8__I_0_i2 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20042 \cd/CNT_DB/add_5130_18 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_180 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Count_Max_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Count_Max_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_DB/add_5130_16 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_181 ( input A1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20035 \cd/CNT_DB/add_5130_14 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_182 ( input B1, A0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Count_Max_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20040 \cd/CNT_DB/add_5130_12 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_183 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20024 \cd/CNT_DB/add_5130_10 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_184 ( input B1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0038 \vga/config1/H_Right_Margin_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Right_Margin_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20036 \cd/CNT_DB/add_5130_8 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(GNDI), .B1(B1), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (B1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_185 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20044 \cd/CNT_DB/add_5130_6 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_186 ( input A1, B0, M1, M0, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Right_Margin_reg_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/H_Right_Margin_reg_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20044 \cd/CNT_DB/add_5130_4 ( .A0(GNDI), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_187 ( input A1, B0, A0, M1, M0, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Left_Margin_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20045 \cd/CNT_DB/add_5130_2 ( .A0(A0), .B0(B0), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (A1 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_188 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i31 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20011 \cd/CNT_DB/counter_966_add_4_33 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_189 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i30 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i29 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_31 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_190 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i28 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i27 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_191 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i26 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_192 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i24 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i23 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_193 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i22 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_194 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i20 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_195 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_196 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_197 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_198 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_199 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_200 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_201 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_202 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_203 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CNT_DB/counter_966__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20012 \cd/CNT_DB/counter_966_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cd_CNT_DB_SLICE_204 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre \cd/CNT_DB/counter_966__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \cd/CNT_DB/counter_966_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterH_SLICE_205 ( input D1, B1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut4 \vga/CounterH/i3148_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \vga/CounterH/i3020_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0047 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module vga_CounterH_SLICE_206 ( input C1, B1, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40048 \vga/CounterH/i3150_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40049 \vga/CounterH/i3149_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_207 ( input B1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40050 \vga/CounterH/i3152_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \vga/CounterH/i3151_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5500) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_208 ( input C1, B1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40052 \vga/CounterH/i3154_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40053 \vga/CounterH/i3153_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_209 ( input D1, C1, D0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40054 \vga/CounterH/i3156_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \vga/CounterH/i3155_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_210 ( input B1, A1, D0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40053 \vga/CounterH/i3158_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40055 \vga/CounterH/i3157_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterH/Count_reg_987__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_211 ( input C1, A1, B0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40056 \vga/CounterV/i3137_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \vga/CounterV/i3019_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_212 ( input C1, A1, D0, C0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40049 \vga/CounterV/i3139_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \vga/CounterV/i3138_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterV_SLICE_213 ( input C1, A1, D0, C0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40049 \vga/CounterV/i3141_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40057 \vga/CounterV/i3140_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_214 ( input D1, C1, C0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40054 \vga/CounterV/i3143_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40056 \vga/CounterV/i3142_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_215 ( input D1, B1, C0, B0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40055 \vga/CounterV/i3145_2_lut ( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40052 \vga/CounterV/i3144_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_CounterV_SLICE_216 ( input D1, A1, D0, A0, DI1, DI0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40051 \vga/CounterV/i3147_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \vga/CounterV/i3146_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \vga/CounterV/Count_reg_988__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_217 ( input D1, B1, A1, D0, C0, B0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_217/cm/assignCM/SLICE_217_K1_H1 , 
         \cm/assignCM/SLICE_217/cm/assignCM/mux_572_i1/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40058 \cm/assignCM/SLICE_217_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\cm/assignCM/SLICE_217/cm/assignCM/SLICE_217_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \cm/assignCM/mux_572_i1/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_217/cm/assignCM/mux_572_i1/GATE_H0 ));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_217_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_217/cm/assignCM/mux_572_i1/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_217/cm/assignCM/SLICE_217_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module cm_assignCM_SLICE_218 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40060 \cm/assignCM/mux_572_i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40061 \cm/assignCM/mux_572_i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0AC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA3A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_219 ( input D1, C1, B1, D0, C0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_219/cm/assignCM/SLICE_219_K1_H1 , 
         \cm/assignCM/SLICE_219/cm/assignCM/mux_572_i4/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40062 \cm/assignCM/SLICE_219_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/assignCM/SLICE_219/cm/assignCM/SLICE_219_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40063 \cm/assignCM/mux_572_i4/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_219/cm/assignCM/mux_572_i4/GATE_H0 ));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_219_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_219/cm/assignCM/mux_572_i4/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_219/cm/assignCM/SLICE_219_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_220 ( input D1, C1, A1, D0, C0, B0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_220/cm/assignCM/SLICE_220_K1_H1 , 
         \cm/assignCM/SLICE_220/cm/assignCM/i34/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40063 \cm/assignCM/SLICE_220_K1 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(\cm/assignCM/SLICE_220/cm/assignCM/SLICE_220_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \cm/assignCM/i34/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/SLICE_220/cm/assignCM/i34/GATE_H0 ));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_220_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_220/cm/assignCM/i34/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_220/cm/assignCM/SLICE_220_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module cm_assignCM_SLICE_221 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40064 \cm/assignCM/mux_572_i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40065 \cm/assignCM/mux_572_i6_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_222 ( input C1, B1, A1, D0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_222/cm/assignCM/SLICE_222_K1_H1 , 
         \cm/assignCM/SLICE_222/cm/assignCM/i30/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly, CE_dly;

  lut40066 \cm/assignCM/SLICE_222_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\cm/assignCM/SLICE_222/cm/assignCM/SLICE_222_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40058 \cm/assignCM/i30/GATE ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\cm/assignCM/SLICE_222/cm/assignCM/i30/GATE_H0 ));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_222_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_222/cm/assignCM/i30/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_222/cm/assignCM/SLICE_222_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB8B8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_223 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40067 \cm/assignCM/mux_572_i10_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40068 \cm/assignCM/mux_572_i9_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE0E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_224 ( input D1, C1, B1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40069 \cm/assignCM/i1_2_lut_rep_120_2_lut_2_lut_3_lut ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40070 \cm/assignCM/mux_572_i11_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFCA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_225 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/assignCM/SLICE_225/cm/assignCM/SLICE_225_K1_H1 , 
         \cm/assignCM/SLICE_225/cm/assignCM/mux_572_i12/GATE_H0 , VCCI, 
         DI0_dly, CLK_dly, CE_dly;

  lut40071 \cm/assignCM/SLICE_225_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\cm/assignCM/SLICE_225/cm/assignCM/SLICE_225_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40072 \cm/assignCM/mux_572_i12/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/SLICE_225/cm/assignCM/mux_572_i12/GATE_H0 ));
  vmuxregsre0014 \cm/assignCM/Data_VGA_reg_i0_i11 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/assignCM/SLICE_225_K0K1MUX ( 
    .D0(\cm/assignCM/SLICE_225/cm/assignCM/mux_572_i12/GATE_H0 ), 
    .D1(\cm/assignCM/SLICE_225/cm/assignCM/SLICE_225_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module FIFO_UART_CM_SLICE_230 ( input D1, C1, B1, A1, C0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40073 \FIFO_UART_CM/i391_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40074 \FIFO_UART_CM/i5960_2_lut_rep_145 ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \FIFO_UART_CM/w_empty_reg_21 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF5F5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_CounterH_SLICE_231 ( input D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40075 \vga/CounterH/i2954_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0047 \vga/CounterH/Sync_State_reg_13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_246 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40076 \uart/UART_STATE/i3120_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40077 \uart/UART_STATE/i3119_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA2AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_247 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40078 \uart/UART_STATE/i3122_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40078 \uart/UART_STATE/i3121_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_248 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40078 \uart/UART_STATE/i3124_2_lut_3_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40078 \uart/UART_STATE/i3123_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uart_SLICE_249 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, M1, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40079 \uart/SAMPLER/i315_2_lut_rep_104_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40080 \uart/UART_STATE/i3208_2_lut_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0047 \uart/UART_STATE/out_reg__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_255 ( input D1, B1, D0, C0, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40081 \uart/UART_STATE/equal_22_i3_2_lut_rep_137 ( .A(GNDI), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40082 \uart/UART_STATE/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/valid_out_reg_83 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_256 ( input D1, C1, B1, A1, D0, C0, B0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40083 i3_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40084 \vga/CounterV/i2952_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0047 \vga/CounterV/Sync_State_reg_13 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_275 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI0, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40085 \cd/CLOCK_DIVIDER_CONFIG/i2292_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40086 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_115_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0087 \cd/CLOCK_DIVIDER_CONFIG/c_UART_ready_reg_28 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0087 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3JY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module SLICE_276 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40088 \uart/UART_CONFIG/i1_2_lut_rep_113_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40089 \cd/CLOCK_DIVIDER_CONFIG/i2_3_lut_rep_128_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0087 \cd/CLOCK_DIVIDER_CONFIG/c_VGA_ready_reg_27 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_277 ( input D1, A1, D0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40090 \cm/configCM/i924_2_lut_rep_127 ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40091 \cm/configCM/i2_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/c_addr_reg_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_278 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40092 \cm/configCM/i2112_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40093 \cm/configCM/i3103_3_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/c_addr_reg_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/c_addr_reg_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F07) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_279 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40094 \cm/configCM/i1_3_lut_rep_140 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40095 \cm/configCM/i3107_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/c_addr_reg_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0AA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF5D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_280 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40096 \cm/configCM/n6714_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40097 \cm/configCM/c_data_nxt_13__I_0_i1_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD580) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_281 ( input D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40098 \cm/configCM/c_data_nxt_13__I_0_i2_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5D08) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_282 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40099 \cm/configCM/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40100 \cm/configCM/i15_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0100) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_283 ( input D1, B1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, LSR_dly;

  lut40055 \uart/UART_CONFIG/i1_2_lut_rep_141 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40101 \cd/CLOCK_DIVIDER_CONFIG/n6_bdd_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0087 \uart/UART_CONFIG/c_ready_reg_22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDF7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_284 ( input C1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40102 \cm/i1_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40103 \cm/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/c_valid_reg_148 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_285 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40104 \cd/CLOCK_DIVIDER_CONFIG/c_data_0__bdd_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40105 \vga/config1/i6056_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0038 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5B5B) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0707) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_286 ( input C0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40106 \cd/CLOCK_DIVIDER_CONFIG/i1137_2_lut_rep_142 ( .A(A0), .B(GNDI), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0087 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5A5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_287 ( input D1, C1, B1, C0, B0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40107 \cd/CLOCK_DIVIDER_CONFIG/i2294_2_lut_3_lut ( .A(GNDI), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40108 \cd/CLOCK_DIVIDER_CONFIG/i3090_2_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0038 \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_289 ( input A0, DI0, M1, CE, LSR, CLK, 
    output F0, Q0, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly, CE_dly, LSR_dly;

  lut40109 \cd/CLOCK_DIVIDER_CONFIG/i1132_1_lut_rep_132 ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_290 ( input D1, C1, B1, A1, D0, A0, DI0, M1, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40110 i1_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40111 \cd/CNT_DB/clkout_I_0_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Sync_Pulse_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cd/CNT_DB/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h55AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_291 ( input D1, C1, B1, A1, B0, A0, DI0, M1, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40112 \FIFO_UART_CM/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40113 \cd/CNT_LM/clkout_I_0_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \vga/config1/V_Right_Margin_reg_i0 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cd/CNT_LM/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_292 ( input C0, B0, A0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40114 \uart/SAMPLER/clkout_I_0_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0047 \cd/CNT_UART/clkout_17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9A9A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_counterH_SLICE_293 ( input C1, B1, A1, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40115 \cm/counterH/i6007_2_lut_3_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40116 \cm/counterH/i5975_2_lut_rep_110_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0014 \cm/counterH/Counter_Valid_reg_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1111) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_counterV_SLICE_294 ( input C1, B1, A1, C0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40117 \cm/counterV/i6004_2_lut_3_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40118 \cm/counterV/i5978_2_lut_rep_109_2_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0014 \cm/counterV/Counter_Valid_reg_19 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_295 ( input D1, A1, D0, A0, DI1, DI0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40119 \vga/config1/i3197_2_lut_rep_146 ( .A(A1), .B(GNDI), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40120 \cd/CLOCK_DIVIDER_CONFIG/i2999_2_lut_2_lut ( .A(A0), .B(GNDI), 
    .C(GNDI), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/H_BackPorch_reg_i0_i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0038 \cm/assignCM/H_BackPorch_reg_i0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_296 ( input C1, B1, C0, B0, DI1, DI0, CE, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 \cm/assignCM/i3016_2_lut_rep_143 ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40121 \vga/config1/i3198_1_lut_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/H_BackPorch_reg_i0_i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0038 \cm/assignCM/H_BackPorch_reg_i0_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0303) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_298 ( input C0, DI0, CE, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40122 \vga/config1/i1107_1_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0038 \cm/assignCM/V_BackPorch_reg_i0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0F0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_299 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40123 \cm/assignCM/i1338_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40124 \cm/assignCM/i1169_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Current_Qudran_Config_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Current_Qudran_Config_reg_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCECC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_330 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40125 \cm/assignCM/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40126 \vga/config1/i1_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0087 \cm/assignCM/c_ready_reg_118 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h002A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_339 ( input D1, B1, A1, D0, B0, A0, DI0, M0, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \cm/configCM/SLICE_339/cm/configCM/SLICE_339_K1_H1 , 
         \cm/configCM/SLICE_339/cm/configCM/i6110/GATE_H0 , VCCI, DI0_dly, 
         CLK_dly;

  lut40127 \cm/configCM/SLICE_339_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\cm/configCM/SLICE_339/cm/configCM/SLICE_339_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40128 \cm/configCM/i6110/GATE ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(\cm/configCM/SLICE_339/cm/configCM/i6110/GATE_H0 ));
  vmuxregsre0129 \cm/configCM/State_nxt_2__I_0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \cm/configCM/SLICE_339_K0K1MUX ( 
    .D0(\cm/configCM/SLICE_339/cm/configCM/i6110/GATE_H0 ), 
    .D1(\cm/configCM/SLICE_339/cm/configCM/SLICE_339_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF11) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0129 ( input D0, D1, SD, SP, CK, LSR, output Q );
  wire   GATE;

  AND2 INST50( .A(SP), .B(CK), .Z(GATE));
  FL1S1D INST01( .D0(D0), .D1(D1), .CK(GATE), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module cm_configCM_SLICE_340 ( input D0, C0, A0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40130 \cm/configCM/i2113_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \cm/configCM/State_nxt_2__I_0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF505) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_341 ( input D1, C1, B1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40131 \cm/configCM/i2_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40132 \cm/configCM/mux_202_Mux_3_i7_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0129 \cm/configCM/State_nxt_2__I_0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2838) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_342 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, LSR, 
    CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40133 \cm/configCM/i20_4_lut_rep_139 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40134 \cm/configCM/RXD_Data_reg_14__I_0_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/Err_reg_144 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A58) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFA3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_345 ( input D1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40135 \uart/SAMPLER/i3047_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \uart/SAMPLER/i3000_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDD00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_346 ( input D1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40135 \uart/SAMPLER/i3045_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \uart/SAMPLER/i3046_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_347 ( input C1, B1, A1, D0, C0, B0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40137 \uart/SAMPLER/i3043_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40138 \uart/SAMPLER/i3044_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA2A2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_348 ( input D1, C1, B1, D0, C0, B0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40139 \uart/SAMPLER/i3041_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40139 \uart/SAMPLER/i3042_2_lut_3_lut ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_349 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40140 \uart/SAMPLER/i3039_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \uart/SAMPLER/i3040_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_350 ( input D1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40135 \uart/SAMPLER/i3037_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40140 \uart/SAMPLER/i3038_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_351 ( input D1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40135 \uart/SAMPLER/i3035_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \uart/SAMPLER/i3036_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_352 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40141 \uart/SAMPLER/i3033_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \uart/SAMPLER/i3034_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8A8A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_353 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40136 \uart/SAMPLER/i3031_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40136 \uart/SAMPLER/i3032_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i17 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_354 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40137 \uart/SAMPLER/i3028_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40137 \uart/SAMPLER/i3030_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i18 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_355 ( input D1, C1, B1, C0, B0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40142 \uart/SAMPLER/i3026_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40141 \uart/SAMPLER/i3027_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCF00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_356 ( input D1, C1, A1, D0, C0, A0, DI1, DI0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  lut40143 \uart/SAMPLER/i3024_2_lut_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40143 \uart/SAMPLER/i3025_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \cd/CNT_UART/counter_964__i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module db_DB_VS_SLICE_357 ( input D0, A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40111 \db/DB_VS/i5326_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_VS/ctr_ff_968__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_DF_UART_SLICE_358 ( input C0, A0, DI0, CE, LSR, CLK, output F0, 
    Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40106 \db/DB_DF_UART/i5311_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_DF_UART/ctr_ff_970__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_DF_VGA_SLICE_359 ( input C0, A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40106 \db/DB_DF_VGA/i5296_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_DF_VGA/ctr_ff_972__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_HS_SLICE_360 ( input D0, A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40111 \db/DB_HS/i5158_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_HS/ctr_ff_990__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_DF_UART_SLICE_361 ( input A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40109 \db/DB_DF_UART/i5309_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_DF_UART/ctr_ff_970__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_DF_VGA_SLICE_362 ( input A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40109 \db/DB_DF_VGA/i5294_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_DF_VGA/ctr_ff_972__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_HS_SLICE_363 ( input A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40109 \db/DB_HS/i5156_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_HS/ctr_ff_990__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module db_DB_VS_SLICE_364 ( input A0, DI0, CE, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40109 \db/DB_VS/i5324_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \db/DB_VS/ctr_ff_968__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uart_SAMPLER_SLICE_365 ( input D1, B1, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40144 \uart/SAMPLER/i5224_2_lut_rep_160 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40116 \uart/SAMPLER/i6062_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \uart/SAMPLER/flag_reg_46 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_366 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40145 \uart/UART_STATE/i1187_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40146 \uart/UART_STATE/i1_4_lut_adj_26 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/state_reg_FSM__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/state_reg_FSM__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAC0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_367 ( input D1, A1, A0, DI1, DI0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40111 \uart/SAMPLER/i5202_2_lut ( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \uart/SAMPLER/i1_1_lut_rep_151 ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_0_reg_977__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_977__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module uart_SAMPLER_SLICE_368 ( input D1, C1, B1, A1, D0, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40147 \uart/SAMPLER/i5216_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40148 \uart/SAMPLER/i5209_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_977__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_0_reg_977__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h78F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h66CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_369 ( input C1, B1, A1, C0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40149 \uart/SAMPLER/i5230_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40150 \uart/SAMPLER/i5222_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_1_reg_976__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_1_reg_976__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A6A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5A5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_370 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40151 \uart/SAMPLER/i5244_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40152 \uart/SAMPLER/i5237_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \uart/SAMPLER/nr_1_reg_976__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \uart/SAMPLER/nr_1_reg_976__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h78F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_371 ( input B1, A1, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40153 \uart/SAMPLER/i5173_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40109 \uart/SAMPLER/i5171_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \uart/SAMPLER/val_reg_978__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \uart/SAMPLER/val_reg_978__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_372 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40154 \uart/SAMPLER/i5187_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40149 \uart/SAMPLER/i5180_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \uart/SAMPLER/val_reg_978__i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \uart/SAMPLER/val_reg_978__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_373 ( input D1, C1, A1, C0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40155 \uart/UART_STATE/i3172_3_lut ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40156 \uart/UART_STATE/i3029_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/data_iteration_step_reg_974__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/data_iteration_step_reg_974__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5050) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_374 ( input D1, B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40157 \uart/UART_STATE/i2_3_lut_adj_27 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40158 \uart/UART_STATE/i3173_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/data_iteration_step_reg_974__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_375 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40159 \uart/UART_STATE/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40160 \uart/UART_STATE/i1189_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0161 \uart/UART_STATE/state_reg_FSM__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/state_reg_FSM__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0161 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module uart_UART_STATE_SLICE_376 ( input C1, A1, C0, B0, A0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40162 \uart/UART_STATE/stopbit_bdd_2_lut_6099 ( .A(A1), .B(GNDI), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40163 \uart/UART_STATE/i2960_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/parity_check_reg_85 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4848) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_377 ( input D1, B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40164 \uart/UART_STATE/i3174_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40165 \uart/UART_STATE/i3048_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/stop_iteration_step_reg_973__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/stop_iteration_step_reg_973__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4488) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_378 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40166 \uart/UART_STATE/i142_3_lut_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40167 \uart/UART_STATE/reduce_or_174_i1_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/state_reg_FSM__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5559) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD5C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_379 ( input D1, B1, A1, B0, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40168 \uart/UART_STATE/i2_4_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40165 \uart/UART_STATE/i5135_3_lut_4_lut_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/wait_iteration_step_reg_963__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0047 \uart/UART_STATE/wait_iteration_step_reg_963__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (LSR => Q1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4488) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_380 ( input D1, C1, B1, D0, B0, DI0, CE, LSR, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40169 \uart/UART_STATE/i2_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40170 \uart/UART_STATE/i2980_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0047 \uart/UART_STATE/valid_error_reg_82 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SAMPLER_SLICE_381 ( input D1, C1, B1, D0, C0, B0, A0, DI0, M0, CE, 
    CLK, output OFX0, Q0 );
  wire   GNDI, \uart/SAMPLER/SLICE_381/uart/SAMPLER/SLICE_381_K1_H1 , 
         \uart/SAMPLER/SLICE_381/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40171 \uart/SAMPLER/SLICE_381_K1 ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(\uart/SAMPLER/SLICE_381/uart/SAMPLER/SLICE_381_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40172 \uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(D0), 
    .Z(\uart/SAMPLER/SLICE_381/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 ));
  vmuxregsre0014 \uart/SAMPLER/out_reg_44 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \uart/SAMPLER/SLICE_381_K0K1MUX ( 
    .D0(\uart/SAMPLER/SLICE_381/uart/SAMPLER/nr_1_reg_3__I_0_i8/GATE_H0 ), 
    .D1(\uart/SAMPLER/SLICE_381/uart/SAMPLER/SLICE_381_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F03) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7150) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_384 ( input C1, B1, A1, D0, C0, B0, A0, DI0, LSR, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40173 i6021_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40174 \uart/SAMPLER/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \uart/SAMPLER/valid_reg_45 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC4C4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_403 ( input D1, C1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40175 i2_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40176 \vga/assgncolor/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \vga/assgncolor/Active_reg_17 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_407 ( input D0, C0, B0, DI0, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40177 \vga/config1/H_count_max_5__I_0_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_409 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40178 \vga/config1/H_count_max_8__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40179 \vga/config1/H_count_max_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40178 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1F10) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40179 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_410 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40180 \cm/assignCM/H_count_max_10__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40181 \vga/config1/H_count_max_9__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40180 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40181 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0AFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_411 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40182 \vga/config1/H_count_max_11__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Count_Max_nxt_11__I_0_i12 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40182 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_413 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40182 \vga/config1/H_left_margin_3__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40183 \cm/assignCM/H_left_margin_2__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40183 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_414 ( input D1, C1, B1, A1, D0, C0, B0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40179 \vga/config1/H_left_margin_5__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40177 \vga/config1/H_left_margin_4__I_0_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_415 ( input D1, C1, B1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40177 \vga/config1/H_left_margin_7__I_0_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40183 \cm/assignCM/H_left_margin_6__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_416 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40179 \vga/config1/H_left_margin_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Left_Margin_nxt_8__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_419 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40184 \vga/config1/H_right_margin_4__I_0_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40185 \cd/CLOCK_DIVIDER_CONFIG/H_right_margin_3__I_0_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40184 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40185 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6F60) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_420 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40186 \cm/assignCM/H_right_margin_6__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40185 \cd/CLOCK_DIVIDER_CONFIG/H_right_margin_5__I_0_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40186 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2F20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_421 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40187 \vga/config1/H_right_margin_8__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40188 \cm/assignCM/H_right_margin_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i9 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40187 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40188 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_422 ( input D1, C1, B1, A1, D0, C0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40189 \vga/config1/H_right_margin_10__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40181 \vga/config1/H_right_margin_9__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i11 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Right_Margin_nxt_10__I_0_i10 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40189 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_424 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40190 \vga/config1/H_sync_pulse_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40190 \vga/config1/H_sync_pulse_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40190 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_425 ( input D1, C1, B1, D0, C0, B0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40191 \vga/config1/H_sync_pulse_4__I_0_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40191 \vga/config1/H_sync_pulse_3__I_0_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40191 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_426 ( input D1, C1, B1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40191 \vga/config1/H_sync_pulse_6__I_0_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40192 \cm/assignCM/H_sync_pulse_5__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40192 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0CAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_427 ( input D0, C0, B0, A0, DI0, CLK, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40179 \vga/config1/H_sync_pulse_7__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/H_Sync_Pulse_nxt_7__I_0_i8 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vga_config1_SLICE_428 ( input D0, C0, DI0, LSR, CLK, output F0, Q0 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, LSR_dly;

  lut40193 \vga/config1/i6027_2_lut_rep_135 ( .A(GNDI), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__N_979_I_0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (LSR => Q0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40193 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_430 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40190 \vga/config1/V_count_max_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40189 \vga/config1/V_count_max_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_431 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40194 \cm/assignCM/V_count_max_4__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40195 \vga/config1/V_count_max_3__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40194 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40195 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0A3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_432 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40188 \cm/assignCM/V_count_max_6__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40196 \cd/CLOCK_DIVIDER_CONFIG/V_count_max_5__I_0_3_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40196 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6F60) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_434 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40197 \vga/config1/V_count_max_9__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40179 \vga/config1/V_count_max_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Count_Max_nxt_11__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40197 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F70) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_436 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40198 \cd/CLOCK_DIVIDER_CONFIG/V_left_margin_1__I_0_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40199 \vga/config1/V_left_margin_0__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__I_0_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__I_0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40198 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40199 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5CFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_438 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40183 \cm/assignCM/V_left_margin_4__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40183 \cm/assignCM/V_left_margin_3__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__I_0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__I_0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_439 ( input D1, B1, D0, C0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40200 LessThan_683_i11_2_lut_rep_155( .A(GNDI), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40201 \vga/config1/V_left_margin_5__I_0_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Left_Margin_nxt_5__I_0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40200 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40201 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_440 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40202 \cd/CLOCK_DIVIDER_CONFIG/V_right_margin_1__I_0_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40203 \vga/config1/V_right_margin_0__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40202 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40203 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3AFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_441 ( input M1, M0, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40204 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40205 i2( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0041 \vga/config1/V_Right_Margin_nxt_9__I_0_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Right_Margin_nxt_9__I_0_i3 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40204 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40205 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_442 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40198 \cd/CLOCK_DIVIDER_CONFIG/V_right_margin_5__I_0_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40180 \cm/assignCM/V_right_margin_4__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_443 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut40206 \vga/config1/i2_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40180 \cm/assignCM/V_right_margin_6__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40206 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_SLICE_444 ( input C1, B1, D0, A0, M1, M0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40121 \vga/CounterV/i5983_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40207 \vga/assgncolor/i2_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i3 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Right_Margin_nxt_9__I_0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40207 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_445 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40203 \vga/config1/V_right_margin_9__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40182 \vga/config1/V_right_margin_8__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Right_Margin_nxt_9__I_0_i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_446 ( input C1, B1, D0, C0, B0, A0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40208 LessThan_674_i13_2_lut_rep_163( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40209 \uart/SAMPLER/i6068_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i4 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40208 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3C3C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40209 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7BDE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_447 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40179 \vga/config1/V_sync_pulse_2__I_0_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40186 \cm/assignCM/V_sync_pulse_1__I_0_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0129 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0129 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_448 ( input D1, C1, B1, A1, D0, B0, A0, M1, M0, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40210 \uart/SAMPLER/val_reg_1__bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40211 \uart/UART_STATE/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40210 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8991) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40211 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_449 ( input C1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40212 \uart/UART_STATE/equal_20_i3_2_lut_rep_136 ( .A(A1), .B(GNDI), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40213 LessThan_674_i4_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i7 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i6 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40212 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAFA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40213 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7150) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_450 ( input C1, B1, D0, C0, B0, M1, M0, LSR, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40208 LessThan_683_i5_2_lut( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40214 \FIFO_UART_CM/i5956_2_lut_rep_129_3_lut ( .A(GNDI), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i5 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/V_Sync_Pulse_nxt_7__I_0_i8 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40214 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0C0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_677_i16_SLICE_451 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   \LessThan_677_i16/SLICE_451/LessThan_677_i16/SLICE_451_K1_H1 , GNDI, 
         \LessThan_677_i16/SLICE_451/LessThan_677_i16/GATE_H0 ;

  lut40215 \LessThan_677_i16/SLICE_451_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\LessThan_677_i16/SLICE_451/LessThan_677_i16/SLICE_451_K1_H1 ));
  lut40216 \LessThan_677_i16/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\LessThan_677_i16/SLICE_451/LessThan_677_i16/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \LessThan_677_i16/SLICE_451_K0K1MUX ( 
    .D0(\LessThan_677_i16/SLICE_451/LessThan_677_i16/GATE_H0 ), 
    .D1(\LessThan_677_i16/SLICE_451/LessThan_677_i16/SLICE_451_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40215 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF2D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40216 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_674_i16_SLICE_452 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   \LessThan_674_i16/SLICE_452/LessThan_674_i16/SLICE_452_K1_H1 , GNDI, 
         \LessThan_674_i16/SLICE_452/LessThan_674_i16/GATE_H0 ;

  lut40215 \LessThan_674_i16/SLICE_452_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\LessThan_674_i16/SLICE_452/LessThan_674_i16/SLICE_452_K1_H1 ));
  lut40217 \LessThan_674_i16/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\LessThan_674_i16/SLICE_452/LessThan_674_i16/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \LessThan_674_i16/SLICE_452_K0K1MUX ( 
    .D0(\LessThan_674_i16/SLICE_452/LessThan_674_i16/GATE_H0 ), 
    .D1(\LessThan_674_i16/SLICE_452/LessThan_674_i16/SLICE_452_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40217 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_i6146_SLICE_453 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \cm/configCM/i6146/SLICE_453/cm/configCM/i6146/SLICE_453_K1_H1 , 
         \cm/configCM/i6146/SLICE_453/cm/configCM/i6146/GATE_H0 ;

  lut40218 \cm/configCM/i6146/SLICE_453_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/configCM/i6146/SLICE_453/cm/configCM/i6146/SLICE_453_K1_H1 ));
  lut40219 \cm/configCM/i6146/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/configCM/i6146/SLICE_453/cm/configCM/i6146/GATE_H0 ));
  selmux2 \cm/configCM/i6146/SLICE_453_K0K1MUX ( 
    .D0(\cm/configCM/i6146/SLICE_453/cm/configCM/i6146/GATE_H0 ), 
    .D1(\cm/configCM/i6146/SLICE_453/cm/configCM/i6146/SLICE_453_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40218 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40219 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF37) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i10_SLICE_454 ( input D1, C1, B1, A1, D0, C0, B0, 
    M0, output OFX0 );
  wire   
         \cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/SLICE_454_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/GATE_H0 ;

  lut40220 \cm/assignCM/mux_583_i10/SLICE_454_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/SLICE_454_K1_H1 )
    );
  lut40059 \cm/assignCM/mux_583_i10/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i10/SLICE_454_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i10/SLICE_454/cm/assignCM/mux_583_i10/SLICE_454_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40220 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i9_SLICE_455 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/SLICE_455_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/GATE_H0 ;

  lut40221 \cm/assignCM/mux_583_i9/SLICE_455_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/SLICE_455_K1_H1 ));
  lut40071 \cm/assignCM/mux_583_i9/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i9/SLICE_455_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i9/SLICE_455/cm/assignCM/mux_583_i9/SLICE_455_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40221 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i7_SLICE_456 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/SLICE_456_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/GATE_H0 ;

  lut40222 \cm/assignCM/mux_583_i7/SLICE_456_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/SLICE_456_K1_H1 ));
  lut40223 \cm/assignCM/mux_583_i7/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i7/SLICE_456_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i7/SLICE_456/cm/assignCM/mux_583_i7/SLICE_456_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40222 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h70F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40223 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i6_SLICE_457 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/SLICE_457_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/GATE_H0 ;

  lut40224 \cm/assignCM/mux_583_i6/SLICE_457_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/SLICE_457_K1_H1 ));
  lut40072 \cm/assignCM/mux_583_i6/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i6/SLICE_457_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i6/SLICE_457/cm/assignCM/mux_583_i6/SLICE_457_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40224 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h70F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i3_SLICE_458 ( input D1, C1, B1, A1, C0, B0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/SLICE_458_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/GATE_H0 ;

  lut40225 \cm/assignCM/mux_583_i3/SLICE_458_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/SLICE_458_K1_H1 ));
  lut40226 \cm/assignCM/mux_583_i3/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i3/SLICE_458_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i3/SLICE_458/cm/assignCM/mux_583_i3/SLICE_458_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40225 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h70F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40226 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i2_SLICE_459 ( input D1, C1, B1, A1, D0, C0, A0, M0, 
    output OFX0 );
  wire   
         \cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/SLICE_459_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/GATE_H0 ;

  lut40224 \cm/assignCM/mux_583_i2/SLICE_459_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/SLICE_459_K1_H1 ));
  lut40227 \cm/assignCM/mux_583_i2/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i2/SLICE_459_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i2/SLICE_459/cm/assignCM/mux_583_i2/SLICE_459_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40227 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_i6142_SLICE_460 ( input C1, B1, D0, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/SLICE_460_K1_H1 , 
         \cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/GATE_H0 ;

  lut40228 \cm/assignCM/i6142/SLICE_460_K1 ( .A(GNDI), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/SLICE_460_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40229 \cm/assignCM/i6142/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/GATE_H0 ));
  selmux2 \cm/assignCM/i6142/SLICE_460_K0K1MUX ( 
    .D0(\cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/GATE_H0 ), 
    .D1(\cm/assignCM/i6142/SLICE_460/cm/assignCM/i6142/SLICE_460_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40228 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFCF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40229 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_i6148_SLICE_461 ( input D1, C1, B1, A1, D0, C0, B0, M0, 
    output OFX0 );
  wire   \cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/SLICE_461_K1_H1 , GNDI, 
         \cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/GATE_H0 ;

  lut40230 \cm/assignCM/i6148/SLICE_461_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/SLICE_461_K1_H1 ));
  lut40231 \cm/assignCM/i6148/GATE ( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(\cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/i6148/SLICE_461_K0K1MUX ( 
    .D0(\cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/GATE_H0 ), 
    .D1(\cm/assignCM/i6148/SLICE_461/cm/assignCM/i6148/SLICE_461_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40230 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0105) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40231 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h030F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_mux_583_i11_SLICE_462 ( input D1, C1, B1, A1, D0, C0, A0, 
    M0, output OFX0 );
  wire   
         \cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/SLICE_462_K1_H1 
         , GNDI, 
         \cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/GATE_H0 ;

  lut40229 \cm/assignCM/mux_583_i11/SLICE_462_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/SLICE_462_K1_H1 )
    );
  lut40232 \cm/assignCM/mux_583_i11/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \cm/assignCM/mux_583_i11/SLICE_462_K0K1MUX ( 
    .D0(\cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/GATE_H0 ), 
    .D1(\cm/assignCM/mux_583_i11/SLICE_462/cm/assignCM/mux_583_i11/SLICE_462_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40232 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0AA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module LessThan_683_i12_SLICE_463 ( input D1, B1, A1, D0, C0, A0, M0, output 
    OFX0 );
  wire   GNDI, \LessThan_683_i12/SLICE_463/LessThan_683_i12/SLICE_463_K1_H1 , 
         \LessThan_683_i12/SLICE_463/LessThan_683_i12/GATE_H0 ;

  lut40233 \LessThan_683_i12/SLICE_463_K1 ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(\LessThan_683_i12/SLICE_463/LessThan_683_i12/SLICE_463_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40234 \LessThan_683_i12/GATE ( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(\LessThan_683_i12/SLICE_463/LessThan_683_i12/GATE_H0 ));
  selmux2 \LessThan_683_i12/SLICE_463_K0K1MUX ( 
    .D0(\LessThan_683_i12/SLICE_463/LessThan_683_i12/GATE_H0 ), 
    .D1(\LessThan_683_i12/SLICE_463/LessThan_683_i12/SLICE_463_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40233 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88EE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40234 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_464 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40235 \cm/configCM/i948_2_lut_rep_118_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40236 \cm/configCM/i2_4_lut_adj_29 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i15 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i14 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40235 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40236 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_465 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40237 \cm/configCM/n1_bdd_3_lut_6118_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40238 \cm/configCM/n7223_bdd_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i8 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40237 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB0F8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40238 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF808) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_466 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40239 \cm/configCM/i5992_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40240 \cm/configCM/i1_3_lut_rep_119_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i1 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i0 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40239 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h08CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40240 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_467 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40241 \cm/assignCM/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40242 \cm/assignCM/i3_4_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40241 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40242 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h20A0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_468 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40243 \uart/SAMPLER/i104_2_lut_rep_107_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40244 i3190_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \db/DB_VS/button_ff_19 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \db/DB_HS/button_ff_19 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40243 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40244 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2220) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_469 ( input C1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40245 i108_2_lut_rep_106( .A(GNDI), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40246 i6013_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \db/DB_VS/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40245 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3F3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40246 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1233) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_470 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40247 LessThan_674_i9_2_lut_rep_165( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40248 i6066_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40247 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3C3C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40248 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFBA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_471 ( input D1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40249 \uart/UART_STATE/i325_2_lut_rep_133 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40250 i3188_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \db/DB_DF_VGA/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40249 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3300) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40250 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_472 ( input D1, C1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40251 \uart/SAMPLER/i6028_2_lut_rep_117_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40252 i6030_2_lut_rep_103_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40251 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40252 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0008) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_473 ( input D1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40111 LessThan_683_i9_2_lut_rep_157( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40253 i6047_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40253 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAAAB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_474 ( input D1, B1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40055 \uart/SAMPLER/i3004_2_lut_rep_108 ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40254 i3186_2_lut_rep_102_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \db/DB_DF_UART/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40254 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_475 ( input D1, A1, D0, C0, B0, A0, M0, CE, CLK, output F0, Q0, 
    F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40111 LessThan_677_i9_2_lut_rep_158( .A(A1), .B(GNDI), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40255 i5979_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \db/DB_HS/sync_ff_18 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40255 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_476 ( input C1, B1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40256 \uart/SAMPLER/i2272_3_lut_4_lut_2_lut_2_lut ( .A(GNDI), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40257 i6034_3_lut_rep_105_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40256 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40257 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_477 ( input D1, C1, B1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40258 \cm/configCM/i5990_2_lut_rep_131_3_lut ( .A(GNDI), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40259 \cm/configCM/i6041_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40258 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF3F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40259 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0035) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_478 ( input D1, C1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40054 \cm/configCM/i1_2_lut_rep_161 ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40260 \cm/configCM/i2_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40260 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_479 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40261 \cm/configCM/i2228_2_lut_rep_116 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40262 \cm/configCM/i2226_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40261 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40262 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_480 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40263 \cm/configCM/i2103_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40264 \cm/configCM/i5828_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i7 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i6 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40263 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h50D8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40264 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h88C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_481 ( input D1, C1, B1, A1, D0, A0, M1, M0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40265 \cm/configCM/i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40266 \cm/configCM/i5817_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i5 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i4 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40265 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB3F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40266 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_482 ( input D1, C1, B1, A1, D0, C0, B0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40267 \cm/configCM/n1_bdd_4_lut_6119 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40268 \cm/configCM/mux_201_Mux_6_i1_3_lut_rep_138 ( .A(GNDI), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i6 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40267 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5033) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40268 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFC30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_483 ( input D1, C1, A1, D0, C0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40269 \cm/configCM/i2_3_lut_adj_30 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40270 \cm/configCM/i6010_3_lut ( .A(A0), .B(GNDI), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40269 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40270 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_484 ( input D1, B1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40170 \cm/assignCM/i5970_4_lut_rep_123_2_lut ( .A(GNDI), .B(B1), .C(GNDI), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40271 \cm/assignCM/i23_4_lut_4_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40271 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4CEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_485 ( input D1, C1, B1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40272 \cm/assignCM/i5809_2_lut_3_lut ( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40273 \cm/assignCM/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40272 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF3FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40273 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_486 ( input D1, B1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40274 \cd/CLOCK_DIVIDER_CONFIG/c_addr_3__I_0_i6_2_lut_rep_149 ( .A(GNDI), 
    .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40275 \cm/assignCM/i1831_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40274 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40275 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_487 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40276 \cd/CLOCK_DIVIDER_CONFIG/i1_2_lut_rep_114_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40277 \cm/assignCM/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40276 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40277 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_488 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40278 \cd/CLOCK_DIVIDER_CONFIG/c_addr_3__I_0_30_i6_2_lut_rep_148 ( .A(A1), 
    .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40279 \cm/assignCM/i1_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40278 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40279 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_489 ( input D1, C1, B1, A1, D0, C0, M0, CE, CLK, 
    output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40280 \cm/assignCM/i5999_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40281 \cm/assignCM/Horizontal_Split_I_0_2_lut ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/H_BackPorch_reg_i0_i7 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40280 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40281 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_490 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40282 \uart/SAMPLER/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40283 \uart/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40282 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40283 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_491 ( input D1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );
  wire   GNDI;

  lut40284 \uart/UART_STATE/i3095_2_lut_rep_130_3_lut ( .A(A1), .B(B1), 
    .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40285 \uart/UART_STATE/i5965_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40284 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hAA88) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40285 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDF8F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_STATE_SLICE_492 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40286 \uart/UART_STATE/n7195_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40287 \uart/UART_STATE/stopbit_bdd_4_lut_6100 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40286 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4450) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40287 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB484) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_493 ( input D1, C1, B1, A1, C0, B0, M0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40288 \uart/UART_STATE/n375_bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40256 \uart/UART_STATE/LEDS_c_bdd_2_lut_6104 ( .A(GNDI), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \uart/UART_CONFIG/parity_bit_reg_i0_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40288 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_494 ( input D1, C1, B1, D0, C0, A0, CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, CE_dly, CLK_dly;

  lut40289 LessThan_677_i12_3_lut_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40290 LessThan_677_i10_3_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0038 \FIFO_UART_CM/r_empty_reg_23 ( .D0(GNDI), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40289 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF330) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40290 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF550) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_495 ( input D1, C1, B1, D0, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40289 LessThan_674_i12_3_lut_3_lut( .A(GNDI), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40291 LessThan_674_i10_3_lut_3_lut( .A(GNDI), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40291 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0FC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_config1_SLICE_496 ( input D1, C1, A1, D0, C0, A0, M1, M0, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40292 \vga/config1/i2_3_lut_rep_150 ( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40293 \vga/config1/i5995_2_lut_2_lut_3_lut ( .A(A0), .B(GNDI), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0041 \vga/config1/H_Left_Margin_nxt_8__I_0_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i7 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40292 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40293 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cd_CLOCK_DIVIDER_CONFIG_SLICE_497 ( input D1, C1, B1, A1, D0, C0, M0, 
    CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40294 \cd/CLOCK_DIVIDER_CONFIG/i1_4_lut_rep_111 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40295 \cd/CLOCK_DIVIDER_CONFIG/i2293_2_lut_2_lut ( .A(GNDI), .B(GNDI), 
    .C(C0), .D(D0), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \cd/CLOCK_DIVIDER_CONFIG/baudrate_reg_i0_i4 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40294 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1030) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40295 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_498 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40296 \cm/assignCM/i6001_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40297 \cm/assignCM/i1_2_lut_3_lut_4_lut_adj_28 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40296 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40297 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_UART_CONFIG_SLICE_499 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40298 \uart/UART_CONFIG/i6059_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40299 \uart/UART_CONFIG/i388_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40298 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h01FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40299 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_500 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40300 \cm/configCM/i6054_2_lut_rep_124_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40301 \cm/configCM/i5986_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/configCM/RXD_Data_reg_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40300 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0005) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40301 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_501 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40302 \cm/assignCM/mux_583_i4_4_lut_4_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40303 \cm/assignCM/mux_583_i1_4_lut_4_lut_4_lut_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40302 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F20) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40303 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h72F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_502 ( input D1, C1, A1, D0, C0, B0, A0, M0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40304 \uart/UART_STATE/i1_2_lut_rep_122_3_lut ( .A(A1), .B(GNDI), .C(C1), 
    .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40305 \uart/UART_STATE/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \uart/UART_CONFIG/stop_bit_reg_20 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40304 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF50) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40305 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCC40) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_503 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40306 i5863_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40307 LessThan_677_i6_3_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40306 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8421) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40307 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF550) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_504 ( input D1, C1, A1, D0, C0, B0, A0, M1, M0, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, LSR_dly;

  lut40308 \cd/CLOCK_DIVIDER_CONFIG/i3161_2_lut_rep_126_3_lut ( .A(A1), 
    .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40309 \vga/config1/Load_nxt_I_0_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i2 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0041 \vga/config1/H_Count_Max_nxt_11__I_0_i1 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40308 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFAF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40309 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_505 ( input D1, C1, B1, A1, D0, C0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40310 i5883_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40311 LessThan_674_i6_3_lut_3_lut( .A(A0), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40310 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9009) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40311 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0FA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_506 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40312 i1_3_lut_4_lut_adj_31( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40313 i6016_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40312 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1040) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40313 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h006F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_507 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40314 i1_3_lut_4_lut_adj_32( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40315 i6019_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40314 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0600) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40315 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h060F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_508 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40316 i6037_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40317 i1_3_lut_4_lut_adj_33( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \db/DB_DF_VGA/button_ff_19 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \db/DB_DF_UART/button_ff_19 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40316 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1323) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40317 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0208) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_509 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40318 LessThan_677_i4_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40319 LessThan_683_i4_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40318 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4F04) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40319 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDF45) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_510 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40320 \cm/configCM/i6050_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40321 \cm/configCM/i6039_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \cm/configCM/c_data_reg_i13 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/configCM/c_data_reg_i12 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40320 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00A3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40321 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0503) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_configCM_SLICE_511 ( input C1, A1, D0, C0, M1, M0, CE, LSR, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly, LSR_dly;

  lut40074 \cm/configCM/i2263_1_lut_2_lut ( .A(A1), .B(GNDI), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40322 \cm/configCM/i3088_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \cm/configCM/RXD_Data_reg_i3 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \cm/configCM/RXD_Data_reg_i2 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40322 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF0F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_512 ( input D1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40323 \cm/configCM/i1905_2_lut_3_lut ( .A(A1), .B(B1), .C(GNDI), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40324 \cm/configCM/i1490_2_lut_rep_159 ( .A(GNDI), .B(B0), .C(GNDI), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40323 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF66) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40324 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h33CC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_513 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40325 \cm/assignCM/i5972_2_lut_3_lut_4_lut_4_lut_4_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40326 \cm/assignCM/i32_4_lut_4_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_UP_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40325 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFF8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40326 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBF80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module uart_SLICE_514 ( input C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40327 \uart/i1_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40328 \uart/valid_out_I_0_2_lut_rep_144 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40327 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40328 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_515 ( input D1, C1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40329 i5874_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40200 LessThan_677_i11_2_lut_rep_152( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i1 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i0 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40329 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8241) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_516 ( input D1, C1, A1, C0, A0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40330 i5980_2_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40150 LessThan_677_i15_2_lut_rep_154( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40330 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF5A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_517 ( input D1, C1, A1, C0, A0, M1, M0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40290 LessThan_683_i6_3_lut_3_lut( .A(A1), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40106 LessThan_683_i7_2_lut_rep_156( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i11 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \vga/config1/H_Count_Max_reg_i10 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_518 ( input D1, C1, B1, A1, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40331 i5894_2_lut_3_lut_4_lut( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40208 LessThan_674_i11_2_lut_rep_162( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40331 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8421) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_519 ( input D1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40332 i6067_2_lut_3_lut( .A(A1), .B(B1), .C(GNDI), .D(D1), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40324 LessThan_674_i15_2_lut_rep_164( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i5 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/r_data_reg_i0_i4 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40332 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_SLICE_520 ( input D1, C1, B1, A1, C0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40333 \cm/configCM/i2_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40048 \cm/configCM/i1_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Right_UP_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40333 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0038) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_521 ( input B1, A1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40334 \cd/CNT_UART/i5963_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40335 \uart/UART_STATE/i5968_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40334 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7777) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40335 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5F5F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_522 ( input D1, C1, B1, A1, D0, B0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40336 i3_4_lut_adj_34( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40324 LessThan_677_i13_2_lut_rep_153( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i3 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \FIFO_UART_CM/w_data_reg_i0_i2 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40336 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_523 ( input C1, B1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40337 \vga/assgncolor/i3080_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 \vga/assgncolor/i2988_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40337 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC0C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_524 ( input C1, B1, C0, A0, output F0, F1 );
  wire   GNDI;

  lut40337 \vga/assgncolor/i3081_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40162 \vga/assgncolor/i3075_2_lut ( .A(A0), .B(GNDI), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_525 ( input C1, B1, D0, C0, output F0, F1 );
  wire   GNDI;

  lut40337 \vga/assgncolor/i3082_2_lut ( .A(GNDI), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40338 \vga/assgncolor/i3076_2_lut ( .A(GNDI), .B(GNDI), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40338 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_526 ( input D1, C1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40338 \vga/assgncolor/i2987_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40337 \vga/assgncolor/i2989_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module vga_assgncolor_SLICE_527 ( input B1, A1, C0, B0, output F0, F1 );
  wire   GNDI;

  lut40339 \vga/assgncolor/i3077_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40256 \vga/assgncolor/i3079_2_lut ( .A(GNDI), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40339 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vga_assgncolor_SLICE_528 ( input D1, C1, D0, A0, output F0, F1 );
  wire   GNDI;

  lut40340 \vga/assgncolor/i3078_2_lut ( .A(GNDI), .B(GNDI), .C(C1), .D(D1), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40090 \vga/assgncolor/i3074_2_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40340 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module cm_assignCM_SLICE_529 ( input D1, C1, B1, A1, D0, B0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40341 \cm/assignCM/i6065_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40144 \cm/assignCM/i2930_2_lut ( .A(GNDI), .B(B0), .C(GNDI), .D(D0), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0014 \cm/assignCM/Left_DOWN_reg_i0_i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40341 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module GREEN_0_ ( input PADDO, output GREEN0 );
  wire   GNDI;

  se5iobuf GREEN_pad_0( .I(PADDO), .T(GNDI), .PAD(GREEN0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN0) = (0:0:0,0:0:0);
  endspecify

endmodule

module se5iobuf ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module GREEN_1_ ( input PADDO, output GREEN1 );
  wire   GNDI;

  se5iobuf GREEN_pad_1( .I(PADDO), .T(GNDI), .PAD(GREEN1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN1) = (0:0:0,0:0:0);
  endspecify

endmodule

module GREEN_2_ ( input PADDO, output GREEN2 );
  wire   GNDI;

  se5iobuf GREEN_pad_2( .I(PADDO), .T(GNDI), .PAD(GREEN2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN2) = (0:0:0,0:0:0);
  endspecify

endmodule

module GREEN_3_ ( input PADDO, output GREEN3 );
  wire   GNDI;

  se5iobuf0342 GREEN_pad_3( .I(PADDO), .T(GNDI), .PAD(GREEN3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => GREEN3) = (0:0:0,0:0:0);
  endspecify

endmodule

module se5iobuf0342 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module RED_0_ ( input PADDO, output RED0 );
  wire   GNDI;

  se5iobuf RED_pad_0( .I(PADDO), .T(GNDI), .PAD(RED0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED0) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_1_ ( input PADDO, output RED1 );
  wire   GNDI;

  se5iobuf RED_pad_1( .I(PADDO), .T(GNDI), .PAD(RED1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED1) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_2_ ( input PADDO, output RED2 );
  wire   GNDI;

  se5iobuf RED_pad_2( .I(PADDO), .T(GNDI), .PAD(RED2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED2) = (0:0:0,0:0:0);
  endspecify

endmodule

module RED_3_ ( input PADDO, output RED3 );
  wire   GNDI;

  se5iobuf0342 RED_pad_3( .I(PADDO), .T(GNDI), .PAD(RED3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => RED3) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_0_ ( input PADDO, output LEDS0 );
  wire   GNDI;

  se5iobuf LEDS_pad_0( .I(PADDO), .T(GNDI), .PAD(LEDS0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS0) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_1_ ( input PADDO, output LEDS1 );
  wire   GNDI;

  se5iobuf LEDS_pad_1( .I(PADDO), .T(GNDI), .PAD(LEDS1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS1) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_2_ ( input PADDO, output LEDS2 );
  wire   GNDI;

  se5iobuf LEDS_pad_2( .I(PADDO), .T(GNDI), .PAD(LEDS2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS2) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_3_ ( input PADDO, output LEDS3 );
  wire   GNDI;

  se5iobuf LEDS_pad_3( .I(PADDO), .T(GNDI), .PAD(LEDS3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS3) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_4_ ( input PADDO, output LEDS4 );
  wire   GNDI;

  se5iobuf LEDS_pad_4( .I(PADDO), .T(GNDI), .PAD(LEDS4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS4) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_5_ ( input PADDO, output LEDS5 );
  wire   GNDI;

  se5iobuf LEDS_pad_5( .I(PADDO), .T(GNDI), .PAD(LEDS5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS5) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_6_ ( input PADDO, output LEDS6 );
  wire   GNDI;

  se5iobuf LEDS_pad_6( .I(PADDO), .T(GNDI), .PAD(LEDS6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS6) = (0:0:0,0:0:0);
  endspecify

endmodule

module LEDS_7_ ( input PADDO, output LEDS7 );
  wire   GNDI;

  se5iobuf LEDS_pad_7( .I(PADDO), .T(GNDI), .PAD(LEDS7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => LEDS7) = (0:0:0,0:0:0);
  endspecify

endmodule

module VSYNC ( input PADDO, output VSYNC );
  wire   GNDI;

  se5iobuf VSYNC_pad( .I(PADDO), .T(GNDI), .PAD(VSYNC));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => VSYNC) = (0:0:0,0:0:0);
  endspecify

endmodule

module HSYNC ( input PADDO, output HSYNC );
  wire   GNDI;

  se5iobuf HSYNC_pad( .I(PADDO), .T(GNDI), .PAD(HSYNC));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => HSYNC) = (0:0:0,0:0:0);
  endspecify

endmodule

module out ( input PADDO, output out );
  wire   GNDI;

  se5iobuf out_pad( .I(PADDO), .T(GNDI), .PAD(out));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => out) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_3_ ( input PADDO, output BLUE3 );
  wire   GNDI;

  se5iobuf0342 BLUE_pad_3( .I(PADDO), .T(GNDI), .PAD(BLUE3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE3) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_2_ ( input PADDO, output BLUE2 );
  wire   GNDI;

  se5iobuf0342 BLUE_pad_2( .I(PADDO), .T(GNDI), .PAD(BLUE2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE2) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_1_ ( input PADDO, output BLUE1 );
  wire   GNDI;

  se5iobuf BLUE_pad_1( .I(PADDO), .T(GNDI), .PAD(BLUE1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE1) = (0:0:0,0:0:0);
  endspecify

endmodule

module BLUE_0_ ( input PADDO, output BLUE0 );
  wire   GNDI;

  se5iobuf BLUE_pad_0( .I(PADDO), .T(GNDI), .PAD(BLUE0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => BLUE0) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk ( output PADDI, input clk );

  se5iobuf0343 clk_pad( .Z(PADDI), .PAD(clk));

  specify
    (clk => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk, 0:0:0);
    $width (negedge clk, 0:0:0);
  endspecify

endmodule

module se5iobuf0343 ( output Z, input PAD );

  IB INST1( .I(PAD), .O(Z));
endmodule

module rst_n ( output PADDI, input rst_n );

  se5iobuf0344 rst_n_pad( .Z(PADDI), .PAD(rst_n));

  specify
    (rst_n => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst_n, 0:0:0);
    $width (negedge rst_n, 0:0:0);
  endspecify

endmodule

module se5iobuf0344 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module btnHS ( output PADDI, input btnHS );

  se5iobuf0345 btnHS_pad( .Z(PADDI), .PAD(btnHS));

  specify
    (btnHS => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnHS, 0:0:0);
    $width (negedge btnHS, 0:0:0);
  endspecify

endmodule

module se5iobuf0345 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module btnVS ( output PADDI, input btnVS );

  se5iobuf0345 btnVS_pad( .Z(PADDI), .PAD(btnVS));

  specify
    (btnVS => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnVS, 0:0:0);
    $width (negedge btnVS, 0:0:0);
  endspecify

endmodule

module btnUART ( output PADDI, input btnUART );

  se5iobuf0345 btnUART_pad( .Z(PADDI), .PAD(btnUART));

  specify
    (btnUART => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnUART, 0:0:0);
    $width (negedge btnUART, 0:0:0);
  endspecify

endmodule

module btnVGA ( output PADDI, input btnVGA );

  se5iobuf0345 btnVGA_pad( .Z(PADDI), .PAD(btnVGA));

  specify
    (btnVGA => PADDI) = (0:0:0,0:0:0);
    $width (posedge btnVGA, 0:0:0);
    $width (negedge btnVGA, 0:0:0);
  endspecify

endmodule

module in ( output PADDI, input in );

  se5iobuf0345 in_pad( .Z(PADDI), .PAD(in));

  specify
    (in => PADDI) = (0:0:0,0:0:0);
    $width (posedge in, 0:0:0);
    $width (negedge in, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule

module basic_4OUT_PLL_PLLInst_0 ( input CLKI, CLKFB, output CLKINTFB, CLKOP );
  wire   GNDI;

  EHXPLLJ_B \basic_4OUT_PLL/PLLInst_0_EHXPLLJ ( .CLKI(CLKI), .CLKFB(CLKFB), 
    .PHASESEL1(GNDI), .PHASESEL0(GNDI), .PHASEDIR(GNDI), .PHASESTEP(GNDI), 
    .LOADREG(GNDI), .STDBY(GNDI), .PLLWAKESYNC(GNDI), .RST(GNDI), 
    .RESETM(GNDI), .RESETC(GNDI), .RESETD(GNDI), .ENCLKOP(GNDI), 
    .ENCLKOS(GNDI), .ENCLKOS2(GNDI), .ENCLKOS3(GNDI), .PLLCLK(GNDI), 
    .PLLRST(GNDI), .PLLSTB(GNDI), .PLLWE(GNDI), .PLLDATI7(GNDI), 
    .PLLDATI6(GNDI), .PLLDATI5(GNDI), .PLLDATI4(GNDI), .PLLDATI3(GNDI), 
    .PLLDATI2(GNDI), .PLLDATI1(GNDI), .PLLDATI0(GNDI), .PLLADDR4(GNDI), 
    .PLLADDR3(GNDI), .PLLADDR2(GNDI), .PLLADDR1(GNDI), .PLLADDR0(GNDI), 
    .CLKOP(CLKOP), .CLKOS(), .CLKOS2(), .CLKOS3(), .LOCK(), .INTLOCK(), 
    .REFCLK(), .CLKINTFB(CLKINTFB), .DPHSRC(), .PLLDATO7(), .PLLDATO6(), 
    .PLLDATO5(), .PLLDATO4(), .PLLDATO3(), .PLLDATO2(), .PLLDATO1(), 
    .PLLDATO0(), .PLLACK());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (CLKI => CLKINTFB) = (0:0:0,0:0:0);
    (CLKI => CLKOP) = (0:0:0,0:0:0);
    (CLKFB => CLKINTFB) = (0:0:0,0:0:0);
    (CLKFB => CLKOP) = (0:0:0,0:0:0);
  endspecify

endmodule

module EHXPLLJ_B ( input CLKI, CLKFB, PHASESEL1, PHASESEL0, PHASEDIR, 
    PHASESTEP, LOADREG, STDBY, PLLWAKESYNC, RST, RESETM, RESETC, RESETD, 
    ENCLKOP, ENCLKOS, ENCLKOS2, ENCLKOS3, PLLCLK, PLLRST, PLLSTB, PLLWE, 
    PLLDATI7, PLLDATI6, PLLDATI5, PLLDATI4, PLLDATI3, PLLDATI2, PLLDATI1, 
    PLLDATI0, PLLADDR4, PLLADDR3, PLLADDR2, PLLADDR1, PLLADDR0, output CLKOP, 
    CLKOS, CLKOS2, CLKOS3, LOCK, INTLOCK, REFCLK, CLKINTFB, DPHSRC, PLLDATO7, 
    PLLDATO6, PLLDATO5, PLLDATO4, PLLDATO3, PLLDATO2, PLLDATO1, PLLDATO0, 
    PLLACK );

  EHXPLLJ INST10( .CLKI(CLKI), .CLKFB(CLKFB), .PHASESEL1(PHASESEL1), 
    .PHASESEL0(PHASESEL0), .PHASEDIR(PHASEDIR), .PHASESTEP(PHASESTEP), 
    .LOADREG(LOADREG), .STDBY(STDBY), .PLLWAKESYNC(PLLWAKESYNC), .RST(RST), 
    .RESETM(RESETM), .RESETC(RESETC), .RESETD(RESETD), .ENCLKOP(ENCLKOP), 
    .ENCLKOS(ENCLKOS), .ENCLKOS2(ENCLKOS2), .ENCLKOS3(ENCLKOS3), 
    .PLLCLK(PLLCLK), .PLLRST(PLLRST), .PLLSTB(PLLSTB), .PLLWE(PLLWE), 
    .PLLADDR4(PLLADDR4), .PLLADDR3(PLLADDR3), .PLLADDR2(PLLADDR2), 
    .PLLADDR1(PLLADDR1), .PLLADDR0(PLLADDR0), .PLLDATI7(PLLDATI7), 
    .PLLDATI6(PLLDATI6), .PLLDATI5(PLLDATI5), .PLLDATI4(PLLDATI4), 
    .PLLDATI3(PLLDATI3), .PLLDATI2(PLLDATI2), .PLLDATI1(PLLDATI1), 
    .PLLDATI0(PLLDATI0), .CLKOP(CLKOP), .CLKOS(CLKOS), .CLKOS2(CLKOS2), 
    .CLKOS3(CLKOS3), .LOCK(LOCK), .REFCLK(REFCLK), .INTLOCK(INTLOCK), 
    .PLLDATO7(PLLDATO7), .PLLDATO6(PLLDATO6), .PLLDATO5(PLLDATO5), 
    .PLLDATO4(PLLDATO4), .PLLDATO3(PLLDATO3), .PLLDATO2(PLLDATO2), 
    .PLLDATO1(PLLDATO1), .PLLDATO0(PLLDATO0), .PLLACK(PLLACK), .DPHSRC(DPHSRC), 
    .CLKINTFB(CLKINTFB));
  defparam INST10.CLKFB_DIV = 4;
  defparam INST10.CLKI_DIV = 1;
  defparam INST10.CLKOP_CPHASE = 7;
  defparam INST10.CLKOP_DIV = 8;
  defparam INST10.CLKOP_ENABLE = "ENABLED";
  defparam INST10.CLKOP_FPHASE = 0;
  defparam INST10.CLKOP_TRIM_DELAY = 0;
  defparam INST10.CLKOP_TRIM_POL = "RISING";
  defparam INST10.CLKOS2_CPHASE = 2;
  defparam INST10.CLKOS2_DIV = 3;
  defparam INST10.CLKOS2_ENABLE = "ENABLED";
  defparam INST10.CLKOS2_FPHASE = 0;
  defparam INST10.CLKOS3_CPHASE = 25;
  defparam INST10.CLKOS3_DIV = 26;
  defparam INST10.CLKOS3_ENABLE = "ENABLED";
  defparam INST10.CLKOS3_FPHASE = 0;
  defparam INST10.CLKOS_CPHASE = 4;
  defparam INST10.CLKOS_DIV = 5;
  defparam INST10.CLKOS_ENABLE = "ENABLED";
  defparam INST10.CLKOS_FPHASE = 0;
  defparam INST10.CLKOS_TRIM_DELAY = 0;
  defparam INST10.CLKOS_TRIM_POL = "RISING";
  defparam INST10.DCRST_ENA = "DISABLED";
  defparam INST10.DDRST_ENA = "DISABLED";
  defparam INST10.DPHASE_SOURCE = "DISABLED";
  defparam INST10.FEEDBK_PATH = "INT_DIVA";
  defparam INST10.FRACN_DIV = 0;
  defparam INST10.FRACN_ENABLE = "DISABLED";
  defparam INST10.INTFB_WAKE = "DISABLED";
  defparam INST10.MRST_ENA = "DISABLED";
  defparam INST10.OUTDIVIDER_MUXA2 = "DIVA";
  defparam INST10.OUTDIVIDER_MUXB2 = "DIVB";
  defparam INST10.OUTDIVIDER_MUXC2 = "DIVC";
  defparam INST10.OUTDIVIDER_MUXD2 = "DIVD";
  defparam INST10.PLLRST_ENA = "DISABLED";
  defparam INST10.PLL_LOCK_MODE = 0;
  defparam INST10.PLL_USE_WB = "DISABLED";
  defparam INST10.PREDIVIDER_MUXA1 = 0;
  defparam INST10.PREDIVIDER_MUXB1 = 0;
  defparam INST10.PREDIVIDER_MUXC1 = 0;
  defparam INST10.PREDIVIDER_MUXD1 = 1;
  defparam INST10.STDBY_ENABLE = "DISABLED";
  defparam INST10.VCO_BYPASS_A0 = "DISABLED";
  defparam INST10.VCO_BYPASS_B0 = "DISABLED";
  defparam INST10.VCO_BYPASS_C0 = "DISABLED";
  defparam INST10.VCO_BYPASS_D0 = "DISABLED";
endmodule
